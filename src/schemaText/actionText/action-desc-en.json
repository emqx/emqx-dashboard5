{
  "common": {
    "auto_restart_interval": "The auto restart interval after the resource is disconnected.",
    "batch_size": "Maximum batch count. If equal to 1, there's effectively no batching.",
    "batch_time": "Maximum waiting interval when accumulating a batch at a low message rates for more efficient resource usage.",
    "enable_queue": "Enable disk buffer queue (only applicable for egress bridges).\nWhen Enabled, messages will be buffered on disk when the bridge connection is down.\nWhen disabled the messages are buffered in RAM only.",
    "health_check_interval": "Health check interval.",
    "inflight_window": "Query inflight window. When query_mode is set to async, this config has to be set to 1 if messages from the same MQTT client have to be strictly ordered.",
    "query_mode": "Query mode. Optional 'sync/async', default 'async'.",
    "request_ttl": "Starting from the moment when the request enters the buffer, if the request remains in the buffer for the specified time or is sent but does not receive a response or acknowledgement in time, the request is considered expired.",
    "start_timeout": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
    "worker_pool_size": "The number of buffer workers. Only applicable for egress type bridges.\nFor bridges only have ingress direction data flow, it can be set to 0 otherwise must be greater than 0.",
    "max_buffer_bytes": "Maximum number of bytes to buffer for each buffer worker.",
    "password": "Password used for authentication with the external database.",
    "pool_size": "Size of the connection pool towards the bridge target service.",
    "prepare_statement": "Key-value list of SQL prepared statements.",
    "ssl": "SSL connection settings.",
    "username": "The username in the external database used for authentication or identification purposes.",
    "database": "Database name.",
    "tcp_keepalive": "Enable TCP keepalive for connector.<br/>The value is a comma-separated list of three numbers in the format of `Idle,Interval,Probes`<br/>- Idle: The number of seconds of idle time needed by a connection before the server begins to send out keep-alive probes (default on Linux is 7200).<br/>- Interval: The number of seconds between TCP keep-alive probes (default on Linux is 75).<br/>- Probes: The maximum number of TCP keep-alive probes to send before considering the connection as closed if no response is received from the other end (default on Linux is 9).<br/>For example \"240,30,5\" means: send TCP keepalive probes after 240 seconds of idle time, and send probes every 30 second. If there are no responses for 5 consecutive attempts, the connection should be closed.<br/>Default: 'none'",
    "sndbuf": "Fine tune the socket send buffer. The default value is tuned for high throughput.",
    "recbuf": "Fine tune the socket receive buffer. The default value is tuned for high throughput.",
    "nodelay": "When set to `true`, TCP buffer is sent as soon as possible. Otherwise, the OS kernel may buffer small TCP packets for a while (40 ms by default).",
    "pool_type": "The type of the pool. Can be one of `random`, `hash`.",
    "max_retries": "Max retry times if an error occurs when sending a request."
  },
  "mqtt": {
    "bridge_mode": "This setting is only for MQTT protocol version older than 5.0, and the remote MQTT broker MUST support this feature. After being enabled, the remote broker will recognize the current connection as a bridge, that loop detection will be more effective and that retained messages will be propagated correctly.",
    "clean_start": "Whether to start a clean session when reconnecting a remote broker for ingress bridge.",
    "retry_interval": "Retry interval for QoS1/QoS2 messages if no ACK is received.",
    "clientid_prefix": "The prefix used when the connector randomly generates a Client ID.",
    "max_inflight": "The number of Unacked messages that can be simultaneously waited for during message publishing, in order to improve message delivery efficiency and throughput.",
    "topic": "Message publishing topic, supports using ${'{'}field{'}'} syntax to extract variables and dynamically concatenate the topic.",
    "source_topic": "Message subscription topics support the use of + and # wildcards. When EMQX is running in cluster mode or the connector is configured with a connection pool, shared subscriptions must be used to avoid message duplication.",
    "payload": "For example: ${'{'}payload{'}'}, ${'{'}clientid{'}'}, ${'{'}topic{'}'} , ${'{'}username{'}'}, etc. Use fields according to the action requirements of your business and forwards the message as it is if it is empty.Supports reading data using ${'{'}field{'}'} syntax."
  },
  "http": {
    "url": "The URL of the HTTP Connector.<br/>Template with variables is allowed in the path, but variables cannot be used in the host or port part.<br/>For example, `http://localhost:9901/${'{'}topic{'}'}` is allowed, but`http://${'{'}host{'}'}:9901/message` or `http://localhost:${'{'}port{'}'}/message`is not allowed.",
    "body": "For example: ${'{'}payload{'}'}, ${'{'}clientid{'}'}, ${'{'}topic{'}'} , ${'{'}username{'}'}, etc. Use fields according to the action requirements of your business and forwards the message as it is if it is empty.",
    "path": "The URL path for this Action.<br/>This path will be appended to the Connector's <code>url</code> configuration to form the full URL address.Template with variables is allowed in this option. For example, <code>/room/{'{'}$room_no{'}'}</code>"
  }
}