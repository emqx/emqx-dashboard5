{
  "emqx_auto_subscribe_api": {
    "list_auto_subscribe_api": {
      "desc": "Get auto subscribe topic list"
    },
    "update_auto_subscribe_api": {
      "desc": "Update auto subscribe topic list"
    },
    "update_auto_subscribe_api_response409": {
      "desc": "Auto Subscribe topics max limit"
    }
  },
  "emqx_auto_subscribe_schema": {
    "auto_subscribe": {
      "desc": "After the device logs in successfully, the subscription is automatically completed for the device through the pre-defined subscription representation. Supports the use of placeholders.",
      "label": "Auto Subscribe"
    },
    "nl": {
      "desc": "Default value 0.\nMQTT v3.1.1： if you subscribe to the topic published by yourself, you will receive all messages that you published.\nMQTT v5: if you set this option as 1 when subscribing, the server will not forward the message you published to you.",
      "label": "No Local"
    },
    "qos": {
      "desc": "Default value 0. Quality of service.\nAt most once (0)\nAt least once (1)\nExactly once (2)",
      "label": "Quality of Service"
    },
    "rap": {
      "desc": "Default value 0. This option is used to specify whether the server retains the RETAIN mark when forwarding messages to the client, and this option does not affect the RETAIN mark in the retained message. Therefore, when the option Retain As Publish is set to 0, the client will directly distinguish whether this is a normal forwarded message or a retained message according to the RETAIN mark in the message, instead of judging whether this message is the first received after subscribing(the forwarded message may be sent before the retained message, which depends on the specific implementation of different brokers).",
      "label": "Retain As Publish"
    },
    "rh": {
      "desc": "Default value 0. This option is used to specify whether the server forwards the retained message to the client when establishing a subscription.\nRetain Handling is equal to 0, as long as the client successfully subscribes, the server will send the retained message.\nRetain Handling is equal to 1, if the client successfully subscribes and this subscription does not exist previously, the server sends the retained message. After all, sometimes the client re-initiate the subscription just to change the QoS, but it does not mean that it wants to receive the reserved messages again.\nRetain Handling is equal to 2, even if the client successfully subscribes, the server does not send the retained message.",
      "label": "Retain Handling"
    },
    "topic": {
      "desc": "Topic name, placeholders are supported. For example: client/${clientid}/username/${username}/host/${host}/port/${port}\nRequired field, and cannot be empty string",
      "label": "Topic"
    }
  },
  "emqx_bridge_api": {
    "desc_api1": {
      "desc": "List all created bridges",
      "label": "List All Bridges"
    },
    "desc_api2": {
      "desc": "Create a new bridge by type and name",
      "label": "Create Bridge"
    },
    "desc_api3": {
      "desc": "Get a bridge by Id",
      "label": "Get Bridge"
    },
    "desc_api4": {
      "desc": "Update a bridge by Id",
      "label": "Update Bridge"
    },
    "desc_api5": {
      "desc": "Delete a bridge by Id",
      "label": "Delete Bridge"
    },
    "desc_api6": {
      "desc": "Reset a bridge metrics by Id",
      "label": "Reset Bridge Metrics"
    },
    "desc_api7": {
      "desc": "Stop/Restart bridges on all nodes in the cluster.",
      "label": "Cluster Bridge Operate"
    },
    "desc_api8": {
      "desc": "Stop/Restart bridges on a specific node.",
      "label": "Node Bridge Operate"
    },
    "desc_api9": {
      "desc": "Test creating a new bridge by given ID </br>\nThe ID must be of format '{type}:{name}'",
      "label": "Test Bridge Creation"
    },
    "desc_bridge_metrics": {
      "desc": "Get bridge metrics by Id",
      "label": "Get Bridge Metrics"
    },
    "desc_enable_bridge": {
      "desc": "Enable or Disable bridges on all nodes in the cluster.",
      "label": "Cluster Bridge Enable"
    },
    "desc_param_path_enable": {
      "desc": "Whether to enable this bridge",
      "label": "Enable bridge"
    },
    "desc_param_path_id": {
      "desc": "The bridge Id. Must be of format {type}:{name}",
      "label": "Bridge ID"
    },
    "desc_param_path_node": {
      "desc": "The node name, e.g. emqx@127.0.0.1",
      "label": "The node name"
    },
    "desc_param_path_operation_cluster": {
      "desc": "Operations can be one of: stop, restart",
      "label": "Cluster Operation"
    },
    "desc_param_path_operation_on_node": {
      "desc": "Operations can be one of: stop, restart",
      "label": "Node Operation "
    }
  },
  "emqx_bridge_mqtt_schema": {
    "config": {
      "desc": "The config for MQTT Bridges.",
      "label": "Config"
    },
    "desc_name": {
      "desc": "Bridge name, used as a human-readable description of the bridge.",
      "label": "Bridge Name"
    },
    "desc_type": {
      "desc": "The bridge type.",
      "label": "Bridge Type"
    }
  },
  "emqx_bridge_schema": {
    "bridges_mqtt": {
      "desc": "MQTT bridges to/from another MQTT broker",
      "label": "MQTT Bridge"
    },
    "bridges_webhook": {
      "desc": "WebHook to an HTTP server.",
      "label": "WebHook"
    },
    "desc_bridges": {
      "desc": "Configuration for MQTT bridges.",
      "label": "MQTT Bridge Configuration"
    },
    "desc_enable": {
      "desc": "Enable or disable this bridge",
      "label": "Enable Or Disable Bridge"
    },
    "desc_metrics": {
      "desc": "Bridge metrics.",
      "label": "Bridge Metrics"
    },
    "desc_node_metrics": {
      "desc": "Node metrics.",
      "label": "Node Metrics"
    },
    "desc_node_name": {
      "desc": "The node name.",
      "label": "Node Name"
    },
    "desc_node_status": {
      "desc": "Node status.",
      "label": "Node Status"
    },
    "desc_status": {
      "desc": "The status of the bridge<br/>\n- <code>connecting</code>: the initial state before any health probes were made.<br/>\n- <code>connected</code>: when the bridge passes the health probes.<br/>\n- <code>disconnected</code>: when the bridge can not pass health probes.<br/>\n- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/>\n- <code>inconsistent</code>: When not all the nodes are at the same status.",
      "label": "Bridge Status"
    },
    "desc_status_reason": {
      "desc": "This is the reason given in case a bridge is failing to connect.",
      "label": "Failure reason"
    },
    "metric_dropped": {
      "desc": "Count of messages dropped.",
      "label": "Dropped"
    },
    "metric_dropped_other": {
      "desc": "Count of messages dropped due to other reasons.",
      "label": "Dropped Other"
    },
    "metric_dropped_queue_full": {
      "desc": "Count of messages dropped due to the queue is full.",
      "label": "Dropped Queue Full"
    },
    "metric_dropped_resource_not_found": {
      "desc": "Count of messages dropped due to the resource is not found.",
      "label": "Dropped Resource NotFound"
    },
    "metric_dropped_resource_stopped": {
      "desc": "Count of messages dropped due to the resource is stopped.",
      "label": "Dropped Resource Stopped"
    },
    "metric_inflight": {
      "desc": "Count of messages that were sent asynchronously but ACKs are not yet received.",
      "label": "Sent Inflight"
    },
    "metric_matched": {
      "desc": "Count of this bridge is matched and queried.",
      "label": "Matched"
    },
    "metric_queuing": {
      "desc": "Count of messages that are currently queuing.",
      "label": "Queued"
    },
    "metric_rate": {
      "desc": "The rate of matched, times/second",
      "label": "Rate"
    },
    "metric_rate_last5m": {
      "desc": "The average rate of matched in the last 5 minutes, times/second",
      "label": "Last 5 Minutes Rate"
    },
    "metric_rate_max": {
      "desc": "The max rate of matched, times/second",
      "label": "Max Rate Of Matched"
    },
    "metric_received": {
      "desc": "Count of messages that is received from the remote system.",
      "label": "Received"
    },
    "metric_retried": {
      "desc": "Times of retried.",
      "label": "Retried"
    },
    "metric_sent_failed": {
      "desc": "Count of messages that sent failed.",
      "label": "Sent Failed"
    },
    "metric_sent_success": {
      "desc": "Count of messages that sent successfully.",
      "label": "Sent Success"
    }
  },
  "emqx_bridge_webhook_schema": {
    "config_body": {
      "desc": "The body of the HTTP request.<br/>\nIf not provided, the body will be a JSON object of all the available fields.<br/>\nThere, 'all the available fields' means the context of a MQTT message when\nthis webhook is triggered by receiving a MQTT message (the `local_topic` is set),\nor the context of the event when this webhook is triggered by a rule (i.e. this\nwebhook is used as an action of a rule).<br/>\nTemplate with variables is allowed.",
      "label": "HTTP Body"
    },
    "config_direction": {
      "desc": "Deprecated, The direction of this bridge, MUST be 'egress'",
      "label": "Bridge Direction"
    },
    "config_enable": {
      "desc": "Enable or disable this bridge",
      "label": "Enable Or Disable Bridge"
    },
    "config_headers": {
      "desc": "The headers of the HTTP request.<br/>\nTemplate with variables is allowed.",
      "label": "HTTP Header"
    },
    "config_local_topic": {
      "desc": "The MQTT topic filter to be forwarded to the HTTP server. All MQTT 'PUBLISH' messages with the topic\nmatching the local_topic will be forwarded.<br/>\nNOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is\nconfigured, then both the data got from the rule and the MQTT messages that match local_topic\nwill be forwarded.",
      "label": "Local Topic"
    },
    "config_max_retries": {
      "desc": "HTTP request max retry times if failed.",
      "label": "HTTP Request Max Retries"
    },
    "config_method": {
      "desc": "The method of the HTTP request. All the available methods are: post, put, get, delete.<br/>\nTemplate with variables is allowed.",
      "label": "HTTP Method"
    },
    "config_request_timeout": {
      "desc": "HTTP request timeout.",
      "label": "HTTP Request Timeout"
    },
    "config_url": {
      "desc": "The URL of the HTTP Bridge.<br/>\nTemplate with variables is allowed in the path, but variables cannot be used in the scheme, host,\nor port part.<br/>\nFor example, <code> http://localhost:9901/${topic} </code> is allowed, but\n<code> http://${host}:9901/message </code> or <code> http://localhost:${port}/message </code>\nis not allowed.",
      "label": "HTTP Bridge"
    },
    "desc_config": {
      "desc": "Configuration for an HTTP bridge.",
      "label": "HTTP Bridge Configuration"
    },
    "desc_name": {
      "desc": "Bridge name, used as a human-readable description of the bridge.",
      "label": "Bridge Name"
    },
    "desc_type": {
      "desc": "The Bridge Type",
      "label": "Bridge Type"
    }
  },
  "emqx_coap_api": {
    "content_type": {
      "desc": "Payload type"
    },
    "message_id": {
      "desc": "Message ID"
    },
    "method": {
      "desc": "Request method type"
    },
    "payload": {
      "desc": "The content of the payload"
    },
    "response_code": {
      "desc": "Response code"
    },
    "send_coap_request": {
      "desc": "Send a CoAP request message to the client"
    },
    "timeout": {
      "desc": "Timespan for response"
    },
    "token": {
      "desc": "Message token, can be empty"
    }
  },
  "emqx_coap_schema": {
    "coap": {
      "desc": "The CoAP Gateway configuration.\nThis gateway is implemented based on RFC-7252 and https://core-wg.github.io/coap-pubsub/draft-ietf-core-pubsub.html"
    },
    "coap_connection_required": {
      "desc": "Enable or disable connection mode.\nConnection mode is a feature of non-standard protocols. When connection mode is enabled, it is necessary to maintain the creation, authentication and alive of connection resources"
    },
    "coap_heartbeat": {
      "desc": "The gateway server required minimum heartbeat interval.\nWhen connection mode is enabled, this parameter is used to set the minimum heartbeat interval for the connection to be alive"
    },
    "coap_notify_type": {
      "desc": "The Notification Message will be delivered to the CoAP client if a new message received on an observed topic.\nThe type of delivered coap message can be set to:<br/>\n  - non: Non-confirmable;<br/>\n  - con: Confirmable;<br/>\n  - qos: Mapping from QoS type of received message, QoS0 -> non, QoS1,2 -> con"
    },
    "coap_publish_qos": {
      "desc": "The Default QoS Level indicator for publish request.\nThis option specifies the QoS level for the CoAP Client when publishing a message to EMQX PUB/SUB system, if the publish request is not carried `qos` option. The indicator can be set to:<br/>\n  - qos0, qos1, qos2: Fixed default QoS level<br/>\n  - coap: Dynamic QoS level by the message type of publish request<br/>\n    * qos0: If the publish request is non-confirmable<br/>\n    * qos1: If the publish request is confirmable"
    },
    "coap_subscribe_qos": {
      "desc": "The Default QoS Level indicator for subscribe request.\nThis option specifies the QoS level for the CoAP Client when establishing a subscription membership, if the subscribe request is not carried `qos` option. The indicator can be set to:<br/>\n  - qos0, qos1, qos2: Fixed default QoS level<br/>\n  - coap: Dynamic QoS level by the message type of subscribe request<br/>\n    * qos0: If the subscribe request is non-confirmable<br/>\n    * qos1: If the subscribe request is confirmable"
    }
  },
  "emqx_conf_schema": {
    "common_handler_drop_mode_qlen": {
      "desc": "When the number of buffered log events is larger than this value, the new log events are dropped.\nWhen drop mode is activated or deactivated, a message is printed in the logs.",
      "label": "Queue Length before Entering Drop Mode"
    },
    "cluster_mcast_addr": {
      "desc": "Multicast IPv4 address.",
      "label": "Cluster Multicast Address"
    },
    "desc_cluster_dns": {
      "desc": "Service discovery via DNS SRV records.",
      "label": "Cluster DNS"
    },
    "cluster_dns_name": {
      "desc": "The domain name from which to discover peer EMQX nodes' IP addresses.\nApplicable when <code>cluster.discovery_strategy = dns</code>",
      "label": "Cluster Dns Name"
    },
    "rpc_keyfile": {
      "desc": "Path to the private key file for the <code>rpc.certfile</code>.<br/>\nNote: contents of this file are secret, so it's necessary to set permissions to 600.",
      "label": "RPC Keyfile"
    },
    "cluster_mcast_recbuf": {
      "desc": "Size of the kernel-level buffer for incoming datagrams.",
      "label": "Cluster Muticast Sendbuf"
    },
    "cluster_autoheal": {
      "desc": "If <code>true</code>, the node will try to heal network partitions automatically.",
      "label": "Cluster Auto Heal"
    },
    "log_overload_kill_enable": {
      "desc": "Enable log handler overload kill feature.",
      "label": "Log Handler Overload Kill"
    },
    "node_etc_dir": {
      "desc": "<code>etc</code> dir for the node",
      "label": "Etc Dir"
    },
    "cluster_proto_dist": {
      "desc": "The Erlang distribution protocol for the cluster.<br/>\n- inet_tcp: IPv4 TCP <br/>\n- inet_tls: IPv4 TLS, works together with <code>etc/ssl_dist.conf</code>",
      "label": "Cluster Protocol Distribution"
    },
    "log_burst_limit_enable": {
      "desc": "Enable log burst control feature.",
      "label": "Enable Burst"
    },
    "dist_buffer_size": {
      "desc": "Erlang's distribution buffer busy limit in kilobytes.",
      "label": "Erlang's dist buffer size(KB)"
    },
    "common_handler_max_depth": {
      "desc": "Maximum depth for Erlang term log formatting and Erlang process message queue inspection.",
      "label": "Max Depth"
    },
    "desc_log": {
      "desc": "EMQX logging supports multiple sinks for the log events.\nEach sink is represented by a _log handler_, which can be configured independently.",
      "label": "Log"
    },
    "common_handler_flush_qlen": {
      "desc": "If the number of buffered log events grows larger than this threshold, a flush (delete) operation takes place.\nTo flush events, the handler discards the buffered log messages without logging.",
      "label": "Flush Threshold"
    },
    "common_handler_chars_limit": {
      "desc": "Set the maximum length of a single log message. If this length is exceeded, the log message will be truncated.\nNOTE: Restrict char limiter if formatter is JSON , it will get a truncated incomplete JSON data, which is not recommended.",
      "label": "Single Log Max Length"
    },
    "cluster_k8s_namespace": {
      "desc": "Kubernetes namespace.",
      "label": "K8s Namespace"
    },
    "node_name": {
      "desc": "Unique name of the EMQX node. It must follow <code>%name%@FQDN</code> or\n<code>%name%@IPv4</code> format.",
      "label": "Node Name"
    },
    "rpc_port_discovery": {
      "desc": "<code>manual</code>: discover ports by <code>tcp_server_port</code>.<br/>\n<code>stateless</code>: discover ports in a stateless manner, using the following algorithm.\nIf node name is <code>emqxN@127.0.0.1</code>, where the N is an integer,\nthen the listening port will be 5370 + N.",
      "label": "RRC Port Discovery"
    },
    "log_overload_kill_restart_after": {
      "desc": "The handler restarts automatically after a delay in the event of termination, unless the value `infinity` is set, which blocks any subsequent restarts.",
      "label": "Handler Restart Timer"
    },
    "log_file_handler_max_size": {
      "desc": "This parameter controls log file rotation. The value `infinity` means the log file will grow indefinitely, otherwise the log file will be rotated once it reaches `max_size` in bytes.",
      "label": "Rotation Size"
    },
    "desc_log_file_handler": {
      "desc": "Log handler that prints log events to files.",
      "label": "Files Log Handler"
    },
    "rpc_socket_keepalive_count": {
      "desc": "How many times the keepalive probe message can fail to receive a reply\nuntil the RPC connection is considered lost.",
      "label": "RPC Socket Keepalive Count"
    },
    "cluster_etcd_server": {
      "desc": "List of endpoint URLs of the etcd cluster",
      "label": "Cluster Etcd Server"
    },
    "db_backend": {
      "desc": "Select the backend for the embedded database.<br/>\n<code>rlog</code> is the default backend,\nthat is suitable for very large clusters.<br/>\n<code>mnesia</code> is a backend that offers decent performance in small clusters.",
      "label": "DB Backend"
    },
    "desc_authorization": {
      "desc": "Settings that control client authorization.",
      "label": "Authorization"
    },
    "cluster_etcd_ssl": {
      "desc": "Options for the TLS connection to the etcd cluster.",
      "label": "Cluster Etcd SSL Option"
    },
    "rpc_insecure_fallback": {
      "desc": "Enable compatibility with old RPC authentication.",
      "label": "RPC insecure fallback"
    },
    "cluster_mcast_buffer": {
      "desc": "Size of the user-level buffer.",
      "label": "Cluster Muticast Buffer"
    },
    "rpc_authentication_timeout": {
      "desc": "Timeout for the remote node authentication.",
      "label": "RPC Authentication Timeout"
    },
    "cluster_call_retry_interval": {
      "desc": "Time interval to retry after a failed call.",
      "label": "Cluster Call Retry Interval"
    },
    "cluster_mcast_sndbuf": {
      "desc": "Size of the kernel-level buffer for outgoing datagrams.",
      "label": "Cluster Muticast Sendbuf"
    },
    "rpc_driver": {
      "desc": "Transport protocol used for inter-broker communication",
      "label": "RPC dirver"
    },
    "max_ets_tables": {
      "desc": "Max number of ETS tables",
      "label": "Max number of ETS tables"
    },
    "desc_db": {
      "desc": "Settings for the embedded database.",
      "label": "Database"
    },
    "desc_cluster_etcd": {
      "desc": "Service discovery using 'etcd' service.",
      "label": "Cluster Etcd"
    },
    "cluster_name": {
      "desc": "Human-friendly name of the EMQX cluster.",
      "label": "Cluster Name"
    },
    "log_rotation_enable": {
      "desc": "Enable log rotation feature.",
      "label": "Rotation Enable"
    },
    "cluster_call_cleanup_interval": {
      "desc": "Time interval to clear completed but stale transactions.\nEnsure that the number of completed transactions is less than the <code>max_history</code>.",
      "label": "Clean Up Interval"
    },
    "desc_cluster_static": {
      "desc": "Service discovery via static nodes.\nThe new node joins the cluster by connecting to one of the bootstrap nodes.",
      "label": "Cluster Static"
    },
    "db_default_shard_transport": {
      "desc": "Defines the default transport for pushing transaction logs.<br/>\nThis may be overridden on a per-shard basis in <code>db.shard_transports</code>.\n<code>gen_rpc</code> uses the <code>gen_rpc</code> library,\n<code>distr</code> uses the Erlang distribution.",
      "label": "Default Shard Transport"
    },
    "cluster_static_seeds": {
      "desc": "List EMQX node names in the static cluster. See <code>node.name</code>.",
      "label": "Cluster Static Seeds"
    },
    "log_overload_kill_qlen": {
      "desc": "Maximum allowed queue length.",
      "label": "Max Queue Length"
    },
    "node_backtrace_depth": {
      "desc": "Maximum depth of the call stack printed in error messages and\n<code>process_info</code>.",
      "label": "BackTrace Depth"
    },
    "desc_log_burst_limit": {
      "desc": "Large bursts of log events produced in a short time can potentially cause problems, such as:\n - Log files grow very large\n - Log files are rotated too quickly, and useful information gets overwritten\n - Overall performance impact on the system\n\nLog burst limit feature can temporarily disable logging to avoid these issues.",
      "label": "Log Burst Limit"
    },
    "common_handler_enable": {
      "desc": "Enable this log handler.",
      "label": "Enable Log Handler"
    },
    "cluster_k8s_service_name": {
      "desc": "EMQX broker service name.",
      "label": "K8s Service Name"
    },
    "log_rotation_count": {
      "desc": "Maximum number of log files.",
      "label": "Max Log Files Number"
    },
    "node_cookie": {
      "desc": "Secret cookie is a random string that should be the same on all nodes in\nthe given EMQX cluster, but unique per EMQX cluster. It is used to prevent EMQX nodes that\nbelong to different clusters from accidentally connecting to each other.",
      "label": "Node Cookie"
    },
    "db_role": {
      "desc": "Select a node role.<br/>\n<code>core</code> nodes provide durability of the data, and take care of writes.\nIt is recommended to place core nodes in different racks or different availability zones.<br/>\n<code>replicant</code> nodes are ephemeral worker nodes. Removing them from the cluster\ndoesn't affect database redundancy<br/>\nIt is recommended to have more replicant nodes than core nodes.<br/>\nNote: this parameter only takes effect when the <code>backend</code> is set\nto <code>rlog</code>.",
      "label": "DB Role"
    },
    "rpc_tcp_server_port": {
      "desc": "Listening port used by RPC local service.<br/>\nNote that this config only takes effect when rpc.port_discovery is set to manual.",
      "label": "RPC TCP Server Port"
    },
    "desc_console_handler": {
      "desc": "Log handler that prints log events to the EMQX console.",
      "label": "Console Handler"
    },
    "node_applications": {
      "desc": "List of Erlang applications that shall be rebooted when the EMQX broker joins the cluster.",
      "label": "Application"
    },
    "log_burst_limit_max_count": {
      "desc": "Maximum number of log events to handle within a `window_time` interval. After the limit is reached, successive events are dropped until the end of the `window_time`.",
      "label": "Events Number"
    },
    "rpc_tcp_client_num": {
      "desc": "Set the maximum number of RPC communication channels initiated by this node to each remote node.",
      "label": "RPC TCP Client Num"
    },
    "cluster_k8s_address_type": {
      "desc": "Address type used for connecting to the discovered nodes.\nSetting <code>cluster.k8s.address_type</code> to <code>ip</code> will\nmake EMQX to discover IP addresses of peer nodes from Kubernetes API.",
      "label": "K8s Address Type"
    },
    "rpc_socket_sndbuf": {
      "desc": "TCP tuning parameters. TCP sending buffer size.",
      "label": "RPC Socket Sndbuf"
    },
    "cluster_mcast_ttl": {
      "desc": "Time-to-live (TTL) for the outgoing UDP datagrams.",
      "label": "Cluster Multicast TTL"
    },
    "db_core_nodes": {
      "desc": "List of core nodes that the replicant will connect to.<br/>\nNote: this parameter only takes effect when the <code>backend</code> is set\nto <code>rlog</code> and the <code>role</code> is set to <code>replicant</code>.<br/>\nThis value needs to be defined for manual or static cluster discovery mechanisms.<br/>\nIf an automatic cluster discovery mechanism is being used (such as <code>etcd</code>),\nthere is no need to set this value.",
      "label": "Db Core Node"
    },
    "log_file_handler_file": {
      "desc": "Name the log file.",
      "label": "Log File Name"
    },
    "node_dist_net_ticktime": {
      "desc": "This is the approximate time an EMQX node may be unresponsive until it is considered down and thereby disconnected.",
      "label": "Dist Net TickTime"
    },
    "desc_cluster_k8s": {
      "desc": "Service discovery via Kubernetes API server.",
      "label": "Cluster Kubernetes"
    },
    "desc_cluster_mcast": {
      "desc": "Service discovery via UDP multicast.",
      "label": "Cluster Multicast"
    },
    "rpc_cacertfile": {
      "desc": "Path to certification authority TLS certificate file used to validate <code>rpc.certfile</code>.<br/>\nNote: certificates of all nodes in the cluster must be signed by the same CA.",
      "label": "RPC Cacertfile"
    },
    "desc_node": {
      "desc": "Node name, cookie, config & data directories and the Erlang virtual machine (BEAM) boot parameters.",
      "label": "Node"
    },
    "cluster_k8s_apiserver": {
      "desc": "Kubernetes API endpoint URL.",
      "label": "Cluster k8s ApiServer"
    },
    "common_handler_supervisor_reports": {
      "desc": "Type of supervisor reports that are logged. Defaults to <code>error</code><br/>\n  - <code>error</code>: only log errors in the Erlang processes<br/>.\n  - <code>progress</code>: log process startup.",
      "label": "Report Type"
    },
    "node_data_dir": {
      "desc": "Path to the persistent data directory.<br/>\nPossible auto-created subdirectories are:<br/>\n- `mnesia/<node_name>`: EMQX's built-in database directory.<br/>\nFor example, `mnesia/emqx@127.0.0.1`.<br/>\nThere should be only one such subdirectory.<br/>\nMeaning, in case the node is to be renamed (to e.g. `emqx@10.0.1.1`),<br/>\nthe old dir should be deleted first.<br/>\n- `configs`: Generated configs at boot time, and cluster/local override configs.<br/>\n- `patches`: Hot-patch beam files are to be placed here.<br/>\n- `trace`: Trace log files.<br/>\n\n**NOTE**: One data dir cannot be shared by two or more EMQX nodes.",
      "label": "Node Data Dir"
    },
    "cluster_k8s_suffix": {
      "desc": "Node name suffix.<br/>\nNote: this parameter is only relevant when <code>address_type</code> is <code>dns</code>\nor <code>hostname</code>.",
      "label": "K8s Suffix"
    },
    "db_rpc_module": {
      "desc": "Protocol used for pushing transaction logs to the replicant nodes.",
      "label": "RPC Module"
    },
    "cluster_etcd_prefix": {
      "desc": "Key prefix used for EMQX service discovery.",
      "label": "Cluster Etcd Prefix"
    },
    "cluster_mcast_iface": {
      "desc": "Local IP address the node discovery service needs to bind to.",
      "label": "Cluster Multicast Interface"
    },
    "log_burst_limit_window_time": {
      "desc": "See <code>max_count</code>.",
      "label": "Window Time"
    },
    "cluster_dns_record_type": {
      "desc": "DNS record type.",
      "label": "DNS Record Type"
    },
    "cluster_autoclean": {
      "desc": "Remove disconnected nodes from the cluster after this interval.",
      "label": "Cluster Auto Clean"
    },
    "process_limit": {
      "desc": "Maximum number of simultaneously existing processes for this Erlang system.\nThe actual maximum chosen may be much larger than the Number passed.\nFor more information, see: https://www.erlang.org/doc/man/erl.html",
      "label": "Erlang Process Limit"
    },
    "max_ports": {
      "desc": "Maximum number of simultaneously existing ports for this Erlang system.\nThe actual maximum chosen may be much larger than the Number passed.\nFor more information, see: https://www.erlang.org/doc/man/erl.html",
      "label": "Erlang Port Limit"
    },
    "desc_log_rotation": {
      "desc": "By default, the logs are stored in `./log` directory (for installation from zip file) or in `/var/log/emqx` (for binary installation).<br/>\nThis section of the configuration controls the number of files kept for each log handler.",
      "label": "Log Rotation"
    },
    "desc_log_overload_kill": {
      "desc": "Log overload kill features an overload protection that activates when the log handlers use too much memory or have too many buffered log messages.<br/>\nWhen the overload is detected, the log handler is terminated and restarted after a cooldown period.",
      "label": "Log Overload Kill"
    },
    "authorization": {
      "desc": "Authorization a.k.a. ACL.<br/>\nIn EMQX, MQTT client access control is extremely flexible.<br/>\nAn out-of-the-box set of authorization data sources are supported.\nFor example,<br/>\n'file' source is to support concise and yet generic ACL rules in a file;<br/>\n'built_in_database' source can be used to store per-client customizable rule sets,\nnatively in the EMQX node;<br/>\n'http' source to make EMQX call an external HTTP API to make the decision;<br/>\n'PostgreSQL' etc. to look up clients or rules from external databases",
      "label": "Authorization"
    },
    "rpc_socket_keepalive_idle": {
      "desc": "How long the connections between the brokers should remain open after the last message is sent.",
      "label": "RPC Socket Keepalive Idle"
    },
    "desc_cluster_call": {
      "desc": "Options for the 'cluster call' feature that allows to execute a callback on all nodes in the cluster.",
      "label": "Cluster Call"
    },
    "cluster_mcast_ports": {
      "desc": "List of UDP ports used for service discovery.<br/>\nNote: probe messages are broadcast to all the specified ports.",
      "label": "Cluster Multicast Ports"
    },
    "log_overload_kill_mem_size": {
      "desc": "Maximum memory size that the log handler process is allowed to use.",
      "label": "Log Handler Max Memory Size"
    },
    "rpc_connect_timeout": {
      "desc": "Timeout for establishing an RPC connection.",
      "label": "RPC Connect Timeout"
    },
    "cluster_etcd_node_ttl": {
      "desc": "Expiration time of the etcd key associated with the node.\nIt is refreshed automatically, as long as the node is alive.",
      "label": "Cluster Etcd Node TTL"
    },
    "rpc_call_receive_timeout": {
      "desc": "Timeout for the reply to a synchronous RPC.",
      "label": "RPC Call Receive Timeout"
    },
    "rpc_socket_recbuf": {
      "desc": "TCP tuning parameters. TCP receiving buffer size.",
      "label": "RPC Socket Recbuf"
    },
    "db_tlog_push_mode": {
      "desc": "In sync mode the core node waits for an ack from the replicant nodes before sending the next\ntransaction log entry.",
      "label": "Tlog Push Mode"
    },
    "node_crash_dump_bytes": {
      "desc": "This variable sets the maximum size of a crash dump file in bytes.\nThe crash dump will be truncated if this limit is exceeded.\nIf setting it to 0, the runtime system does not even attempt to write a crash dump file.",
      "label": "Crash Dump Bytes"
    },
    "rpc_certfile": {
      "desc": "Path to TLS certificate file used to validate identity of the cluster nodes.\nNote that this config only takes effect when <code>rpc.driver</code> is set to <code>ssl</code>.",
      "label": "RPC Certfile"
    },
    "node_crash_dump_seconds": {
      "desc": "This variable gives the number of seconds that the emulator is allowed to spend writing a crash dump. When the given number of seconds have elapsed, the emulator is terminated.<br/>\n- If setting to 0 seconds, the runtime system does not even attempt to write the crash dump file. It only terminates.<br/>\n- If setting to a positive value S, wait for S seconds to complete the crash dump file and then terminates the runtime system with a SIGALRM signal.<br/>\n- A negative value causes the termination of the runtime system to wait indefinitely until the crash dump file has been completely written.",
      "label": "Crash Dump Seconds"
    },
    "log_file_handlers": {
      "desc": "File-based log handlers.",
      "label": "File Handler"
    },
    "node_global_gc_interval": {
      "desc": "Periodic garbage collection interval. Set to <code>disabled</code> to have it disabled.",
      "label": "Global GC Interval"
    },
    "common_handler_time_offset": {
      "desc": "The time offset to be used when formatting the timestamp.\nCan be one of:\n  - <code>system</code>: the time offset used by the local system\n  - <code>utc</code>: the UTC time offset\n  - <code>+-[hh]:[mm]</code>: user specified time offset, such as \"-02:00\" or \"+00:00\"\nDefaults to: <code>system</code>.",
      "label": "Time Offset"
    },
    "rpc_mode": {
      "desc": "In <code>sync</code> mode the sending side waits for the ack from the receiving side.",
      "label": "RPC Mode"
    },
    "node_crash_dump_file": {
      "desc": "Location of the crash dump file.",
      "label": "Crash Dump File"
    },
    "cluster_mcast_loop": {
      "desc": "If <code>true</code>, loop UDP datagrams back to the local socket.",
      "label": "Cluster Multicast Loop"
    },
    "rpc_socket_keepalive_interval": {
      "desc": "The interval between keepalive messages.",
      "label": "RPC Socket Keepalive Interval"
    },
    "common_handler_level": {
      "desc": "The log level for the current log handler.\nDefaults to warning.",
      "label": "Log Level"
    },
    "desc_rpc": {
      "desc": "EMQX uses a library called <code>gen_rpc</code> for inter-broker communication.<br/>\nMost of the time the default config should work,\nbut in case you need to do performance fine-tuning or experiment a bit,\nthis is where to look.",
      "label": "RPC"
    },
    "rpc_ssl_server_port": {
      "desc": "Listening port used by RPC local service.<br/>\nNote that this config only takes effect when rpc.port_discovery is set to manual\nand <code>driver</code> is set to <code>ssl</code>.",
      "label": "RPC SSL Server Port"
    },
    "desc_cluster": {
      "desc": "EMQX nodes can form a cluster to scale up the total capacity.<br/>\n      Here holds the configs to instruct how individual nodes can discover each other.",
      "label": "Cluster"
    },
    "common_handler_sync_mode_qlen": {
      "desc": "As long as the number of buffered log events is lower than this value,\nall log events are handled asynchronously. This means that the client process sending the log event,\nby calling a log function in the Logger API, does not wait for a response from the handler\nbut continues executing immediately after the event is sent.\nIt is not affected by the time it takes the handler to print the event to the log device.\nIf the message queue grows larger than this value,\nthe handler starts handling log events synchronously instead,\nmeaning that the client process sending the event must wait for a response.\nWhen the handler reduces the message queue to a level below the sync_mode_qlen threshold,\nasynchronous operation is resumed.",
      "label": "Queue Length before Entering Sync Mode"
    },
    "common_handler_formatter": {
      "desc": "Choose log formatter. <code>text</code> for free text, and <code>json</code> for structured logging.",
      "label": "Log Formatter"
    },
    "rpc_async_batch_size": {
      "desc": "The maximum number of batch messages sent in asynchronous mode.\n      Note that this configuration does not work in synchronous mode.",
      "label": "Async Batch Size"
    },
    "cluster_call_max_history": {
      "desc": "Retain the maximum number of completed transactions (for queries).",
      "label": "Cluster Call Max History"
    },
    "cluster_discovery_strategy": {
      "desc": "Service discovery method for the cluster nodes. Possible values are:\n- manual: Use <code>emqx ctl cluster</code> command to manage cluster.<br/>\n- static: Configure static nodes list by setting <code>seeds</code> in config file.<br/>\n- dns: Use DNS A record to discover peer nodes.<br/>\n- etcd: Use etcd to discover peer nodes.<br/>\n- k8s: Use Kubernetes API to discover peer pods.",
      "label": "Cluster Discovery Strategy"
    },
    "rpc_send_timeout": {
      "desc": "Timeout for sending the RPC request.",
      "label": "RPC Send Timeout"
    },
    "common_handler_single_line": {
      "desc": "Print logs in a single line if set to true. Otherwise, log messages may span multiple lines.",
      "label": "Single Line Mode"
    },
    "rpc_socket_buffer": {
      "desc": "TCP tuning parameters. Socket buffer size in user mode.",
      "label": "RPC Socket Buffer"
    },
    "db_shard_transports": {
      "desc": "Allows to tune the transport method used for transaction log replication, on a per-shard basis.<br/>\n<code>gen_rpc</code> uses the <code>gen_rpc</code> library,\n<code>distr</code> uses the Erlang distribution.<br/>If not specified,\nthe default is to use the value set in <code>db.default_shard_transport</code>.",
      "label": "Shard Transports"
    }
  },
  "emqx_dashboard_api": {
    "change_pwd_api": {
      "desc": "Change dashboard user password"
    },
    "create_user_api": {
      "desc": "Create dashboard user"
    },
    "create_user_api_success": {
      "desc": "Create dashboard user success"
    },
    "delete_user_api": {
      "desc": "Delete dashboard user"
    },
    "license": {
      "desc": "EMQX License. opensource or enterprise"
    },
    "list_users_api": {
      "desc": "Dashboard list users"
    },
    "login_api": {
      "desc": "Get Dashboard Auth Token."
    },
    "login_failed401": {
      "desc": "Login failed. Bad username or password"
    },
    "login_failed_response400": {
      "desc": "Login failed. Bad username or password"
    },
    "login_success": {
      "desc": "Dashboard Auth Success"
    },
    "logout_api": {
      "desc": "Dashboard user logout"
    },
    "new_pwd": {
      "desc": "New password"
    },
    "old_pwd": {
      "desc": "Old password"
    },
    "password": {
      "desc": "Dashboard Password"
    },
    "token": {
      "desc": "Dashboard Auth Token"
    },
    "update_user_api": {
      "desc": "Update dashboard user description"
    },
    "update_user_api200": {
      "desc": "Update dashboard user success"
    },
    "user_description": {
      "desc": "Dashboard User Description"
    },
    "username": {
      "desc": "Dashboard Username"
    },
    "users_api404": {
      "desc": "Dashboard user not found"
    },
    "version": {
      "desc": "EMQX Version"
    }
  },
  "emqx_dashboard_schema": {
    "backlog": {
      "desc": "Defines the maximum length that the queue of pending connections can grow to.",
      "label": "Backlog"
    },
    "bind": {
      "desc": "Port without IP(18083) or port with specified IP(127.0.0.1:18083).",
      "label": "Bind"
    },
    "bootstrap_users_file": {
      "desc": "Deprecated, use api_key.bootstrap_file.",
      "label": "Deprecated"
    },
    "cors": {
      "desc": "Support Cross-Origin Resource Sharing (CORS).\nAllows a server to indicate any origins (domain, scheme, or port) other than\nits own from which a browser should permit loading resources.",
      "label": "CORS"
    },
    "default_password": {
      "desc": "The initial default password for dashboard 'admin' user.\nFor safety, it should be changed as soon as possible.\nThis value is not valid when you log in to Dashboard for the first time via the web\nand change to a complex password as prompted.",
      "label": "Default password"
    },
    "default_username": {
      "desc": "The default username of the automatically created dashboard user.",
      "label": "Default username"
    },
    "desc_dashboard": {
      "desc": "Configuration for EMQX dashboard.",
      "label": "Dashboard"
    },
    "desc_http": {
      "desc": "Configuration for the dashboard listener (plaintext).",
      "label": "HTTP"
    },
    "desc_https": {
      "desc": "Configuration for the dashboard listener (TLS).",
      "label": "HTTPS"
    },
    "desc_listeners": {
      "desc": "Configuration for the dashboard listener.",
      "label": "Listeners"
    },
    "i18n_lang": {
      "desc": "Internationalization language support.",
      "label": "I18n language"
    },
    "inet6": {
      "desc": "Enable IPv6 support, default is false, which means IPv4 only.",
      "label": "IPv6"
    },
    "ipv6_v6only": {
      "desc": "Disable IPv4-to-IPv6 mapping for the listener.\nThe configuration is only valid when the inet6 is true.",
      "label": "IPv6 only"
    },
    "listener_enable": {
      "desc": "Ignore or enable this listener",
      "label": "Enable"
    },
    "listeners": {
      "desc": "HTTP(s) listeners are identified by their protocol type and are\nused to serve dashboard UI and restful HTTP API.\nListeners must have a unique combination of port number and IP address.\nFor example, an HTTP listener can listen on all configured IP addresses\non a given port for a machine by specifying the IP address 0.0.0.0.\nAlternatively, the HTTP listener can specify a unique IP address for each listener,\nbut use the same port.",
      "label": "Listeners"
    },
    "max_connections": {
      "desc": "Maximum number of simultaneous connections.",
      "label": "Maximum connections"
    },
    "num_acceptors": {
      "desc": "Socket acceptor pool size for TCP protocols. Default is the number of schedulers online",
      "label": "Number of acceptors"
    },
    "proxy_header": {
      "desc": "Enable support for `HAProxy` header. Be aware once enabled regular HTTP requests can't be handled anymore.",
      "label": "Enable support for HAProxy header"
    },
    "sample_interval": {
      "desc": "How often to update metrics displayed in the dashboard.\nNote: `sample_interval` should be a divisor of 60, default is 10s."
    },
    "send_timeout": {
      "desc": "Send timeout for the socket.",
      "label": "Send timeout"
    },
    "token_expired_time": {
      "desc": "JWT token expiration time. Default is 60 minutes",
      "label": "Token expired time"
    }
  },
  "emqx_delayed_api": {
    "bad_msgid_format": {
      "desc": "Bad Message ID format"
    },
    "count": {
      "desc": "Count of delayed messages"
    },
    "delayed_interval": {
      "desc": "Delayed interval(second)"
    },
    "delayed_remaining": {
      "desc": "Delayed remaining(second)"
    },
    "delete_api": {
      "desc": "Delete delayed message"
    },
    "expected_at": {
      "desc": "Expect publish time, in RFC 3339 format"
    },
    "from_clientid": {
      "desc": "From ClientID"
    },
    "from_username": {
      "desc": "From Username"
    },
    "get_message_api": {
      "desc": "View delayed message"
    },
    "illegality_limit": {
      "desc": "Max limit illegality"
    },
    "list_api": {
      "desc": "List delayed messages"
    },
    "msgid": {
      "desc": "Delayed Message ID"
    },
    "msgid_not_found": {
      "desc": "Message ID not found"
    },
    "node": {
      "desc": "The node where message from"
    },
    "payload": {
      "desc": "Payload, base64 encoded. Payload will be set to 'PAYLOAD_TO_LARGE' if its length is larger than 2048 bytes"
    },
    "publish_at": {
      "desc": "Clinet publish message time, in RFC 3339 format"
    },
    "qos": {
      "desc": "QoS"
    },
    "topic": {
      "desc": "Topic"
    },
    "update_api": {
      "desc": "Enable or disable delayed, set max delayed messages"
    },
    "update_success": {
      "desc": "Enable or disable delayed successfully"
    },
    "view_limit": {
      "desc": "Page limit"
    },
    "view_page": {
      "desc": "View page"
    },
    "view_status_api": {
      "desc": "Get delayed status"
    }
  },
  "emqx_ee_bridge_cassa": {
    "config_enable": {
      "desc": "Enable or disable this bridge",
      "label": "Enable Or Disable Bridge"
    },
    "cql_template": {
      "desc": "CQL Template",
      "label": "CQL Template"
    },
    "desc_config": {
      "desc": "Configuration for a Cassandra bridge.",
      "label": "Cassandra Bridge Configuration"
    },
    "desc_name": {
      "desc": "Bridge name.",
      "label": "Bridge Name"
    },
    "desc_type": {
      "desc": "The Bridge Type",
      "label": "Bridge Type"
    },
    "local_topic": {
      "desc": "The MQTT topic filter to be forwarded to Cassandra. All MQTT 'PUBLISH' messages with the topic\nmatching the local_topic will be forwarded.</br>\nNOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is\nconfigured, then both the data got from the rule and the MQTT messages that match local_topic\nwill be forwarded.",
      "label": "Local Topic"
    }
  },
  "emqx_ee_bridge_clickhouse": {
    "batch_value_separator": {
      "desc": "The default value ',' works for the VALUES format. You can also use other separator if other format is specified. See [INSERT INTO Statement](https://clickhouse.com/docs/en/sql-reference/statements/insert-into).",
      "label": "Batch Value Separator"
    },
    "config_enable": {
      "desc": "Enable or disable this bridge",
      "label": "Enable Or Disable Bridge"
    },
    "desc_config": {
      "desc": "Configuration for a Clickhouse bridge.",
      "label": "Clickhouse Bridge Configuration"
    },
    "desc_name": {
      "desc": "Bridge name.",
      "label": "Bridge Name"
    },
    "desc_type": {
      "desc": "The Bridge Type",
      "label": "Bridge Type"
    },
    "local_topic": {
      "desc": "The MQTT topic filter to be forwarded to Clickhouse. All MQTT 'PUBLISH' messages with the topic\nmatching the local_topic will be forwarded.</br>\nNOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is\nconfigured, then both the data got from the rule and the MQTT messages that match local_topic\nwill be forwarded.",
      "label": "Local Topic"
    },
    "sql_template": {
      "desc": "The template string can contain ${field} placeholders for message metadata and payload field. Make sure that the inserted values are formatted and escaped correctly. [Prepared Statement](https://docs.emqx.com/en/enterprise/v5.0/data-integration/data-bridges.html#Prepared-Statement) is not supported.",
      "label": "SQL Template"
    }
  },
  "emqx_ee_bridge_dynamo": {
    "config_enable": {
      "desc": "Enable or disable this bridge",
      "label": "Enable Or Disable Bridge"
    },
    "desc_config": {
      "desc": "Configuration for an DynamoDB bridge.",
      "label": "DynamoDB Bridge Configuration"
    },
    "desc_name": {
      "desc": "Bridge name.",
      "label": "Bridge Name"
    },
    "desc_type": {
      "desc": "The Bridge Type",
      "label": "Bridge Type"
    },
    "local_topic": {
      "desc": "The MQTT topic filter to be forwarded to DynamoDB. All MQTT `PUBLISH` messages with the topic\nmatching the `local_topic` will be forwarded.</br>\nNOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also `local_topic` is\nconfigured, then both the data got from the rule and the MQTT messages that match `local_topic`\nwill be forwarded.",
      "label": "Local Topic"
    },
    "template": {
      "desc": "Template, the default value is empty. When this value is empty the whole message will be stored in the database",
      "label": "Template"
    }
  },
  "emqx_ee_bridge_gcp_pubsub": {
    "connect_timeout": {
      "desc": "The timeout when connecting to the HTTP server.",
      "label": "Connect Timeout"
    },
    "desc_config": {
      "desc": "Configuration for a GCP PubSub bridge.",
      "label": "GCP PubSub Bridge Configuration"
    },
    "desc_name": {
      "desc": "Bridge name, used as a human-readable description of the bridge.",
      "label": "Bridge Name"
    },
    "desc_type": {
      "desc": "The Bridge Type",
      "label": "Bridge Type"
    },
    "local_topic": {
      "desc": "The MQTT topic filter to be forwarded to GCP PubSub. All MQTT 'PUBLISH' messages with the topic\nmatching `local_topic` will be forwarded.</br>\nNOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is\nconfigured, then both the data got from the rule and the MQTT messages that match local_topic\nwill be forwarded.",
      "label": "Local Topic"
    },
    "max_retries": {
      "desc": "Max retry times if an error occurs when sending a request.",
      "label": "Max Retries"
    },
    "payload_template": {
      "desc": "The template for formatting the outgoing messages.  If undefined, will send all the available context in JSON format.",
      "label": "Payload template"
    },
    "pipelining": {
      "desc": "A positive integer. Whether to send HTTP requests continuously, when set to 1, it means that after each HTTP request is sent, you need to wait for the server to return and then continue to send the next request.",
      "label": "HTTP Pipelineing"
    },
    "pool_size": {
      "desc": "The pool size.",
      "label": "Pool Size"
    },
    "pubsub_topic": {
      "desc": "The GCP PubSub topic to publish messages to.",
      "label": "GCP PubSub Topic"
    },
    "request_timeout": {
      "desc": "Deprecated: Configure the request timeout in the buffer settings.",
      "label": "Request Timeout"
    },
    "service_account_json": {
      "desc": "JSON containing the GCP Service Account credentials to be used with PubSub.\nWhen a GCP Service Account is created (as described in https://developers.google.com/identity/protocols/oauth2/service-account#creatinganaccount), you have the option of downloading the credentials in JSON form.  That's the file needed.",
      "label": "GCP Service Account Credentials"
    }
  },
  "emqx_ee_bridge_hstreamdb": {
    "config_direction": {
      "desc": "The direction of this bridge, MUST be 'egress'",
      "label": "Bridge Direction"
    },
    "config_enable": {
      "desc": "Enable or disable this bridge",
      "label": "Enable Or Disable Bridge"
    },
    "desc_config": {
      "desc": "Configuration for an HStreamDB bridge.",
      "label": "HStreamDB Bridge Configuration"
    },
    "desc_connector": {
      "desc": "Generic configuration for the connector.",
      "label": "Connector Generic Configuration"
    },
    "desc_name": {
      "desc": "Bridge name, used as a human-readable description of the bridge.",
      "label": "Bridge Name"
    },
    "desc_type": {
      "desc": "The Bridge Type",
      "label": "Bridge Type"
    },
    "local_topic": {
      "desc": "The MQTT topic filter to be forwarded to the HStreamDB. All MQTT 'PUBLISH' messages with the topic\nmatching the local_topic will be forwarded.</br>\nNOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is\nconfigured, then both the data got from the rule and the MQTT messages that match local_topic\nwill be forwarded.",
      "label": "Local Topic"
    },
    "payload": {
      "desc": "The payload to be forwarded to the HStreamDB. Placeholders supported.",
      "label": "Payload"
    }
  },
  "emqx_ee_bridge_influxdb": {
    "config_enable": {
      "desc": "Enable or disable this bridge.",
      "label": "Enable Or Disable Bridge"
    },
    "desc_config": {
      "desc": "Configuration for an InfluxDB bridge.",
      "label": "InfluxDB Bridge Configuration"
    },
    "desc_name": {
      "desc": "Bridge name.",
      "label": "Bridge Name"
    },
    "desc_type": {
      "desc": "The Bridge Type.",
      "label": "Bridge Type"
    },
    "local_topic": {
      "desc": "The MQTT topic filter to be forwarded to the InfluxDB. All MQTT 'PUBLISH' messages with the topic\nmatching the local_topic will be forwarded.</br>\nNOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is\nconfigured, then both the data got from the rule and the MQTT messages that match local_topic\nwill be forwarded.",
      "label": "Local Topic"
    },
    "write_syntax": {
      "desc": "Conf of InfluxDB line protocol to write data points. It is a text-based format that provides the measurement, tag set, field set, and timestamp of a data point, and placeholder supported.\nSee also [InfluxDB 2.3 Line Protocol](https://docs.influxdata.com/influxdb/v2.3/reference/syntax/line-protocol/) and\n[InfluxDB 1.8 Line Protocol](https://docs.influxdata.com/influxdb/v1.8/write_protocols/line_protocol_tutorial/) </br>\nTLDR:</br>\n```\n<measurement>[,<tag_key>=<tag_value>[,<tag_key>=<tag_value>]] <field_key>=<field_value>[,<field_key>=<field_value>] [<timestamp>]\n```\nPlease note that a placeholder for an integer value must be annotated with a suffix `i`. For example `${payload.int_value}i`.",
      "label": "Write Syntax"
    }
  },
  "emqx_ee_bridge_kafka": {
    "connect_timeout": {
      "desc": "Maximum wait time for TCP connection establishment (including authentication time if enabled).",
      "label": "Connect Timeout"
    },
    "producer_opts": {
      "desc": "Local MQTT data source and Kafka bridge configs.",
      "label": "MQTT to Kafka"
    },
    "min_metadata_refresh_interval": {
      "desc": "Minimum time interval the client has to wait before refreshing Kafka broker and topic metadata. Setting too small value may add extra load on Kafka.",
      "label": "Min Metadata Refresh Interval"
    },
    "kafka_producer": {
      "desc": "Kafka Producer configuration.",
      "label": "Kafka Producer"
    },
    "producer_buffer": {
      "desc": "Configure producer message buffer.\n\nTell Kafka producer how to buffer messages when EMQX has more messages to send than Kafka can keep up, or when Kafka is down.",
      "label": "Message Buffer"
    },
    "socket_send_buffer": {
      "desc": "Fine tune the socket send buffer. The default value is tuned for high throughput.",
      "label": "Socket Send Buffer Size"
    },
    "desc_name": {
      "desc": "Bridge name, used as a human-readable description of the bridge.",
      "label": "Bridge Name"
    },
    "consumer_offset_commit_interval_seconds": {
      "desc": "Defines the time interval between two offset commit requests sent for each consumer group.",
      "label": "Offset Commit Interval"
    },
    "consumer_max_batch_bytes": {
      "desc": "Set how many bytes to pull from Kafka in each fetch request. Please note that if the configured value is smaller than the message size in Kafka, it may negatively impact the fetch performance.",
      "label": "Fetch Bytes"
    },
    "socket_receive_buffer": {
      "desc": "Fine tune the socket receive buffer. The default value is tuned for high throughput.",
      "label": "Socket Receive Buffer Size"
    },
    "consumer_topic_mapping": {
      "desc": "Defines the mapping between Kafka topics and MQTT topics. Must contain at least one item.",
      "label": "Topic Mapping"
    },
    "producer_kafka_opts": {
      "desc": "Kafka producer configs.",
      "label": "Kafka Producer"
    },
    "kafka_topic": {
      "desc": "Kafka topic name",
      "label": "Kafka Topic Name"
    },
    "consumer_kafka_topic": {
      "desc": "Kafka topic to consume from.",
      "label": "Kafka Topic"
    },
    "auth_username_password": {
      "desc": "Username/password based authentication.",
      "label": "Username/password Auth"
    },
    "auth_sasl_password": {
      "desc": "SASL authentication password.",
      "label": "Password"
    },
    "kafka_message_timestamp": {
      "desc": "Which timestamp to use. The timestamp is expected to be a millisecond precision Unix epoch which can be in string format, e.g. <code>1661326462115</code> or <code>'1661326462115'</code>. When the desired data field for this template is not found, or if the found data is not a valid integer, the current system timestamp will be used.",
      "label": "Message Timestamp"
    },
    "buffer_mode": {
      "desc": "Message buffer mode.\n\n<code>memory</code>: Buffer all messages in memory. The messages will be lost in case of EMQX node restart\n<code>disk</code>: Buffer all messages on disk. The messages on disk are able to survive EMQX node restart.\n<code>hybrid</code>: Buffer message in memory first, when up to certain limit (see <code>segment_bytes</code> config for more information), then start offloading messages to disk, Like <code>memory</code> mode, the messages will be lost in case of EMQX node restart.",
      "label": "Buffer Mode"
    },
    "consumer_mqtt_qos": {
      "desc": "MQTT QoS used to publish messages consumed from Kafka.",
      "label": "QoS"
    },
    "consumer_key_encoding_mode": {
      "desc": "Defines how the key from the Kafka message is encoded before being forwarded via MQTT.\n<code>none</code> Uses the key from the Kafka message unchanged.  Note: in this case, the key must be a valid UTF-8 string.\n<code>base64</code> Uses base-64 encoding on the received key.",
      "label": "Key Encoding Mode"
    },
    "auth_gssapi_kerberos": {
      "desc": "Use GSSAPI/Kerberos authentication.",
      "label": "GSSAPI/Kerberos"
    },
    "consumer_mqtt_opts": {
      "desc": "Local MQTT message publish.",
      "label": "MQTT publish"
    },
    "auth_kerberos_principal": {
      "desc": "SASL GSSAPI authentication Kerberos principal. For example <code>client_name@MY.KERBEROS.REALM.MYDOMAIN.COM</code>, NOTE: The realm in use has to be configured in /etc/krb5.conf in EMQX nodes.",
      "label": "Kerberos Principal"
    },
    "socket_opts": {
      "desc": "Extra socket options.",
      "label": "Socket Options"
    },
    "consumer_mqtt_topic": {
      "desc": "Local topic to which consumed Kafka messages should be published to.",
      "label": "MQTT Topic"
    },
    "consumer_offset_reset_policy": {
      "desc": "Defines from which offset a consumer should start fetching when there is no commit history or when the commit history becomes invalid.",
      "label": "Offset Reset Policy"
    },
    "partition_count_refresh_interval": {
      "desc": "The time interval for Kafka producer to discover increased number of partitions.\nAfter the number of partitions is increased in Kafka, EMQX will start taking the \ndiscovered partitions into account when dispatching messages per <code>partition_strategy</code>.",
      "label": "Partition Count Refresh Interval"
    },
    "max_batch_bytes": {
      "desc": "Maximum bytes to collect in a Kafka message batch. Most of the Kafka brokers default to a limit of 1 MB batch size. EMQX's default value is less than 1 MB in order to compensate Kafka message encoding overheads (especially when each individual message is very small). When a single message is over the limit, it is still sent (as a single element batch).",
      "label": "Max Batch Bytes"
    },
    "required_acks": {
      "desc": "Required acknowledgements for Kafka partition leader to wait for its followers before it sends back the acknowledgement to EMQX Kafka producer\n\n<code>all_isr</code>: Require all in-sync replicas to acknowledge.\n<code>leader_only</code>: Require only the partition-leader's acknowledgement.\n<code>none</code>: No need for Kafka to acknowledge at all.",
      "label": "Required Acks"
    },
    "metadata_request_timeout": {
      "desc": "Maximum wait time when fetching metadata from Kafka.",
      "label": "Metadata Request Timeout"
    },
    "desc_type": {
      "desc": "The Bridge Type",
      "label": "Bridge Type"
    },
    "socket_nodelay": {
      "desc": "When set to 'true', TCP buffer is sent as soon as possible. Otherwise, the OS kernel may buffer small TCP packets for a while (40 ms by default).",
      "label": "No Delay"
    },
    "authentication": {
      "desc": "Authentication configs.",
      "label": "Authentication"
    },
    "buffer_memory_overload_protection": {
      "desc": "Applicable when buffer mode is set to <code>memory</code>\nEMQX will drop old buffered messages under high memory pressure. The high memory threshold is defined in config <code>sysmon.os.sysmem_high_watermark</code>. NOTE: This config only works on Linux.",
      "label": "Memory Overload Protection"
    },
    "auth_sasl_mechanism": {
      "desc": "SASL authentication mechanism.",
      "label": "Mechanism"
    },
    "config_enable": {
      "desc": "Enable (true) or disable (false) this Kafka bridge.",
      "label": "Enable or Disable"
    },
    "consumer_mqtt_payload": {
      "desc": "The template for transforming the incoming Kafka message.  By default, it will use JSON format to serialize inputs from the Kafka message.  Such fields are:\n<code>headers</code>: an object containing string key-value pairs.\n<code>key</code>: Kafka message key (uses the chosen key encoding).\n<code>offset</code>: offset for the message.\n<code>topic</code>: Kafka topic.\n<code>ts</code>: message timestamp.\n<code>ts_type</code>: message timestamp type, which is one of <code>create</code>, <code>append</code> or <code>undefined</code>.\n<code>value</code>: Kafka message value (uses the chosen value encoding).",
      "label": "MQTT Payload Template"
    },
    "consumer_opts": {
      "desc": "Local MQTT publish and Kafka consumer configs.",
      "label": "MQTT to Kafka"
    },
    "kafka_consumer": {
      "desc": "Kafka Consumer configuration.",
      "label": "Kafka Consumer"
    },
    "desc_config": {
      "desc": "Configuration for a Kafka bridge.",
      "label": "Kafka Bridge Configuration"
    },
    "consumer_value_encoding_mode": {
      "desc": "Defines how the value from the Kafka message is encoded before being forwarded via MQTT.\n<code>none</code> Uses the value from the Kafka message unchanged.  Note: in this case, the value must be a valid UTF-8 string.\n<code>base64</code> Uses base-64 encoding on the received value.",
      "label": "Value Encoding Mode"
    },
    "buffer_per_partition_limit": {
      "desc": "Number of bytes allowed to buffer for each Kafka partition. When this limit is exceeded, old messages will be dropped in a trade for credits for new messages to be buffered.",
      "label": "Per-partition Buffer Limit"
    },
    "bootstrap_hosts": {
      "desc": "A comma separated list of Kafka <code>host[:port]</code> endpoints to bootstrap the client. Default port number is 9092.",
      "label": "Bootstrap Hosts"
    },
    "consumer_max_rejoin_attempts": {
      "desc": "Maximum number of times allowed for a member to re-join the group. If the consumer group can not reach balance after this configured number of attempts, the consumer group member will restart after a delay.",
      "label": "Max Rejoin Attempts"
    },
    "kafka_message_key": {
      "desc": "Template to render Kafka message key. If the template is rendered into a NULL value (i.e. there is no such data field in Rule Engine context) then Kafka's <code>NULL</code> (but not empty string) is used.",
      "label": "Message Key"
    },
    "kafka_message": {
      "desc": "Template to render a Kafka message.",
      "label": "Kafka Message Template"
    },
    "mqtt_topic": {
      "desc": "MQTT topic or topic as data source (bridge input).  Should not configure this if the bridge is used as a rule action.",
      "label": "Source MQTT Topic"
    },
    "kafka_message_value": {
      "desc": "Template to render Kafka message value. If the template is rendered into a NULL value (i.e. there is no such data field in Rule Engine context) then Kafka's <code>NULL</code> (but not empty string) is used.",
      "label": "Message Value"
    },
    "partition_strategy": {
      "desc": "Partition strategy is to tell the producer how to dispatch messages to Kafka partitions.\n\n<code>random</code>: Randomly pick a partition for each message\n<code>key_dispatch</code>: Hash Kafka message key to a partition number",
      "label": "Partition Strategy"
    },
    "buffer_segment_bytes": {
      "desc": "Applicable when buffer mode is set to <code>disk</code> or <code>hybrid</code>.\nThis value is to specify the size of each on-disk buffer file.",
      "label": "Segment File Bytes"
    },
    "consumer_kafka_opts": {
      "desc": "Kafka consumer configs.",
      "label": "Kafka Consumer"
    },
    "max_inflight": {
      "desc": "Maximum number of batches allowed for Kafka producer (per-partition) to send before receiving acknowledgement from Kafka. Greater value typically means better throughput. However, there can be a risk of message reordering when this value is greater than 1.",
      "label": "Max Inflight"
    },
    "auth_sasl_username": {
      "desc": "SASL authentication username.",
      "label": "Username"
    },
    "auth_kerberos_keytab_file": {
      "desc": "SASL GSSAPI authentication Kerberos keytab file path. NOTE: This file has to be placed in EMQX nodes, and the EMQX service runner user requires read permission.",
      "label": "Kerberos keytab file"
    },
    "compression": {
      "desc": "Compression method.",
      "label": "Compression"
    }
  },
  "emqx_ee_bridge_mongodb": {
    "collection": {
      "desc": "The collection where data will be stored into",
      "label": "Collection to be used"
    },
    "desc_config": {
      "desc": "Configuration for MongoDB Bridge",
      "label": "MongoDB Bridge Configuration"
    },
    "desc_name": {
      "desc": "Bridge name.",
      "label": "Bridge Name"
    },
    "desc_type": {
      "desc": "The Bridge Type.",
      "label": "Bridge Type"
    },
    "enable": {
      "desc": "Enable or disable this MongoDB Bridge",
      "label": "Enable or disable"
    },
    "mongodb_rs_conf": {
      "desc": "MongoDB (Replica Set) configuration",
      "label": "MongoDB (Replica Set) Configuration"
    },
    "mongodb_sharded_conf": {
      "desc": "MongoDB (Sharded) configuration",
      "label": "MongoDB (Sharded) Configuration"
    },
    "mongodb_single_conf": {
      "desc": "MongoDB (Standalone) configuration",
      "label": "MongoDB (Standalone) Configuration"
    },
    "payload_template": {
      "desc": "The template for formatting the outgoing messages.  If undefined, rule engine will use JSON format to serialize all visible inputs, such as clientid, topic, payload etc.",
      "label": "Payload template"
    }
  },
  "emqx_ee_bridge_mysql": {
    "config_enable": {
      "desc": "Enable or disable this bridge",
      "label": "Enable Or Disable Bridge"
    },
    "desc_config": {
      "desc": "Configuration for an HStreamDB bridge.",
      "label": "HStreamDB Bridge Configuration"
    },
    "desc_name": {
      "desc": "Bridge name, used as a human-readable description of the bridge.",
      "label": "Bridge Name"
    },
    "desc_type": {
      "desc": "The Bridge Type",
      "label": "Bridge Type"
    },
    "local_topic": {
      "desc": "The MQTT topic filter to be forwarded to MySQL. All MQTT 'PUBLISH' messages with the topic\nmatching the local_topic will be forwarded.</br>\nNOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is\nconfigured, then both the data got from the rule and the MQTT messages that match local_topic\nwill be forwarded.",
      "label": "Local Topic"
    },
    "sql_template": {
      "desc": "SQL Template",
      "label": "SQL Template"
    }
  },
  "emqx_ee_bridge_pgsql": {
    "config_enable": {
      "desc": "Enable or disable this bridge",
      "label": "Enable Or Disable Bridge"
    },
    "desc_config": {
      "desc": "Configuration for an PostgreSQL bridge.",
      "label": "PostgreSQL Bridge Configuration"
    },
    "desc_name": {
      "desc": "Bridge name.",
      "label": "Bridge Name"
    },
    "desc_type": {
      "desc": "The Bridge Type",
      "label": "Bridge Type"
    },
    "local_topic": {
      "desc": "The MQTT topic filter to be forwarded to PostgreSQL. All MQTT 'PUBLISH' messages with the topic\nmatching the local_topic will be forwarded.</br>\nNOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is\nconfigured, then both the data got from the rule and the MQTT messages that match local_topic\nwill be forwarded.",
      "label": "Local Topic"
    },
    "sql_template": {
      "desc": "SQL Template",
      "label": "SQL Template"
    }
  },
  "emqx_ee_bridge_redis": {
    "command_template": {
      "desc": "Redis command template used to export messages. Each list element stands for a command name or its argument.\nFor example, to push payloads in a Redis list by key `msgs`, the elements should be the following:\n`rpush`, `msgs`, `${payload}`.",
      "label": "Redis Command Template"
    },
    "config_enable": {
      "desc": "Enable or disable this bridge",
      "label": "Enable Or Disable Bridge"
    },
    "desc_config": {
      "desc": "Configuration for a Redis bridge.",
      "label": "Redis Bridge Configuration"
    },
    "desc_name": {
      "desc": "Bridge name, used as a human-readable description of the bridge.",
      "label": "Bridge Name"
    },
    "desc_type": {
      "desc": "The Bridge Type",
      "label": "Bridge Type"
    },
    "local_topic": {
      "desc": "The MQTT topic filter to be forwarded to Redis. All MQTT 'PUBLISH' messages with the topic\nmatching the local_topic will be forwarded.</br>\nNOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is\nconfigured, then both the data got from the rule and the MQTT messages that match local_topic\nwill be forwarded.",
      "label": "Local Topic"
    }
  },
  "emqx_ee_bridge_rocketmq": {
    "config_enable": {
      "desc": "Enable or disable this bridge",
      "label": "Enable Or Disable Bridge"
    },
    "desc_config": {
      "desc": "Configuration for a RocketMQ bridge.",
      "label": "RocketMQ Bridge Configuration"
    },
    "desc_name": {
      "desc": "Bridge name.",
      "label": "Bridge Name"
    },
    "desc_type": {
      "desc": "The Bridge Type",
      "label": "Bridge Type"
    },
    "local_topic": {
      "desc": "The MQTT topic filter to be forwarded to RocketMQ. All MQTT `PUBLISH` messages with the topic\nmatching the `local_topic` will be forwarded.</br>\nNOTE: if the bridge is used as a rule action, `local_topic` should be left empty otherwise the messages will be duplicated.",
      "label": "Local Topic"
    },
    "template": {
      "desc": "Template, the default value is empty. When this value is empty the whole message will be stored in the RocketMQ",
      "label": "Template"
    }
  },
  "emqx_ee_bridge_tdengine": {
    "config_enable": {
      "desc": "Enable or disable this bridge",
      "label": "Enable Or Disable Bridge"
    },
    "desc_config": {
      "desc": "Configuration for an TDengine bridge.",
      "label": "TDengine Bridge Configuration"
    },
    "desc_name": {
      "desc": "Bridge name.",
      "label": "Bridge Name"
    },
    "desc_type": {
      "desc": "The Bridge Type",
      "label": "Bridge Type"
    },
    "local_topic": {
      "desc": "The MQTT topic filter to be forwarded to TDengine. All MQTT 'PUBLISH' messages with the topic\nmatching the local_topic will be forwarded.</br>\nNOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is\nconfigured, then both the data got from the rule and the MQTT messages that match local_topic\nwill be forwarded.",
      "label": "Local Topic"
    },
    "sql_template": {
      "desc": "SQL Template",
      "label": "SQL Template"
    }
  },
  "emqx_exhook_api": {
    "add_server": {
      "desc": "Add a server"
    },
    "delete_server": {
      "desc": "Delete the server"
    },
    "get_detail": {
      "desc": "Get the detail information of Exhook server"
    },
    "get_hooks": {
      "desc": "Get the hooks information of server"
    },
    "hook_metrics": {
      "desc": "Metrics information of this hook in the current node"
    },
    "hook_name": {
      "desc": "The hook's name"
    },
    "hook_params": {
      "desc": "The parameters used when the hook is registered"
    },
    "list_all_servers": {
      "desc": "List all servers"
    },
    "metric_failed": {
      "desc": "The number of times the hook execution failed"
    },
    "metric_max_rate": {
      "desc": "Maximum call rate of hooks"
    },
    "metric_rate": {
      "desc": "The call rate of hooks"
    },
    "metric_succeed": {
      "desc": "The number of times the hooks execution successful"
    },
    "metrics": {
      "desc": "Metrics information"
    },
    "move_api": {
      "desc": "Move the server.\nNOTE: The position should be \"front | rear | before:{name} | after:{name}",
      "label": "Change order of execution for registered Exhook server"
    },
    "move_position": {
      "desc": "The target position to be moved"
    },
    "node": {
      "desc": "Node name"
    },
    "node_hook_metrics": {
      "desc": "Metrics information of this hook in all nodes"
    },
    "node_metrics": {
      "desc": "Metrics information of this server in all nodes"
    },
    "node_status": {
      "desc": "status of this server in all nodes"
    },
    "server_metrics": {
      "desc": "Metrics information of this server in the current node"
    },
    "server_name": {
      "desc": "The Exhook server name"
    },
    "status": {
      "desc": "The status of Exhook server.<br/>\nconnected: connection succeeded<br/>\nconnecting: connection failed, reconnecting<br/>\ndisconnected: failed to connect and didn't reconnect<br/>\ndisabled: this server is disabled<br/>\nerror: failed to view the status of this server"
    },
    "update_server": {
      "desc": "Update the server"
    }
  },
  "emqx_exhook_schema": {
    "auto_reconnect": {
      "desc": "Whether to automatically reconnect (initialize) the gRPC server.\nWhen gRPC is not available, Exhook tries to request the gRPC service at that interval and reinitialize the list of mounted hooks."
    },
    "enable": {
      "desc": "Enable this Exhook server"
    },
    "failed_action": {
      "desc": "The value that is returned when the request to the gRPC server fails for any reason"
    },
    "keepalive": {
      "desc": "Enables/disables periodic transmission on a connected socket when no other data is exchanged.\nIf the other end does not respond, the connection is considered broken and an error message is sent to the controlling process."
    },
    "name": {
      "desc": "Name of the exhook server"
    },
    "nodelay": {
      "desc": "If true, option TCP_NODELAY is turned on for the socket,\nwhich means that also small amounts of data are sent immediately"
    },
    "pool_size": {
      "desc": "The process pool size for gRPC client"
    },
    "recbuf": {
      "desc": "The minimum size of receive buffer to use for the socket"
    },
    "request_timeout": {
      "desc": "The timeout of request gRPC server"
    },
    "servers": {
      "desc": "List of exhook servers"
    },
    "sndbuf": {
      "desc": "The minimum size of send buffer to use for the socket"
    },
    "socket_options": {
      "desc": "Connection socket options"
    },
    "url": {
      "desc": "URL of the gRPC server"
    }
  },
  "emqx_exproto_schema": {
    "exproto": {
      "desc": "The Extension Protocol configuration"
    },
    "exproto_grpc_handler_address": {
      "desc": "gRPC server address."
    },
    "exproto_grpc_handler_ssl": {
      "desc": "SSL configuration for the gRPC client."
    },
    "exproto_grpc_server_bind": {
      "desc": "Listening address and port for the gRPC server."
    },
    "exproto_grpc_server_ssl": {
      "desc": "SSL configuration for the gRPC server."
    },
    "exproto_handler": {
      "desc": "Configurations for request to <code>ConnectionHandler</code> service"
    },
    "exproto_server": {
      "desc": "Configurations for starting the <code>ConnectionAdapter</code> service"
    }
  },
  "emqx_license_http_api": {
    "desc_license_info_api": {
      "desc": "Get license info",
      "label": "License info"
    },
    "desc_license_key_api": {
      "desc": "Update a license key",
      "label": "Update license"
    }
  },
  "emqx_license_schema": {
    "connection_high_watermark_field": {
      "desc": "High watermark limit above which license connection quota usage alarms are activated",
      "label": "Connection high watermark"
    },
    "connection_low_watermark_field": {
      "desc": "Low watermark limit below which license connection quota usage alarms are deactivated",
      "label": "Connection low watermark"
    },
    "key_field": {
      "desc": "License string",
      "label": "License string"
    },
    "license_root": {
      "desc": "Defines the EMQX Enterprise license. \n\n\nThe default license has 100 connections limit, it is issued on 2023-01-09 and valid for 5 years (1825 days).\n\nEMQX comes with a default trial license.  For production use, please \nvisit https://www.emqx.com/apply-licenses/emqx to apply.",
      "label": "License"
    }
  },
  "emqx_limiter_schema": {
    "bucket_cfg": {
      "desc": "Bucket Configs",
      "label": "Buckets"
    },
    "burst": {
      "desc": "The burst, This value is based on rate.<br/>\n This value + rate = the maximum limit that can be achieved when limiter burst.",
      "label": "Burst"
    },
    "bytes_in": {
      "desc": "The bytes_in limiter.\nThis is used to limit the inbound bytes rate for this EMQX node.\nOnce the limit is reached, the restricted client will be slow down even be hung for a while.",
      "label": "Bytes In"
    },
    "capacity": {
      "desc": "The capacity of this token bucket.",
      "label": "Capacity"
    },
    "client": {
      "desc": "The rate limit for each user of the bucket",
      "label": "Per Client"
    },
    "client_bucket_capacity": {
      "desc": "The capacity of per user.",
      "label": "Capacity"
    },
    "connection": {
      "desc": "The connection limiter.\nThis is used to limit the connection rate for this EMQX node.\nOnce the limit is reached, new connections will be refused",
      "label": "Connection"
    },
    "divisible": {
      "desc": "Is it possible to split the number of requested tokens?",
      "label": "Divisible"
    },
    "failure_strategy": {
      "desc": "The strategy when all the retries failed.",
      "label": "Failure Strategy"
    },
    "initial": {
      "desc": "The initial number of tokens for this bucket.",
      "label": "Initial"
    },
    "internal": {
      "desc": "Limiter for EMQX internal app."
    },
    "low_watermark": {
      "desc": "If the remaining tokens are lower than this value,\nthe check/consume will succeed, but it will be forced to wait for a short period of time.",
      "label": "Low Watermark"
    },
    "max_retry_time": {
      "desc": "The maximum retry time when acquire failed.",
      "label": "Max Retry Time"
    },
    "message_in": {
      "desc": "The message in limiter.\nThis is used to limit the inbound message numbers for this EMQX node\nOnce the limit is reached, the restricted client will be slow down even be hung for a while.",
      "label": "Message In"
    },
    "message_routing": {
      "desc": "The message routing limiter.\nThis is used to limit the forwarding rate for this EMQX node.\nOnce the limit is reached, new publish will be refused",
      "label": "Message Routing"
    },
    "rate": {
      "desc": "Rate for this bucket.",
      "label": "Rate"
    }
  },
  "emqx_lwm2m_api": {
    "dataType": {
      "desc": "Data Type"
    },
    "lookup_resource": {
      "desc": "Look up a resource"
    },
    "name": {
      "desc": "Resource Name"
    },
    "observe_resource": {
      "desc": "Observe or Cancel observe a resource"
    },
    "operations": {
      "desc": "Resource Operations"
    },
    "path": {
      "desc": "Resource Path"
    },
    "read_resource": {
      "desc": "Send a read command to a resource"
    },
    "write_resource": {
      "desc": "Send a write command to a resource"
    }
  },
  "emqx_lwm2m_schema": {
    "lwm2m": {
      "desc": "The LwM2M Gateway configuration. This gateway only supports the v1.0.1 protocol."
    },
    "lwm2m_auto_observe": {
      "desc": "Automatically observe the object list of REGISTER packet."
    },
    "lwm2m_lifetime_max": {
      "desc": "Maximum value of lifetime allowed to be set by the LwM2M client."
    },
    "lwm2m_lifetime_min": {
      "desc": "Minimum value of lifetime allowed to be set by the LwM2M client."
    },
    "lwm2m_qmode_time_window": {
      "desc": "The value of the time window during which the network link is considered valid by the LwM2M Gateway in QMode mode.\nFor example, after receiving an update message from a client, any messages within this time window are sent directly to the LwM2M client, and all messages beyond this time window are temporarily stored in memory."
    },
    "lwm2m_translators": {
      "desc": "Topic configuration for LwM2M's gateway publishing and subscription."
    },
    "lwm2m_translators_command": {
      "desc": "The topic for receiving downstream commands.\nFor each new LwM2M client that succeeds in going online, the gateway creates a subscription relationship to receive downstream commands and send it to the LwM2M client"
    },
    "lwm2m_translators_notify": {
      "desc": "The topic for gateway to publish the notify events from LwM2M client.\nAfter succeed observe a resource of LwM2M client, Gateway will send the notify events via this topic, if the client reports any resource changes"
    },
    "lwm2m_translators_register": {
      "desc": "The topic for gateway to publish the register events from LwM2M client."
    },
    "lwm2m_translators_response": {
      "desc": "The topic for gateway to publish the acknowledge events from LwM2M client"
    },
    "lwm2m_translators_update": {
      "desc": "The topic for gateway to publish the update events from LwM2M client"
    },
    "lwm2m_update_msg_publish_condition": {
      "desc": "Policy for publishing UPDATE event message.<br/>\n  - always: send update events as long as the UPDATE request is received.<br/>\n  - contains_object_list: send update events only if the UPDATE request carries any Object List"
    },
    "lwm2m_xml_dir": {
      "desc": "The Directory for LwM2M Resource definition."
    },
    "translator": {
      "desc": "MQTT topic that corresponds to a particular type of event."
    },
    "translator_qos": {
      "desc": "QoS Level"
    },
    "translator_topic": {
      "desc": "Topic Name"
    }
  },
  "emqx_mgmt_api_alarms": {
    "activate_at": {
      "desc": "Alarm start time, using rfc3339 standard time format."
    },
    "deactivate_at": {
      "desc": "Alarm end time, using rfc3339 standard time format."
    },
    "delete_alarms_api": {
      "desc": "Remove all historical alarms."
    },
    "delete_alarms_api_response204": {
      "desc": "Historical alarms have been cleared successfully."
    },
    "details": {
      "desc": "Alarm details, provides more alarm information, mainly for program processing."
    },
    "duration": {
      "desc": "Indicates how long the alarm has been active in milliseconds."
    },
    "get_alarms_qs_activated": {
      "desc": "It is used to specify the alarm type of the query.\nWhen true, it returns the currently activated alarm,\nand when it is false, it returns the historical alarm.\nThe default is false."
    },
    "list_alarms_api": {
      "desc": "List currently activated alarms or historical alarms, determined by query parameters."
    },
    "message": {
      "desc": "Alarm message, which describes the alarm content in a human-readable format."
    },
    "name": {
      "desc": "Alarm name, used to distinguish different alarms."
    },
    "node": {
      "desc": "The name of the node that triggered this alarm."
    }
  },
  "emqx_mgmt_api_banned": {
    "as": {
      "desc": "Ban method, which can be client ID, username or IP address.",
      "label": "Ban Method"
    },
    "at": {
      "desc": "The start time of the ban, the format is rfc3339, the default is the time when the operation was initiated.",
      "label": "Ban Time"
    },
    "by": {
      "desc": "Initiator of the ban.",
      "label": "Ban Initiator"
    },
    "create_banned_api": {
      "desc": "Add a client ID, username or IP address to the blacklist."
    },
    "create_banned_api_response400": {
      "desc": "Bad request, possibly due to wrong parameters or the existence of a banned object."
    },
    "delete_banned_api": {
      "desc": "Remove a client ID, username or IP address from the blacklist."
    },
    "delete_banned_api_response404": {
      "desc": "The banned object was not found in the blacklist."
    },
    "list_banned_api": {
      "desc": "List all currently banned client IDs, usernames and IP addresses."
    },
    "reason": {
      "desc": "Ban reason, record the reason why the current object was banned.",
      "label": "Ban Reason"
    },
    "until": {
      "desc": "The end time of the ban, the format is rfc3339, the default is the time when the operation was initiated + 1 year.",
      "label": "Ban End Time"
    },
    "who": {
      "desc": "Ban object, specific client ID, username or IP address.",
      "label": "Ban Object"
    }
  },
  "emqx_mgmt_api_key_schema": {
    "api_key": {
      "desc": "API Key, can be used to request API other than the management API key and the Dashboard user management API",
      "label": "API Key"
    },
    "bootstrap_file": {
      "desc": "Bootstrap file is used to add an api_key when emqx is launched,\n      the format is:\n       ```\n       7e729ae70d23144b:2QILI9AcQ9BYlVqLDHQNWN2saIjBV4egr1CZneTNKr9CpK\n       ec3907f865805db0:Ee3taYltUKtoBVD9C3XjQl9C6NXheip8Z9B69BpUv5JxVHL\n       ```",
      "label": "Initialize api_key file."
    }
  },
  "emqx_mgmt_api_publish": {
    "error_message": {
      "desc": "Describes the failure reason in detail."
    },
    "message_id": {
      "desc": "A globally unique message ID for correlation/tracing."
    },
    "message_properties": {
      "desc": "The Properties of the PUBLISH message."
    },
    "msg_content_type": {
      "desc": "The Content Type MUST be a UTF-8 Encoded String."
    },
    "msg_correlation_data": {
      "desc": "Identifier of the Correlation Data. The Server MUST send the Correlation Data unaltered to all subscribers receiving the Application Message."
    },
    "msg_message_expiry_interval": {
      "desc": "Identifier of the Message Expiry Interval. If the Message Expiry Interval has passed and the Server has not managed to start onward delivery to a matching subscriber, then it MUST delete the copy of the message for that subscriber."
    },
    "msg_payload_format_indicator": {
      "desc": "0 (0x00) Byte Indicates that the Payload is unspecified bytes, which is equivalent to not sending a Payload Format Indicator.\n1 (0x01) Byte Indicates that the Payload is UTF-8 Encoded Character Data. The UTF-8 data in the Payload MUST be well-formed UTF-8 as defined by the Unicode specification and restated in RFC 3629."
    },
    "msg_response_topic": {
      "desc": "Identifier of the Response Topic.The Response Topic MUST be a UTF-8 Encoded, It MUST NOT contain wildcard characters."
    },
    "msg_user_properties": {
      "desc": "The User-Property key-value pairs. Note: in case there are duplicated keys, only the last one will be used."
    },
    "payload": {
      "desc": "The MQTT message payload."
    },
    "payload_encoding": {
      "desc": "MQTT Payload Encoding, <code>base64</code> or <code>plain</code>. When set to <code>base64</code>, the message is decoded before it is published."
    },
    "publish_api": {
      "desc": "Possible HTTP status response codes are:<br/>\n<code>200</code>: The message is delivered to at least one subscriber;<br/>\n<code>202</code>: No matched subscribers;<br/>\n<code>400</code>: Message is invalid. for example bad topic name, or QoS is out of range;<br/>\n<code>503</code>: Failed to deliver the message to subscriber(s)",
      "label": "Publish a message"
    },
    "publish_bulk_api": {
      "desc": "Possible HTTP response status code are:<br/>\n200: All messages are delivered to at least one subscriber;<br/>\n202: At least one message was not delivered to any subscriber;<br/>\n400: At least one message is invalid. For example bad topic name, or QoS is out of range;<br/>\n503: Failed to deliver at least one of the messages;<br/>\n\nIn case there is at lest one invalid message in the batch, the HTTP response body\nis the same as for <code>/publish</code> API.<br/>\nOtherwise the HTTP response body is an array of JSON objects indicating the publish\nresult of each individual message in the batch.",
      "label": "Publish a batch of messages"
    },
    "qos": {
      "desc": "MQTT message QoS"
    },
    "reason_code": {
      "desc": "The MQTT reason code, as the same ones used in PUBACK packet.<br/>\nCurrently supported codes are:<br/>\n\n16(0x10): No matching subscribers;<br/>\n131(0x81): Error happened when dispatching the message. e.g. during EMQX restart;<br/>\n144(0x90): Topic name invalid;<br/>\n151(0x97): Publish rate limited, or message size exceeded limit. The global size limit can be configured with <code>mqtt.max_packet_size</code><br/>\nNOTE: The message size is estimated with the received topic and payload size, meaning the actual size of serialized bytes (when sent to MQTT subscriber)\nmight be slightly over the limit."
    },
    "retain": {
      "desc": "A boolean field to indicate if this message should be retained."
    },
    "topic_name": {
      "desc": "Topic Name"
    }
  },
  "emqx_mgmt_api_status": {
    "get_status_api": {
      "desc": "Serves as a health check for the node.  Returns a plain text response describing the status of the node.  This endpoint requires no authentication.\n\nReturns status code 200 if the EMQX application is up and running, 503 otherwise.\nThis API was introduced in v5.0.10.\nThe GET `/status` endpoint (without the `/api/...` prefix) is also an alias to this endpoint and works in the same way.  This alias has been available since v5.0.0.",
      "label": "Service health check"
    },
    "get_status_response200": {
      "desc": "Node emqx@127.0.0.1 is started\nemqx is running"
    },
    "get_status_response503": {
      "desc": "Node emqx@127.0.0.1 is stopped\nemqx is not_running"
    }
  },
  "emqx_modules_schema": {
    "enable": {
      "desc": "Enable this feature"
    },
    "max_delayed_messages": {
      "desc": "Maximum number of delayed messages (0 is no limit)."
    },
    "rewrite": {
      "desc": "The topic rewriting function of EMQX supports rewriting topic A to topic B when the client subscribes to topics, publishes messages, and cancels subscriptions according to user-configured rules.\nEach rewrite rule consists of three parts: subject filter, regular expression, and target expression.\nUnder the premise that the subject rewriting function is enabled, when EMQX receives a subject-based MQTT message such as a `PUBLISH` message,\nit will use the subject of the message to sequentially match the subject filter part of the rule in the configuration file. If the match is successful,\nthe regular expression is used to extract the information in the subject, and then replaced with the target expression to form a new subject.\nVariables in the format of `$N` can be used in the target expression to match the elements extracted from the regular expression.\nThe value of `$N` is the Nth element extracted from the regular expression. For example, `$1` is the regular expression. The first element extracted by the expression.\nIt should be noted that EMQX uses reverse order to read the rewrite rules in the configuration file.\nWhen a topic can match the topic filter of multiple topic rewrite rules at the same time, EMQX will only use the first rule it matches. Rewrite.\nIf the regular expression in this rule does not match the subject of the MQTT message, the rewriting will fail, and no other rules will be attempted for rewriting.\nTherefore, users need to carefully design MQTT message topics and topic rewriting rules when using them.",
      "label": "Topic Rewrite"
    },
    "tr_action": {
      "desc": "Topic rewriting takes effect on the type of operation:\n  - `subscribe`: Rewrite topic when client do subscribe.\n  - `publish`: Rewrite topic when client do publish.\n  - `all`: Both",
      "label": "Action"
    },
    "tr_dest_topic": {
      "desc": "Destination topic.",
      "label": "Destination Topic"
    },
    "tr_re": {
      "desc": "Regular expressions"
    },
    "tr_source_topic": {
      "desc": "Source topic, specified by the client.",
      "label": "Source Topic"
    }
  },
  "emqx_mqttsn_schema": {
    "mqttsn": {
      "desc": "The MQTT-SN Gateway configuration.\nThis gateway only supports the v1.2 protocol"
    },
    "mqttsn_broadcast": {
      "desc": "Whether to periodically broadcast ADVERTISE messages"
    },
    "mqttsn_enable_qos3": {
      "desc": "Allows connectionless clients to publish messages with a Qos of -1.\nThis feature is defined for very simple client implementations which do not support any other features except this one. There is no connection setup nor tear down, no registration nor subscription. The client just sends its 'PUBLISH' messages to a GW"
    },
    "mqttsn_predefined": {
      "desc": "The pre-defined topic IDs and topic names.\nA 'pre-defined' topic ID is a topic ID whose mapping to a topic name is known in advance by both the client's application and the gateway"
    },
    "mqttsn_predefined_id": {
      "desc": "Topic ID. Range: 1-65535"
    },
    "mqttsn_predefined_topic": {
      "desc": "Topic Name"
    },
    "mqttsn_subs_resume": {
      "desc": "Whether to initiate all subscribed topic name registration messages to the client after the Session has been taken over by a new channel"
    }
  },
  "emqx_plugins_schema": {
    "check_interval": {
      "desc": "Check interval: check if the status of the plugins in the cluster is consistent, <br/>\nif the results of 3 consecutive checks are not consistent, then alarm."
    },
    "enable": {
      "desc": "Set to 'true' to enable this plugin",
      "label": "Enable"
    },
    "install_dir": {
      "desc": "The installation directory for the external plugins.\nThe plugin beam files and configuration files should reside in\nthe subdirectory named as <code>emqx_foo_bar-0.1.0</code>.\n<br/>\nNOTE: For security reasons, this directory should **NOT** be writable\nby anyone except <code>emqx</code> (or any user which runs EMQX).",
      "label": "Install Directory"
    },
    "name_vsn": {
      "desc": "The {name}-{version} of the plugin.<br/>\nIt should match the plugin application name-version as the for the plugin release package name<br/>\nFor example: my_plugin-0.1.0.",
      "label": "Name-Version"
    },
    "plugins": {
      "desc": "Manage EMQX plugins.<br/>\nPlugins can be pre-built as a part of EMQX package,\nor installed as a standalone package in a location specified by\n<code>install_dir</code> config key<br/>\nThe standalone-installed plugins are referred to as 'external' plugins.",
      "label": "Plugins"
    },
    "state": {
      "desc": "A per-plugin config to describe the desired state of the plugin.",
      "label": "State"
    },
    "states": {
      "desc": "An array of plugins in the desired states.<br/>\nThe plugins are started in the defined order",
      "label": "States"
    }
  },
  "emqx_prometheus_schema": {
    "enable": {
      "desc": "Turn Prometheus data pushing on or off"
    },
    "headers": {
      "desc": "A list of HTTP Headers when pushing to Push Gateway.<br/>\nFor example, <code> { Authorization = \"some-authz-tokens\"}</code>"
    },
    "interval": {
      "desc": "Data reporting interval"
    },
    "job_name": {
      "desc": "Job Name that is pushed to the Push Gateway. Available variables:<br/>\n- ${name}: Name of EMQX node.<br/>\n- ${host}: Host name of EMQX node.<br/>\nFor example, when the EMQX node name is <code>emqx@127.0.0.1</code> then the <code>name</code> variable takes value <code>emqx</code> and the <code>host</code> variable takes value <code>127.0.0.1</code>.<br/>\nDefault value is: <code>${name}/instance/${name}~${host}</code>"
    },
    "mnesia_collector": {
      "desc": "Enable or disable Mnesia collector, collects Mnesia metrics mainly using mnesia:system_info/1 ."
    },
    "prometheus": {
      "desc": "Settings for reporting metrics to Prometheus",
      "label": "Prometheus"
    },
    "vm_dist_collector": {
      "desc": "Enable or disable VM distribution collector, collects information about the sockets and processes involved in the Erlang distribution mechanism."
    },
    "vm_memory_collector": {
      "desc": "Enable or disable VM memory collector, collects information about memory dynamically allocated by the Erlang emulator using erlang:memory/0 , also provides basic (D)ETS statistics ."
    },
    "vm_msacc_collector": {
      "desc": "Enable or disable VM msacc collector, collects microstate accounting metrics using erlang:statistics(microstate_accounting) ."
    },
    "vm_statistics_collector": {
      "desc": "Enable or disable VM statistics collector, collects Erlang VM metrics using erlang:statistics/1 ."
    },
    "vm_system_info_collector": {
      "desc": "Enable or disable VM system info collector, collects Erlang VM metrics using erlang:system_info/1 ."
    }
  },
  "emqx_psk_schema": {
    "chunk_size": {
      "desc": "The size of each chunk used to import to the built-in database from PSK file"
    },
    "enable": {
      "desc": "Whether to enable TLS PSK support"
    },
    "init_file": {
      "desc": "If init_file is specified, EMQX will import PSKs from the file into the built-in database at startup for use by the runtime.\nThe file has to be structured line-by-line, each line must be in the format of <code>PSKIdentity:SharedSecret</code>.\nFor example: <code>mydevice1:c2VjcmV0</code>"
    },
    "psk_authentication": {
      "desc": "PSK stands for 'Pre-Shared Keys'.\nThis config to enable TLS-PSK authentication.\n\nImportant! Make sure the SSL listener with only <code>tlsv1.2</code> enabled, and also PSK cipher suites\nconfigured, such as <code>RSA-PSK-AES256-GCM-SHA384</code>.\n\nSee listener SSL options config for more details.\n\nThe IDs and secrets can be provided from a file which is configurable by the <code>init_file</code> field."
    },
    "separator": {
      "desc": "The separator between <code>PSKIdentity</code> and <code>SharedSecret</code> in the PSK file"
    }
  },
  "emqx_resource_schema": {
    "auto_restart_interval": {
      "desc": "The auto restart interval after the resource is disconnected.",
      "label": "Auto Restart Interval"
    },
    "batch_size": {
      "desc": "Maximum batch count. If equal to 1, there's effectively no batching.",
      "label": "Max batch size"
    },
    "batch_time": {
      "desc": "Maximum waiting interval when accumulating a batch at a low message rates for more efficient resource usage.",
      "label": "Max batch wait time"
    },
    "creation_opts": {
      "desc": "Creation options.",
      "label": "Creation Options"
    },
    "enable_batch": {
      "desc": "Batch mode enabled.",
      "label": "Enable batch"
    },
    "enable_queue": {
      "desc": "Enable disk buffer queue (only applicable for egress bridges).\nWhen Enabled, messages will be buffered on disk when the bridge connection is down.\nWhen disabled the messages are buffered in RAM only.",
      "label": "Enable disk buffer queue"
    },
    "health_check_interval": {
      "desc": "Health check interval.",
      "label": "Health Check Interval"
    },
    "inflight_window": {
      "desc": "Query inflight window. When query_mode is set to async, this config has to be set to 1 if messages from the same MQTT client have to be strictly ordered.",
      "label": "Inflight window"
    },
    "max_queue_bytes": {
      "desc": "Maximum number of bytes to buffer for each buffer worker.",
      "label": "Max buffer queue size"
    },
    "query_mode": {
      "desc": "Query mode. Optional 'sync/async', default 'async'.",
      "label": "Query mode"
    },
    "request_timeout": {
      "desc": "Starting from the moment when the request enters the buffer, if the request remains in the buffer for the specified time or is sent but does not receive a response or acknowledgement in time, the request is considered expired.",
      "label": "Request Expiry"
    },
    "resource_opts": {
      "desc": "Resource options.",
      "label": "Resource Options"
    },
    "resume_interval": {
      "desc": "The interval at which the buffer worker attempts to resend failed requests in the inflight window.",
      "label": "Resume Interval"
    },
    "start_after_created": {
      "desc": "Whether start the resource right after created.",
      "label": "Start After Created"
    },
    "start_timeout": {
      "desc": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
      "label": "Start Timeout"
    },
    "worker_pool_size": {
      "desc": "The number of buffer workers. Only applicable for egress type bridges.\nFor bridges only have ingress direction data flow, it can be set to 0 otherwise must be greater than 0.",
      "label": "Buffer Pool Size"
    }
  },
  "emqx_retainer_api": {
    "config_content": {
      "desc": "The config content"
    },
    "config_not_found": {
      "desc": "Config not found."
    },
    "delete_matching_api": {
      "desc": "Delete matching messages."
    },
    "from_clientid": {
      "desc": "The clientid of publisher."
    },
    "from_username": {
      "desc": "The username of publisher."
    },
    "get_config_api": {
      "desc": "View config"
    },
    "list_retained_api": {
      "desc": "List retained messages."
    },
    "lookup_api": {
      "desc": "Lookup a message by a topic without wildcards."
    },
    "message_detail": {
      "desc": "Details of the message."
    },
    "message_not_exist": {
      "desc": "Viewed message doesn't exist."
    },
    "msgid": {
      "desc": "Message ID."
    },
    "payload": {
      "desc": "Payload."
    },
    "publish_at": {
      "desc": "Message publish time, RFC 3339 format."
    },
    "qos": {
      "desc": "QoS."
    },
    "retained_list": {
      "desc": "Retained messages list."
    },
    "topic": {
      "desc": "Topic."
    },
    "unsupported_backend": {
      "desc": "Unsupported backend."
    },
    "update_config_failed": {
      "desc": "Update config failed"
    },
    "update_config_success": {
      "desc": "Update configs successfully."
    },
    "update_retainer_api": {
      "desc": "Update retainer config."
    }
  },
  "emqx_retainer_schema": {
    "backend": {
      "desc": "Settings for the database storing the retained messages."
    },
    "batch_deliver_limiter": {
      "desc": "The rate limiter name for retained messages' delivery.\nLimiter helps to avoid delivering too many messages to the client at once, which may cause the client to block or crash, or drop messages due to exceeding the size of the message queue.\nThe names of the available rate limiters are taken from the existing rate limiters under `limiter.batch`.\nIf this field is empty, limiter is not used."
    },
    "batch_deliver_number": {
      "desc": "The number of retained messages can be delivered per batch."
    },
    "batch_read_number": {
      "desc": "Size of the batch when reading messages from storage. 0 means no limit."
    },
    "enable": {
      "desc": "Enable retainer feature"
    },
    "flow_control": {
      "desc": "Flow control."
    },
    "max_payload_size": {
      "desc": "Maximum retained message size."
    },
    "max_retained_messages": {
      "desc": "Maximum number of retained messages. 0 means no limit."
    },
    "mnesia_config_storage_type": {
      "desc": "Specifies whether the messages are stored in RAM or persisted on disc."
    },
    "mnesia_config_type": {
      "desc": "Backend type."
    },
    "msg_clear_interval": {
      "desc": "Periodic interval for cleaning up expired messages.\nNever clear if the value is 0."
    },
    "msg_expiry_interval": {
      "desc": "Message retention time. 0 means message will never be expired."
    },
    "stop_publish_clear_msg": {
      "desc": "When the retained flag of the `PUBLISH` message is set and Payload is empty,\nwhether to continue to publish the message.\nSee:\nhttp://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718038"
    }
  },
  "emqx_rewrite_api": {
    "list_topic_rewrite_api": {
      "desc": "List all rewrite rules"
    },
    "update_topic_rewrite_api": {
      "desc": "Update all rewrite rules"
    },
    "update_topic_rewrite_api_response413": {
      "desc": "Rules count exceed max limit"
    }
  },
  "emqx_rule_api_schema": {
    "event_action": {
      "desc": "Publish or Subscribe",
      "label": "Publish or Subscribe"
    },
    "event_payload": {
      "desc": "The Message Payload",
      "label": "Message Payload"
    },
    "metrics_actions_failed_out_of_service": {
      "desc": "How much times the rule failed to call actions due to the action is out of service. For example, a bridge is disabled or stopped.",
      "label": "Fail Action"
    },
    "metrics_actions_failed_unknown": {
      "desc": "How much times the rule failed to call actions due to to an unknown error.",
      "label": "Fail Action"
    },
    "event_server": {
      "desc": "The IP address (or hostname) and port of the MQTT broker, in IP:Port format",
      "label": "Server IP And Port"
    },
    "metrics_actions_total": {
      "desc": "How much times the actions are called by the rule. This value may several times of 'matched', depending on the number of the actions of the rule.",
      "label": "Action Total"
    },
    "event_ctx_disconnected_da": {
      "desc": "The Time that this Client is Disconnected",
      "label": "Disconnected Time"
    },
    "event_topic": {
      "desc": "Message Topic",
      "label": "Message Topic"
    },
    "event_peername": {
      "desc": "The IP Address and Port of the Peer Client",
      "label": "IP Address And Port"
    },
    "metrics_sql_passed": {
      "desc": "How much times the SQL is passed",
      "label": "SQL Passed"
    },
    "test_context": {
      "desc": "The context of the event for testing",
      "label": "Event Conetxt"
    },
    "node_node": {
      "desc": "The node name",
      "label": "Node Name"
    },
    "event_from_clientid": {
      "desc": "The Client ID",
      "label": "Client ID"
    },
    "event_keepalive": {
      "desc": "KeepAlive",
      "label": "KeepAlive"
    },
    "event_connected_at": {
      "desc": "The Time that this Client is Connected",
      "label": "Connected Time"
    },
    "metrics_sql_failed_exception": {
      "desc": "How much times the SQL is failed due to exceptions. This may because of a crash when calling a SQL function, or trying to do arithmetic operation on undefined variables",
      "label": "SQL Exception"
    },
    "event_from_username": {
      "desc": "The User Name",
      "label": "Username"
    },
    "event_ctx_connack_reason_code": {
      "desc": "The reason code",
      "label": "Reason Code"
    },
    "rs_description": {
      "desc": "The description",
      "label": "Description"
    },
    "rule_id": {
      "desc": "The ID of the rule",
      "label": "Rule ID"
    },
    "rs_event": {
      "desc": "The event topics",
      "label": "Event Topics"
    },
    "event_sockname": {
      "desc": "The IP Address and Port of the Local Listener",
      "label": "IP Address And Port"
    },
    "event_qos": {
      "desc": "The Message QoS",
      "label": "Message QoS"
    },
    "event_mountpoint": {
      "desc": "The Mountpoint",
      "label": "Mountpoint"
    },
    "rs_title": {
      "desc": "The title",
      "label": "Title"
    },
    "ri_metrics": {
      "desc": "The metrics of the rule",
      "label": "Rule Metrics"
    },
    "event_retain": {
      "desc": "If is a retain message",
      "label": "Retain Message"
    },
    "event_event_type": {
      "desc": "Event Type",
      "label": "Event Type"
    },
    "event_expiry_interval": {
      "desc": "Expiry Interval",
      "label": "Expiry Interval"
    },
    "metrics_sql_matched": {
      "desc": "How much times the FROM clause of the SQL is matched.",
      "label": "Matched"
    },
    "event_clientid": {
      "desc": "The Client ID",
      "label": "Client ID"
    },
    "metrics_actions_success": {
      "desc": "How much times the rule success to call the actions.",
      "label": "Success Action"
    },
    "metrics_actions_failed": {
      "desc": "How much times the rule failed to call the actions.",
      "label": "Failed Action"
    },
    "metrics_sql_matched_rate": {
      "desc": "The rate of matched, times/second",
      "label": "命中速率"
    },
    "event_proto_ver": {
      "desc": "Protocol Version",
      "label": "Protocol Version"
    },
    "event_publish_received_at": {
      "desc": "The Time that this Message is Received",
      "label": "Message Received Time"
    },
    "metrics_sql_matched_rate_last5m": {
      "desc": "The average rate of matched in last 5 minutes, times/second",
      "label": "Average Matched Rate"
    },
    "event_is_bridge": {
      "desc": "Is Bridge",
      "label": "Is Bridge"
    },
    "event_authz_source": {
      "desc": "Cache, Plugs or Default",
      "label": "Auth Source"
    },
    "metrics_sql_failed_unknown": {
      "desc": "How much times the SQL is failed due to an unknown error.",
      "label": "SQL Unknown Error"
    },
    "metrics_sql_failed": {
      "desc": "How much times the SQL is failed",
      "label": "SQL Failed"
    },
    "event_ctx_dropped": {
      "desc": "The Reason for Dropping",
      "label": "Dropped Reason"
    },
    "root_rule_test": {
      "desc": "Schema for testing rules",
      "label": "Rule Test Schema"
    },
    "rs_test_columns": {
      "desc": "The test columns",
      "label": "Test Columns"
    },
    "event_peerhost": {
      "desc": "The IP Address of the Peer Client",
      "label": "Peer IP Address"
    },
    "event_proto_name": {
      "desc": "Protocol Name",
      "label": "Protocol Name"
    },
    "root_rule_events": {
      "desc": "Schema for rule events",
      "label": "Rule Events Schema"
    },
    "rs_sql_example": {
      "desc": "The sql_example",
      "label": "SQL Example"
    },
    "metrics_sql_matched_rate_max": {
      "desc": "The max rate of matched, times/second",
      "label": "Max Matched Rate"
    },
    "event_clean_start": {
      "desc": "Clean Start",
      "label": "Clean Start"
    },
    "ri_created_at": {
      "desc": "The created time of the rule",
      "label": "Rule Create Time"
    },
    "event_dup": {
      "desc": "The DUP flag of the MQTT message",
      "label": "DUP Flag"
    },
    "ri_from": {
      "desc": "The topics of the rule",
      "label": "Topics of Rule"
    },
    "ri_node_metrics": {
      "desc": "The metrics of the rule for each node",
      "label": "Each Node Rule Metrics"
    },
    "root_rule_creation": {
      "desc": "Schema for creating rules",
      "label": "Create Schema"
    },
    "event_result": {
      "desc": "Allow or Deny",
      "label": "Auth Result"
    },
    "event_id": {
      "desc": "Message ID",
      "label": "Message ID"
    },
    "event_username": {
      "desc": "Username",
      "label": "Username"
    },
    "root_rule_info": {
      "desc": "Schema for rule info",
      "label": "Info Schema"
    },
    "rs_columns": {
      "desc": "The columns",
      "label": "Column"
    },
    "test_sql": {
      "desc": "The SQL of the rule for testing",
      "label": "Test SQL"
    },
    "event_ctx_disconnected_reason": {
      "desc": "The Reason for Disconnect",
      "label": "Disconnect Reason"
    }
  },
  "emqx_rule_engine_api": {
    "api1": {
      "desc": "List all rules",
      "label": "List All Rules"
    },
    "api1_enable": {
      "desc": "Filter enable/disable rules"
    },
    "api1_from": {
      "desc": "Filter rules by from(topic), exact match"
    },
    "api1_like_description": {
      "desc": "Filter rules by description, Substring matching"
    },
    "api1_like_from": {
      "desc": "Filter rules by from(topic), Substring matching"
    },
    "api1_like_id": {
      "desc": "Filter rules by id, Substring matching"
    },
    "api1_match_from": {
      "desc": "Filter rules by from(topic), Mqtt topic matching"
    },
    "api2": {
      "desc": "Create a new rule using given Id",
      "label": "Create Rule By ID"
    },
    "api3": {
      "desc": "List all events can be used in rules",
      "label": "List All Events Can Be Used In Rule"
    },
    "api4": {
      "desc": "Get a rule by given Id",
      "label": "Get Rule"
    },
    "api4_1": {
      "desc": "Get a rule's metrics by given Id",
      "label": "Get Metric"
    },
    "api5": {
      "desc": "Update a rule by given Id to all nodes in the cluster",
      "label": "Update Cluster Rule"
    },
    "api6": {
      "desc": "Delete a rule by given Id from all nodes in the cluster",
      "label": "Delete Cluster Rule"
    },
    "api7": {
      "desc": "Reset a rule metrics",
      "label": "Reset Rule Metrics"
    },
    "api8": {
      "desc": "Test a rule",
      "label": "Test Rule"
    },
    "desc9": {
      "desc": "List of rules",
      "label": "List Rules"
    }
  },
  "emqx_rule_engine_schema": {
    "console_function": {
      "desc": "Print the actions to the console",
      "label": "Console Function"
    },
    "desc_builtin_action_console": {
      "desc": "Configuration for a built-in action.",
      "label": "Action Console Configuration"
    },
    "desc_builtin_action_republish": {
      "desc": "Configuration for a built-in action.",
      "label": "Republish Configuration"
    },
    "desc_republish_args": {
      "desc": "The arguments of the built-in 'republish' action.One can use variables in the args.\nThe variables are selected by the rule. For example, if the rule SQL is defined as following:\n<code>\n    SELECT clientid, qos, payload FROM \"t/1\"\n</code>\nThen there are 3 variables available: <code>clientid</code>, <code>qos</code> and\n<code>payload</code>. And if we've set the args to:\n<code>\n    {\n        topic = \"t/${clientid}\"\n        qos = \"${qos}\"\n        payload = \"msg: ${payload}\"\n    }\n</code>\nWhen the rule is triggered by an MQTT message with payload = `hello`, qos = 1,\nclientid = `Steve`, the rule will republish a new MQTT message to topic `t/Steve`,\npayload = `msg: hello`, and `qos = 1`.",
      "label": "Republish Args"
    },
    "desc_rule_engine": {
      "desc": "Configuration for the EMQX Rule Engine.",
      "label": "Rule Engine Configuration"
    },
    "desc_rules": {
      "desc": "Configuration for a rule.",
      "label": "Rule Configuration"
    },
    "desc_user_provided_function": {
      "desc": "Configuration for a built-in action.",
      "label": "User Provid Function Configuration"
    },
    "republish_args_payload": {
      "desc": "The payload of the message to be re-published.\nTemplate with variables is allowed, see description of the 'republish_args'.\nDefaults to ${payload}. If variable ${payload} is not found from the selected result\nof the rule, then the string \"undefined\" is used.",
      "label": "Message Payload"
    },
    "republish_args_qos": {
      "desc": "The qos of the message to be re-published.\nTemplate with variables is allowed, see description of the 'republish_args'.\nDefaults to ${qos}. If variable ${qos} is not found from the selected result of the rule,\n0 is used.",
      "label": "Message QoS"
    },
    "republish_args_retain": {
      "desc": "The 'retain' flag of the message to be re-published.\nTemplate with variables is allowed, see description of the 'republish_args'.\nDefaults to ${retain}. If variable ${retain} is not found from the selected result\nof the rule, false is used.",
      "label": "Retain Flag"
    },
    "republish_args_topic": {
      "desc": "The target topic of message to be re-published.\nTemplate with variables is allowed, see description of the 'republish_args'.",
      "label": "Target Topic"
    },
    "republish_args_user_properties": {
      "desc": "From which variable should the MQTT message's User-Property pairs be taken from.\nThe value must be a map.\nYou may configure it to <code>${pub_props.'User-Property'}</code> or\nuse <code>SELECT *,pub_props.'User-Property' as user_properties</code>\nto forward the original user properties to the republished message.\nYou may also call <code>map_put</code> function like\n<code>map_put('my-prop-name', 'my-prop-value', user_properties) as user_properties</code>\nto inject user properties.\nNOTE: MQTT spec allows duplicated user property names, but EMQX Rule-Engine does not."
    },
    "republish_function": {
      "desc": "Republish the message as a new MQTT message",
      "label": "Republish Function"
    },
    "rule_engine_ignore_sys_message": {
      "desc": "When set to 'true' (default), rule-engine will ignore messages published to $SYS topics.",
      "label": "Ignore Sys Message"
    },
    "rule_engine_jq_function_default_timeout": {
      "desc": "Default timeout for the `jq` rule engine function",
      "label": "Rule engine jq function default timeout"
    },
    "rule_engine_jq_implementation_module": {
      "desc": "The implementation module for the jq rule engine function. The two options are jq_nif and jq_port. With the jq_nif option an Erlang NIF library is used while with the jq_port option an implementation based on Erlang port programs is used. The jq_nif option (the default option) is the fastest implementation of the two but jq_port is safer as the jq programs will not execute in the same process as the Erlang VM.",
      "label": "JQ Implementation Module"
    },
    "rule_engine_rules": {
      "desc": "The rules",
      "label": "Rules"
    },
    "rules_actions": {
      "desc": "A list of actions of the rule.\nAn action can be a string that refers to the channel ID of an EMQX bridge, or an object\nthat refers to a function.\nThere a some built-in functions like \"republish\" and \"console\", and we also support user\nprovided functions in the format: \"{module}:{function}\".\nThe actions in the list are executed sequentially.\nThis means that if one of the action is executing slowly, all the following actions will not\nbe executed until it returns.\nIf one of the action crashed, all other actions come after it will still be executed, in the\noriginal order.\nIf there's any error when running an action, there will be an error message, and the 'failure'\ncounter of the function action or the bridge channel will increase.",
      "label": "Rule Action List"
    },
    "rules_description": {
      "desc": "The description of the rule",
      "label": "Rule Description"
    },
    "rules_enable": {
      "desc": "Enable or disable the rule",
      "label": "Enable Or Disable Rule"
    },
    "rules_metadata": {
      "desc": "Rule metadata, do not change manually",
      "label": "Rule metadata"
    },
    "rules_name": {
      "desc": "The name of the rule",
      "label": "Rule Name"
    },
    "rules_sql": {
      "desc": "SQL query to transform the messages.\nExample: <code>SELECT * FROM \"test/topic\" WHERE payload.x = 1</code>",
      "label": "Rule SQL"
    },
    "user_provided_function_args": {
      "desc": "The args will be passed as the 3rd argument to module:function/3,\ncheckout the function <code>console</code> and <code>republish</code> in the source file:\n<code>apps/emqx_rule_engine/src/emqx_rule_actions.erl</code> as an example.",
      "label": "User Provided Function Args"
    },
    "user_provided_function_function": {
      "desc": "The user provided function. Should be in the format: '{module}:{function}'.\nWhere {module} is the Erlang callback module and {function} is the Erlang function.\n\nTo write your own function, checkout the function <code>console</code> and\n<code>republish</code> in the source file:\n<code>apps/emqx_rule_engine/src/emqx_rule_actions.erl</code> as an example.",
      "label": "User Provided Function"
    }
  },
  "emqx_schema": {
    "fields_mqtt_quic_listener_peer_unidi_stream_count": {
      "desc": "Number of unidirectional streams to allow the peer to open.",
      "label": "Peer unidi stream count"
    },
    "fields_authorization_no_match": {
      "desc": "Default access control action if the user or client matches no ACL rules,\nor if no such user or client is found by the configurable authorization\nsources such as built_in_database, an HTTP API, or a query against PostgreSQL.\nFind more details in 'authorization.sources' config.",
      "label": "Authorization no match"
    },
    "sysmon_top_db_hostname": {
      "desc": "Hostname of the PostgreSQL database that collects the data points",
      "label": "DB Hostname"
    },
    "zones": {
      "desc": "A zone is a set of configs grouped by the zone <code>name</code>.\nFor flexible configuration mapping, the <code>name</code> can be set to a listener's <code>zone</code> config.\nNOTE: A built-in zone named <code>default</code> is auto created and can not be deleted."
    },
    "fields_mqtt_quic_listener_certfile": {
      "desc": "Path to the certificate file. Will be deprecated in 5.1, use .ssl_options.certfile instead.",
      "label": "Certificate file"
    },
    "fields_rate_limit_conn_bytes_in": {
      "desc": "Limit the rate of receiving packets for a MQTT connection.\nThe rate is counted by bytes of packets per second.",
      "label": "Connection bytes in"
    },
    "crl_cache_capacity": {
      "desc": "The maximum number of CRL URLs that can be held in cache.  If the cache is at full capacity and a new URL must be fetched, then it'll evict the oldest inserted URL in the cache.",
      "label": "CRL Cache Capacity"
    },
    "alarm_actions": {
      "desc": "The actions triggered when the alarm is activated.<br/>Currently, the following actions are supported: <code>log</code> and <code>publish</code>.\n<code>log</code> is to write the alarm to log (console or file).\n<code>publish</code> is to publish the alarm as an MQTT message to the system topics:\n<code>$SYS/brokers/emqx@xx.xx.xx.x/alarms/activate</code> and\n<code>$SYS/brokers/emqx@xx.xx.xx.x/alarms/deactivate</code>",
      "label": "Alarm Actions"
    },
    "base_listener_max_connections": {
      "desc": "The maximum number of concurrent connections allowed by the listener.",
      "label": "Max connections"
    },
    "mqtt_peer_cert_as_username": {
      "desc": "Use the CN, DN field in the peer certificate or the entire certificate content as Username. Only works for the TLS connection.\nSupported configurations are the following:\n- <code>cn</code>: CN field of the certificate\n- <code>dn</code>: DN field of the certificate\n- <code>crt</code>: Content of the <code>DER</code> or <code>PEM</code> certificate\n- <code>pem</code>: Convert <code>DER</code> certificate content to <code>PEM</code> format and use as Username\n- <code>md5</code>: MD5 value of the <code>DER</code> or <code>PEM</code> certificate",
      "label": "Use Peer Certificate as Username"
    },
    "fields_cache_enable": {
      "desc": "Enable or disable the authorization cache.",
      "label": "Enable or disable the authorization cache."
    },
    "fields_mqtt_quic_listener_disconnect_timeout_ms": {
      "desc": "How long to wait for an ACK before declaring a path dead and disconnecting. Default: 16000",
      "label": "Disconnect timeout ms"
    },
    "mqtt_max_topic_alias": {
      "desc": "Maximum topic alias, 0 means no topic alias supported.",
      "label": "Max Topic Alias"
    },
    "common_ssl_opts_schema_user_lookup_fun": {
      "desc": "EMQX-internal callback that is used to lookup pre-shared key (PSK) identity.",
      "label": "SSL PSK user lookup fun"
    },
    "fields_listeners_wss": {
      "desc": "HTTPS websocket listeners.",
      "label": "HTTPS websocket listeners"
    },
    "sysmon_top_max_procs": {
      "desc": "Stop collecting data when the number of processes\nin the VM exceeds this value",
      "label": "Max procs"
    },
    "mqtt_use_username_as_clientid": {
      "desc": "Whether to use Username as Client ID.\nThis setting takes effect later than <code>Use Peer Certificate as Username</code> and <code>Use peer certificate as Client ID</code>.",
      "label": "Use Username as Client ID"
    },
    "mqtt_max_qos_allowed": {
      "desc": "Maximum QoS allowed.",
      "label": "Max QoS"
    },
    "fields_mqtt_quic_listener_max_binding_stateless_operations": {
      "desc": "The maximum number of stateless operations that may be queued on a binding at any one time. Default: 100",
      "label": "Max binding stateless operations"
    },
    "fields_mqtt_quic_listener_stream_recv_buffer_default": {
      "desc": "Stream initial buffer size. Default: 4096",
      "label": "Stream recv buffer default"
    },
    "fields_mqtt_quic_listener_pacing_enabled": {
      "desc": "Pace sending to avoid overfilling buffers on the path. Default: 1 (Enabled)",
      "label": "Pacing enabled"
    },
    "mqtt_max_subscriptions": {
      "desc": "Maximum number of subscriptions allowed per client.",
      "label": "Max Subscriptions"
    },
    "persistent_session_builtin_messages_table": {
      "desc": "Performance tuning options for built-in messages table.",
      "label": "Persistent messages"
    },
    "sysmon_os_cpu_low_watermark": {
      "desc": "The threshold, as percentage of system CPU load,\n for how much system cpu can be used before the corresponding alarm is cleared.",
      "label": "CPU low watermark"
    },
    "fields_mqtt_quic_listener_tls_server_max_send_buffer": {
      "desc": "How much Server TLS data to buffer. Default: 8192",
      "label": "TLS server max send buffer"
    },
    "base_listener_bind": {
      "desc": "IP address and port for the listening socket.",
      "label": "IP address and port"
    },
    "server_ssl_opts_schema_handshake_timeout": {
      "desc": "Maximum time duration allowed for the handshake to complete",
      "label": "Handshake timeout"
    },
    "fields_deflate_opts_server_context_takeover": {
      "desc": "Takeover means the compression state is retained between server messages.",
      "label": "Server context takeover"
    },
    "mqtt_session_expiry_interval": {
      "desc": "Specifies how long the session will expire after the connection is disconnected, only for non-MQTT 5.0 connections.",
      "label": "Session Expiry Interval"
    },
    "fields_listener_enabled": {
      "desc": "Enable listener.",
      "label": "Enable listener"
    },
    "mqtt": {
      "desc": "Global MQTT configuration.\nThe configs here work as default values which can be overridden in <code>zone</code> configs"
    },
    "crl_cache_refresh_http_timeout": {
      "desc": "The timeout for the HTTP request when fetching CRLs.  This is a global setting for all listeners.",
      "label": "CRL Cache Refresh HTTP Timeout"
    },
    "fields_tcp_opts_backlog": {
      "desc": "TCP backlog defines the maximum length that the queue of\npending connections can grow to.",
      "label": "TCP backlog length"
    },
    "broker_route_batch_clean": {
      "desc": "Enable batch clean for deleted routes."
    },
    "fields_mqtt_quic_listener_initial_window_packets": {
      "desc": "The size (in packets) of the initial congestion window for a connection. Default: 10",
      "label": "Initial window packets"
    },
    "flapping_detect_enable": {
      "desc": "Enable flapping connection detection feature.",
      "label": "Enable flapping detection"
    },
    "sysmon_top_db_password": {
      "desc": "EMQX user password in the PostgreSQL database",
      "label": "DB Password"
    },
    "fields_ws_opts_check_origins": {
      "desc": "List of allowed origins.<br/>See <code>check_origin_enable</code>.",
      "label": "Allowed origins"
    },
    "fields_deflate_opts_client_context_takeover": {
      "desc": "Takeover means the compression state is retained between client messages.",
      "label": "Client context takeover"
    },
    "base_listener_acceptors": {
      "desc": "The size of the listener's receiving pool.",
      "label": "Acceptors Num"
    },
    "common_ssl_opts_schema_cacertfile": {
      "desc": "Trusted PEM format CA certificates bundle file.<br/>\nThe certificates in this file are used to verify the TLS peer's certificates.\nAppend new certificates to the file if new CAs are to be trusted.\nThere is no need to restart EMQX to have the updated file loaded, because\nthe system regularly checks if file has been updated (and reload).<br/>\nNOTE: invalidating (deleting) a certificate from the file will not affect\nalready established connections.",
      "label": "CACertfile"
    },
    "fields_ws_opts_mqtt_path": {
      "desc": "WebSocket's MQTT protocol path. So the address of EMQX Broker's WebSocket is:\n<code>ws://{ip}:{port}/mqtt</code>",
      "label": "WS MQTT Path"
    },
    "sysmon_os_procmem_high_watermark": {
      "desc": "The threshold, as percentage of system memory,\n for how much system memory can be allocated by one Erlang process before\n the corresponding alarm is raised.",
      "label": "ProcMem high wartermark"
    },
    "fields_listeners_quic": {
      "desc": "QUIC listeners.",
      "label": "QUIC listeners"
    },
    "fields_listeners_ws": {
      "desc": "HTTP websocket listeners.",
      "label": "HTTP websocket listeners"
    },
    "mqtt_retry_interval": {
      "desc": "Retry interval for QoS 1/2 message delivering.",
      "label": "Retry Interval"
    },
    "stats_enable": {
      "desc": "Enable/disable statistic data collection.",
      "label": "Enable/disable statistic data collection."
    },
    "fields_authorization_deny_action": {
      "desc": "The action when the authorization check rejects an operation.",
      "label": "Authorization deny action"
    },
    "fields_deflate_opts_server_max_window_bits": {
      "desc": "Specifies the size of the compression context for the server.",
      "label": "Server compression max window size"
    },
    "client_ssl_opts_schema_server_name_indication": {
      "desc": "Specify the host name to be used in TLS Server Name Indication extension.<br/>\nFor instance, when connecting to \"server.example.net\", the genuine server\nwhich accepts the connection and performs TLS handshake may differ from the\nhost the TLS client initially connects to, e.g. when connecting to an IP address\nor when the host has multiple resolvable DNS records <br/>\nIf not specified, it will default to the host name string which is used\nto establish the connection, unless it is IP addressed used.<br/>\nThe host name is then also used in the host name verification of the peer\ncertificate.<br/> The special value 'disable' prevents the Server Name\nIndication extension from being sent and disables the hostname\nverification check.",
      "label": "Server Name Indication"
    },
    "fields_mqtt_quic_listener_retry_memory_limit": {
      "desc": "The percentage of available memory usable for handshake connections before stateless retry is used. Calculated as `N/65535`. Default: 65",
      "label": "Retry memory limit"
    },
    "force_shutdown_max_message_queue_len": {
      "desc": "Maximum message queue length.",
      "label": "Maximum mailbox queue length of process."
    },
    "sys_heartbeat_interval": {
      "desc": "Time interval for publishing following heartbeat messages:\n  - `$SYS/brokers/<node>/uptime`\n  - `$SYS/brokers/<node>/datetime`"
    },
    "flapping_detect_ban_time": {
      "desc": "How long the flapping clientid will be banned.",
      "label": "Ban time"
    },
    "sysmon_top_num_items": {
      "desc": "The number of top processes per monitoring group",
      "label": "Top num items"
    },
    "persistent_session_builtin_session_table": {
      "desc": "Performance tuning options for built-in session table.",
      "label": "Persistent session"
    },
    "mqtt_upgrade_qos": {
      "desc": "Force upgrade of QoS level according to subscription.",
      "label": "Upgrade QoS"
    },
    "mqtt_shared_subscription": {
      "desc": "Whether to enable support for MQTT shared subscription.",
      "label": "Shared Subscription Available"
    },
    "fields_tcp_opts_sndbuf": {
      "desc": "The TCP send buffer (OS kernel) for the connections.",
      "label": "TCP send buffer"
    },
    "sysmon_os_mem_check_interval": {
      "desc": "The time interval for the periodic memory check.",
      "label": "Mem check interval"
    },
    "server_ssl_opts_schema_gc_after_handshake": {
      "desc": "Memory usage tuning. If enabled, will immediately perform a garbage collection after the TLS/SSL handshake.",
      "label": "Perform GC after handshake"
    },
    "fields_mqtt_quic_listener_ssl_options": {
      "desc": "TLS options for QUIC transport",
      "label": "TLS Options"
    },
    "fields_ws_opts_mqtt_piggyback": {
      "desc": "Whether a WebSocket message is allowed to contain multiple MQTT packets.",
      "label": "MQTT Piggyback"
    },
    "base_listener_mountpoint": {
      "desc": "When publishing or subscribing, prefix all topics with a mountpoint string.\nThe prefixed string will be removed from the topic name when the message\nis delivered to the subscriber. The mountpoint is a way that users can use\nto implement isolation of message routing between different listeners.\nFor example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint`\nset to `some_tenant`, then the client actually subscribes to the topic\n`some_tenant/t`. Similarly, if another client B (connected to the same listener\nas the client A) sends a message to topic `t`, the message is routed\nto all the clients subscribed `some_tenant/t`, so client A will receive the\nmessage, with topic name `t`.<br/>\nSet to `\"\"` to disable the feature.<br/>\n\nVariables in mountpoint string:\n  - <code>${clientid}</code>: clientid\n  - <code>${username}</code>: username",
      "label": "mountpoint"
    },
    "mqtt_max_awaiting_rel": {
      "desc": "For each publisher session, the maximum number of outstanding QoS 2 messages pending on the client to send PUBREL. After reaching this limit, new QoS 2 PUBLISH requests will be rejected with `147(0x93)` until either PUBREL is received or timed out.",
      "label": "Max Awaiting PUBREL"
    },
    "ciphers_schema_quic": {
      "desc": "This config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br/>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br/>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br/>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code><br/>\n\nNOTE: QUIC listener supports only 'tlsv1.3' ciphers",
      "label": ""
    },
    "fields_mqtt_quic_listener_max_bytes_per_key": {
      "desc": "Maximum number of bytes to encrypt with a single 1-RTT encryption key before initiating key update. Default: 274877906944",
      "label": "Max bytes per key"
    },
    "fields_mqtt_quic_listener_mtu_discovery_search_complete_timeout_us": {
      "desc": "The time in microseconds to wait before reattempting MTU probing if max was not reached. Default: 600000000",
      "label": "MTU discovery search complete timeout us"
    },
    "fields_ws_opts_check_origin_enable": {
      "desc": "If <code>true</code>, <code>origin</code> HTTP header will be\n validated against the list of allowed origins configured in <code>check_origins</code>\n parameter.",
      "label": "Check origin"
    },
    "sysmon_vm_busy_dist_port": {
      "desc": "When the RPC connection used to communicate with other nodes in the cluster is overloaded,\nthere will be a <code>busy_dist_port</code> warning log,\nand an MQTT message is published to system topic <code>$SYS/sysmon/busy_dist_port</code>.",
      "label": "Enable Busy Distribution Port monitoring."
    },
    "mqtt_max_mqueue_len": {
      "desc": "Maximum queue length. Enqueued messages when persistent client disconnected, or inflight window is full.",
      "label": "Max Message Queue Length"
    },
    "mqtt_max_inflight": {
      "desc": "Maximum number of QoS 1 and QoS 2 messages that are allowed to be delivered simultaneously before completing the acknowledgment.",
      "label": "Max Inflight"
    },
    "persistent_session_store_enabled": {
      "desc": "Use the database to store information about persistent sessions.\nThis makes it possible to migrate a client connection to another\ncluster node if a node is stopped.",
      "label": "Enable persistent session store"
    },
    "fields_deflate_opts_level": {
      "desc": "Compression level.",
      "label": "Compression level"
    },
    "mqtt_server_keepalive": {
      "desc": "The keep alive duration required by EMQX. To use the setting from the client side, choose disabled from the drop-down list. Only applicable to MQTT 5.0 clients.",
      "label": "Server Keep Alive"
    },
    "global_authentication": {
      "desc": "Default authentication configs for all MQTT listeners.\n\nFor per-listener overrides see <code>authentication</code> in listener configs\n\nThis option can be configured with:\n<ul>\n  <li><code>[]</code>: The default value, it allows *ALL* logins</li>\n  <li>one: For example <code>{enable:true,backend:\"built_in_database\",mechanism=\"password_based\"}</code></li>\n  <li>chain: An array of structs.</li>\n</ul>\n\nWhen a chain is configured, the login credentials are checked against the backends per the configured order, until an 'allow' or 'deny' decision can be made.\n\nIf there is no decision after a full chain exhaustion, the login is rejected."
    },
    "fields_mqtt_quic_listener_load_balancing_mode": {
      "desc": "0: Disabled, 1: SERVER_ID_IP, 2: SERVER_ID_FIXED. default: 0",
      "label": "Load balancing mode"
    },
    "persistent_session_store_session_message_gc_interval": {
      "desc": "The starting interval for garbage collection of transient data for\npersistent session messages. This does not affect the lifetime length\nof persistent session messages.",
      "label": "Session message GC interval"
    },
    "server_ssl_opts_schema_ocsp_refresh_http_timeout": {
      "desc": "The timeout for the HTTP request when checking OCSP responses.",
      "label": "OCSP Refresh HTTP Timeout"
    },
    "fields_tcp_opts_send_timeout": {
      "desc": "The TCP send timeout for the connections.",
      "label": "TCP send timeout"
    },
    "sysmon_vm_process_high_watermark": {
      "desc": "The threshold, as percentage of processes, for how many\n processes can simultaneously exist at the local node before the corresponding\n alarm is raised.",
      "label": "Process high watermark"
    },
    "fields_tcp_opts_buffer": {
      "desc": "The size of the user-space buffer used by the driver.",
      "label": "TCP user-space buffer"
    },
    "server_ssl_opts_schema_honor_cipher_order": {
      "desc": "An important security setting, it forces the cipher to be set based\n on the server-specified order instead of the client-specified order,\n hence enforcing the (usually more properly configured) security\n ordering of the server administrator.",
      "label": "SSL honor cipher order"
    },
    "conn_congestion_min_alarm_sustain_duration": {
      "desc": "Minimal time before clearing the alarm.<br/>The alarm is cleared only when there's no pending data in<br/>the queue, and at least <code>min_alarm_sustain_duration</code>milliseconds passed since the last time we considered the connection 'congested'.<br/>This is to avoid clearing and raising the alarm again too often.",
      "label": "Sustain duration"
    },
    "fields_mqtt_quic_listener_keep_alive_interval_ms": {
      "desc": "How often to send PING frames to keep a connection alive.",
      "label": "Keep alive interval ms"
    },
    "fields_mqtt_quic_listener_handshake_idle_timeout_ms": {
      "desc": "How long a handshake can idle before it is discarded",
      "label": "Handshake idle timeout ms"
    },
    "broker_session_locking_strategy": {
      "desc": "Session locking strategy in a cluster.\n  - `local`: only lock the session on the current node\n  - `one`: select only one remote node to lock the session\n  - `quorum`: select some nodes to lock the session\n  - `all`: lock the session on all the nodes in the cluster"
    },
    "persistent_store_ram_cache": {
      "desc": "Maintain a copy of the data in RAM for faster access.",
      "label": "RAM cache"
    },
    "fields_mqtt_quic_listener_stream_recv_window_default": {
      "desc": "Initial stream receive window size. Default: 32678",
      "label": "Stream recv window default"
    },
    "mqtt_mqueue_priorities": {
      "desc": "Topic priorities. Priority number [1-255]\nThere's no priority table by default, hence all messages are treated equal.\n\n**NOTE**: Comma and equal signs are not allowed for priority topic names.\n**NOTE**: Messages for topics not in the priority table are treated as either highest or lowest priority depending on the configured value for <code>mqtt.mqueue_default_priority</code>.\n\n**Examples**:\nTo configure <code>\"topic/1\" > \"topic/2\"</code>:\n<code>mqueue_priorities: {\"topic/1\": 10, \"topic/2\": 8}</code>",
      "label": "Topic Priorities"
    },
    "fields_rate_limit_conn_messages_in": {
      "desc": "Message limit for the external MQTT connections.",
      "label": "connecting messages in"
    },
    "fields_rate_limit_max_conn_rate": {
      "desc": "Maximum connections per second.",
      "label": "Max connection rate"
    },
    "alarm_size_limit": {
      "desc": "The maximum total number of deactivated alarms to keep as history.<br/>When this limit is exceeded, the oldest deactivated alarms are deleted to cap the total number.",
      "label": "Alarm size limit"
    },
    "fields_cache_max_size": {
      "desc": "Maximum number of cached items.",
      "label": "Maximum number of cached items."
    },
    "fields_listeners_tcp": {
      "desc": "TCP listeners.",
      "label": "TCP listeners"
    },
    "conn_congestion_enable_alarm": {
      "desc": "Enable or disable connection congestion alarm.",
      "label": "Enable/disable congestion alarm"
    },
    "fields_ws_opts_proxy_port_header": {
      "desc": "HTTP header used to pass information about the client port. Relevant when the EMQX cluster is deployed behind a load-balancer.",
      "label": "Proxy port header"
    },
    "overload_protection_enable": {
      "desc": "React on system overload or not.",
      "label": "React on system overload or not"
    },
    "fields_mqtt_quic_listener_minimum_mtu": {
      "desc": "The minimum MTU supported by a connection. This will be used as the starting MTU. Default: 1248",
      "label": "Minimum MTU"
    },
    "sys_msg_interval": {
      "desc": "Time interval of publishing `$SYS` messages."
    },
    "mqtt_await_rel_timeout": {
      "desc": "For client to broker QoS 2 message, the time limit for the broker to wait before the `PUBREL` message is received. The wait is aborted after timed out, meaning the packet ID is freed for new `PUBLISH` requests. Receiving a stale `PUBREL` causes a warning level log. Note, the message is delivered to subscribers before entering the wait for PUBREL.",
      "label": "Max Awaiting PUBREL TIMEOUT"
    },
    "common_ssl_opts_schema_verify": {
      "desc": "Enable or disable peer verification.",
      "label": "Verify peer"
    },
    "fields_listeners_ssl": {
      "desc": "SSL listeners.",
      "label": "SSL listeners"
    },
    "fields_deflate_opts_client_max_window_bits": {
      "desc": "Specifies the size of the compression context for the client.",
      "label": "Client compression max window size"
    },
    "common_ssl_opts_schema_keyfile": {
      "desc": "PEM format private key file.",
      "label": "Keyfile"
    },
    "sysmon_os_cpu_high_watermark": {
      "desc": "The threshold, as percentage of system CPU load,\n for how much system cpu can be used before the corresponding alarm is raised.",
      "label": "CPU high watermark"
    },
    "flapping_detect_window_time": {
      "desc": "The time window for flapping detection.",
      "label": "Window time"
    },
    "mqtt_mqueue_default_priority": {
      "desc": "Default topic priority, which will be used by topics not in <code>Topic Priorities</code> (<code>mqueue_priorities</code>).",
      "label": "Default Topic Priorities"
    },
    "client_ssl_opts_schema_enable": {
      "desc": "Enable TLS.",
      "label": "Enable TLS."
    },
    "fields_mqtt_quic_listener_mtu_discovery_missing_probe_count": {
      "desc": "The maximum number of stateless operations that may be queued on a binding at any one time. Default: 3",
      "label": "MTU discovery missing probe count"
    },
    "fields_tcp_opts_recbuf": {
      "desc": "The TCP receive buffer (OS kernel) for the connections.",
      "label": "TCP receive buffer"
    },
    "sysmon_vm_process_check_interval": {
      "desc": "The time interval for the periodic process limit check.",
      "label": "Process limit check interval"
    },
    "fields_mqtt_quic_listener_server_resumption_level": {
      "desc": "Controls resumption tickets and/or 0-RTT server support. Default: 0 (No resumption)",
      "label": "Server resumption level"
    },
    "fields_ws_opts_proxy_address_header": {
      "desc": "HTTP header used to pass information about the client IP address.\nRelevant when the EMQX cluster is deployed behind a load-balancer.",
      "label": "Proxy address header"
    },
    "sysmon_os_sysmem_high_watermark": {
      "desc": "The threshold, as percentage of system memory,\n for how much system memory can be allocated before the corresponding alarm is raised.",
      "label": "SysMem high wartermark"
    },
    "fields_tcp_opts_high_watermark": {
      "desc": "The socket is set to a busy state when the amount of data queued internally\nby the VM socket implementation reaches this limit.",
      "label": "TCP 高水位线"
    },
    "fields_mqtt_quic_listener_stateless_operation_expiration_ms": {
      "desc": "The time limit between operations for the same endpoint, in milliseconds. Default: 100",
      "label": "Stateless operation expiration ms"
    },
    "server_ssl_opts_schema_dhfile": {
      "desc": "Path to a file containing PEM-encoded Diffie-Hellman parameters\nto be used by the server if a cipher suite using Diffie-Hellman\nkey exchange is negotiated. If not specified, default parameters\nare used.<br/>\nNOTE: The <code>dhfile</code> option is not supported by TLS 1.3.",
      "label": "SSL dhfile"
    },
    "flapping_detect_max_count": {
      "desc": "The maximum number of disconnects allowed for a MQTT Client in `window_time`",
      "label": "Max count"
    },
    "mqtt_max_topic_levels": {
      "desc": "Maximum topic levels allowed.",
      "label": "Max Topic Levels"
    },
    "force_shutdown_max_heap_size": {
      "desc": "Total heap size",
      "label": "Total heap size"
    },
    "persistent_store_on_disc": {
      "desc": "Save information about the persistent sessions on disc.\nIf this option is enabled, persistent sessions will survive full restart of the cluster.\nOtherwise, all the data will be stored in RAM, and it will be lost when all the nodes in the cluster are stopped.",
      "label": "Persist on disc"
    },
    "mqtt_ignore_loop_deliver": {
      "desc": "Whether the messages sent by the MQTT v3.1.1/v3.1.0 client will be looped back to the publisher itself, similar to <code>No Local</code> in MQTT 5.0.",
      "label": "Ignore Loop Deliver"
    },
    "common_ssl_opts_schema_certfile": {
      "desc": "PEM format certificates chain file.<br/>\nThe certificates in this file should be in reversed order of the certificate\nissue chain. That is, the host's certificate should be placed in the beginning\nof the file, followed by the immediate issuer certificate and so on.\nAlthough the root CA certificate is optional, it should be placed at the end of\nthe file if it is to be added.",
      "label": "Certfile"
    },
    "mqtt_exclusive_subscription": {
      "desc": "Whether to enable support for MQTT exclusive subscription.",
      "label": "Exclusive Subscription"
    },
    "mqtt_retain_available": {
      "desc": "Whether to enable support for MQTT retained message.",
      "label": "Retain Available"
    },
    "fields_tcp_opts_reuseaddr": {
      "desc": "The SO_REUSEADDR flag for the connections.",
      "label": "SO_REUSEADDR"
    },
    "sysmon_vm_long_schedule": {
      "desc": "When the Erlang VM detect a task scheduled for too long, a warning level 'long_schedule' log is emitted,\nand an MQTT message is published to the system topic <code>$SYS/sysmon/long_schedule</code>.",
      "label": "Enable Long Schedule monitoring."
    },
    "mqtt_keepalive_backoff": {
      "desc": "The coefficient EMQX uses to confirm whether the keep alive duration of the client expires. Formula: Keep Alive * Backoff * 2",
      "label": "Keep Alive Backoff"
    },
    "force_gc_bytes": {
      "desc": "GC the process after specified number of bytes have passed through.",
      "label": "Process GC bytes"
    },
    "server_ssl_opts_schema_fail_if_no_peer_cert": {
      "desc": "Used together with {verify, verify_peer} by an TLS/DTLS server.\nIf set to true, the server fails if the client does not have a\ncertificate to send, that is, sends an empty certificate.\nIf set to false, it fails only if the client sends an invalid\ncertificate (an empty certificate is considered valid).",
      "label": "SSL fail if no peer cert"
    },
    "fields_ws_opts_compress": {
      "desc": "If <code>true</code>, compress WebSocket messages using <code>zlib</code>.<br/>\nThe configuration items under <code>deflate_opts</code> belong to the compression-related parameter configuration.",
      "label": "Ws compress"
    },
    "fields_mqtt_quic_listener_keep_alive_interval": {
      "desc": "How often to send PING frames to keep a connection alive. 0 means disabled.",
      "label": "Keep Alive Interval"
    },
    "fields_cache_ttl": {
      "desc": "Time to live for the cached data.",
      "label": "Time to live for the cached data."
    },
    "sys_topics": {
      "desc": "System topics configuration."
    },
    "sys_event_client_subscribed": {
      "desc": "Enable to publish event message that client subscribed a topic successfully."
    },
    "sysmon_top_db_port": {
      "desc": "Port of the PostgreSQL database that collects the data points.",
      "label": "DB Port"
    },
    "fields_mqtt_quic_listener_max_operations_per_drain": {
      "desc": "The maximum number of operations to drain per connection quantum. Default: 16",
      "label": "Max operations per drain"
    },
    "fields_mqtt_quic_listener_datagram_receive_enabled": {
      "desc": "Advertise support for QUIC datagram extension. Reserve for the future. Default 0 (FALSE)",
      "label": "Datagram receive enabled"
    },
    "fields_mqtt_quic_listener_initial_rtt_ms": {
      "desc": "Initial RTT estimate.",
      "label": "Initial RTT ms"
    },
    "overload_protection_backoff_gc": {
      "desc": "When at high load, skip forceful GC.",
      "label": "Skip GC"
    },
    "broker_perf_route_lock_type": {
      "desc": "Performance tuning for subscribing/unsubscribing a wildcard topic.\nChange this parameter only when there are many wildcard topics.\n\nNOTE: when changing from/to `global` lock, it requires all nodes in the cluster to be stopped before the change.\n  - `key`: mnesia transactional updates with per-key locks. Recommended for a single-node setup.\n  - `tab`: mnesia transactional updates with table lock. Recommended for a cluster setup.\n  - `global`: updates are protected with a global lock. Recommended for large clusters."
    },
    "fields_tcp_opts_nodelay": {
      "desc": "The TCP_NODELAY flag for the connections.",
      "label": "TCP_NODELAY"
    },
    "sysmon_top_db_username": {
      "desc": "Username of the PostgreSQL database",
      "label": "DB Username"
    },
    "broker": {
      "desc": "Message broker options."
    },
    "force_gc_count": {
      "desc": "GC the process after this many received messages.",
      "label": "Process GC messages num"
    },
    "mqtt_max_clientid_len": {
      "desc": "Maximum allowed length of MQTT Client ID.",
      "label": "Max Client ID Length"
    },
    "fields_ws_opts_supported_subprotocols": {
      "desc": "Comma-separated list of supported subprotocols.",
      "label": "Supported subprotocols"
    },
    "broker_shared_subscription_strategy": {
      "desc": "Dispatch strategy for shared subscription.\n  - `random`: dispatch the message to a random selected subscriber\n  - `round_robin`: select the subscribers in a round-robin manner\n  - `round_robin_per_group`: select the subscribers in round-robin fashion within each shared subscriber group\n  - `local`: select random local subscriber otherwise select random cluster-wide\n  - `sticky`: always use the last selected subscriber to dispatch, until the subscriber disconnects.\n  - `hash_clientid`: select the subscribers by hashing the `clientIds`\n  - `hash_topic`: select the subscribers by hashing the source topic"
    },
    "fields_deflate_opts_mem_level": {
      "desc": "Specifies the size of the compression state.<br/>\nLower values decrease memory usage per connection.",
      "label": "Size of the compression state"
    },
    "fields_mqtt_quic_listener_send_idle_timeout_ms": {
      "desc": "Reset congestion control after being idle for amount of time. Default: 1000",
      "label": "Send idle timeout ms"
    },
    "base_listener_limiter": {
      "desc": "Type of the rate limit.",
      "label": "Type of the rate limit."
    },
    "persistent_session_store_backend": {
      "desc": "Database management system used to store information about persistent sessions and messages.\n- `builtin`: Use the embedded database (mria)",
      "label": "Backend"
    },
    "alarm_validity_period": {
      "desc": "Retention time of deactivated alarms. Alarms are not deleted immediately\nwhen deactivated, but after the retention time.",
      "label": "Alarm validity period"
    },
    "server_ssl_opts_schema_ocsp_issuer_pem": {
      "desc": "PEM-encoded certificate of the OCSP issuer for the server certificate.",
      "label": "OCSP Issuer Certificate"
    },
    "fields_tcp_opts_active_n": {
      "desc": "Specify the {active, N} option for this Socket.<br/>\nSee: https://erlang.org/doc/man/inet.html#setopts-2",
      "label": "active_n"
    },
    "listener_authentication": {
      "desc": "Per-listener authentication override.\nAuthentication can be one single authenticator instance or a chain of authenticators as an array.\nWhen authenticating a login (username, client ID, etc.) the authenticators are checked in the configured order.",
      "label": "Per-listener authentication override"
    },
    "fields_trace_payload_encode": {
      "desc": "Determine the format of the payload format in the trace file.<br/>\n`text`: Text-based protocol or plain text protocol.\n It is recommended when payload is JSON encoded.<br/>\n`hex`: Binary hexadecimal encode. It is recommended when payload is a custom binary protocol.<br/>\n`hidden`: payload is obfuscated as `******`",
      "label": "Payload encode"
    },
    "mqtt_response_information": {
      "desc": "UTF-8 string, for creating the response topic, for example, if set to <code>reqrsp/</code>, the publisher/subscriber will communicate using the topic prefix <code>reqrsp/</code>.\nTo disable this feature, input <code>\"\"</code> in the text box below. Only applicable to MQTT 5.0 clients.",
      "label": "Response Information"
    },
    "persistent_session_store_max_retain_undelivered": {
      "desc": "The time messages that was not delivered to a persistent session\nis stored before being garbage collected if the node the previous\nsession was handled on restarts of is stopped.",
      "label": "Max retain undelivered"
    },
    "fields_mqtt_quic_listener_migration_enabled": {
      "desc": "Enable clients to migrate IP addresses and tuples. Requires a cooperative load-balancer, or no load-balancer. Default: 1 (Enabled)",
      "label": "Migration enabled"
    },
    "common_ssl_opts_schema_password": {
      "desc": "String containing the user's password. Only used if the private key file is password-protected.",
      "label": "Keyfile passphrase"
    },
    "common_ssl_opts_schema_hibernate_after": {
      "desc": "Hibernate the SSL process after idling for amount of time reducing its memory footprint.",
      "label": "hibernate after"
    },
    "fields_mqtt_quic_listener_send_buffering_enabled": {
      "desc": "Buffer send data instead of holding application buffers until sent data is acknowledged. Default: 1 (Enabled)",
      "label": "Send buffering enabled"
    },
    "sys_event_client_unsubscribed": {
      "desc": "Enable to publish event message that client unsubscribed a topic successfully."
    },
    "overload_protection_backoff_new_conn": {
      "desc": "When at high load, close new incoming connections.",
      "label": "Close new connections"
    },
    "server_ssl_opts_schema_ocsp_responder_url": {
      "desc": "URL for the OCSP responder to check the server certificate against.",
      "label": "OCSP Responder URL"
    },
    "mqtt_idle_timeout": {
      "desc": "Configure the duration of time that a connection can remain idle (i.e., without any data transfer) before being:\n  - Automatically disconnected  if no CONNECT package is received from the client yet.\n  - Put into hibernation mode to save resources if some CONNECT packages are already received.\nNote: Please set the parameter with caution as long idle time will lead to resource waste.",
      "label": "Idle Timeout"
    },
    "fields_mqtt_quic_listener_conn_flow_control_window": {
      "desc": "Connection-wide flow control window. Default: 16777216",
      "label": "Conn flow control window"
    },
    "fields_mqtt_quic_listener_maximum_mtu": {
      "desc": "The maximum MTU supported by a connection. This will be the maximum probed value. Default: 1500",
      "label": "Maximum MTU"
    },
    "sysmon_top_db_name": {
      "desc": "PostgreSQL database name",
      "label": "DB Name"
    },
    "mqtt_strict_mode": {
      "desc": "Whether to parse MQTT messages in strict mode.\nIn strict mode, invalid utf8 strings in for example client ID, topic name, etc. will cause the client to be disconnected.",
      "label": "Strict Mode"
    },
    "shared_subscription_group_strategy": {
      "desc": "Per group dispatch strategy for shared subscription.\nThis config is a map from shared subscription group name to the strategy\nname. The group name should be of format `[A-Za-z0-9]`. i.e. no\nspecial characters are allowed."
    },
    "fields_deflate_opts_strategy": {
      "desc": "Specifies the compression strategy.",
      "label": "compression strategy"
    },
    "shared_subscription_strategy_enum": {
      "desc": "Dispatch strategy for shared subscription.\n- `random`: dispatch the message to a random selected subscriber\n- `round_robin`: select the subscribers in a round-robin manner\n- `round_robin_per_group`: select the subscribers in round-robin fashion within each shared subscriber group\n- `sticky`: always use the last selected subscriber to dispatch,\nuntil the subscriber disconnects.\n- `hash`: select the subscribers by the hash of `clientIds`\n- `local`: send to a random local subscriber. If local\nsubscriber was not found, send to a random subscriber cluster-wide"
    },
    "persistent_session_builtin_sess_msg_table": {
      "desc": "Performance tuning options for built-in session messages table.",
      "label": "Persistent session messages"
    },
    "mqtt_mqueue_store_qos0": {
      "desc": "Specifies whether to store QoS 0 messages in the message queue while the connection is down but the session remains.",
      "label": "Store QoS 0 Message"
    },
    "server_ssl_opts_schema_client_renegotiation": {
      "desc": "In protocols that support client-initiated renegotiation,\nthe cost of resources of such an operation is higher for the server than the client.\nThis can act as a vector for denial of service attacks.\nThe SSL application already takes measures to counter-act such attempts,\nbut client-initiated renegotiation can be strictly disabled by setting this option to false.\nThe default value is true. Note that disabling renegotiation can result in\nlong-lived connections becoming unusable due to limits on\nthe number of messages the underlying cipher suite can encipher.",
      "label": "SSL client renegotiation"
    },
    "server_ssl_opts_schema_enable_crl_check": {
      "desc": "Whether to enable CRL verification for this listener.",
      "label": "Enable CRL Check"
    },
    "fields_mqtt_quic_listener_peer_bidi_stream_count": {
      "desc": "Number of bidirectional streams to allow the peer to open.",
      "label": "Peer bidi stream count"
    },
    "fields_mqtt_quic_listener_max_stateless_operations": {
      "desc": "The maximum number of stateless operations that may be queued on a worker at any one time. Default: 16",
      "label": "Max stateless operations"
    },
    "fields_ws_opts_idle_timeout": {
      "desc": "Close transport-layer connections from the clients that have not sent MQTT CONNECT message within this interval.",
      "label": "WS idle timeout"
    },
    "fields_mqtt_quic_listener_max_ack_delay_ms": {
      "desc": "How long to wait after receiving data before sending an ACK. Default: 25",
      "label": "Max ack delay ms"
    },
    "base_listener_zone": {
      "desc": "The configuration zone to which the listener belongs.",
      "label": "Zone"
    },
    "fields_mqtt_quic_listener_handshake_idle_timeout": {
      "desc": "How long a handshake can idle before it is discarded.",
      "label": "Handshake Idle Timeout"
    },
    "force_gc_enable": {
      "desc": "Enable forced garbage collection.",
      "label": "Enable forced garbage collection"
    },
    "fields_ws_opts_allow_origin_absence": {
      "desc": "If <code>false</code> and <code>check_origin_enable</code> is\n <code>true</code>, the server will reject requests that don't have <code>origin</code>\n HTTP header.",
      "label": "Allow origin absence"
    },
    "common_ssl_opts_schema_versions": {
      "desc": "All TLS/DTLS versions to be supported.<br/>\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/>\nIn case PSK cipher suites are intended, make sure to configure\n<code>['tlsv1.2', 'tlsv1.1']</code> here.",
      "label": "SSL versions"
    },
    "mqtt_listener_proxy_protocol_timeout": {
      "desc": "Timeout for proxy protocol. EMQX will close the TCP connection if proxy protocol packet is not received within the timeout.",
      "label": "Proxy protocol timeout"
    },
    "fields_mqtt_quic_listener_idle_timeout": {
      "desc": "How long a connection can go idle before it is gracefully shut down. 0 to disable",
      "label": "Idle Timeout"
    },
    "common_ssl_opts_schema_secure_renegotiate": {
      "desc": "SSL parameter renegotiation is a feature that allows a client and a server\nto renegotiate the parameters of the SSL connection on the fly.\nRFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,\nyou drop support for the insecure renegotiation, prone to MitM attacks.",
      "label": "SSL renegotiate"
    },
    "sysmon_vm_busy_port": {
      "desc": "When a port (e.g. TCP socket) is overloaded, there will be a <code>busy_port</code> warning log,\nand an MQTT message is published to the system topic <code>$SYS/sysmon/busy_port</code>.",
      "label": "Enable Busy Port monitoring."
    },
    "sys_event_client_connected": {
      "desc": "Enable to publish client connected event messages"
    },
    "sysmon_vm_process_low_watermark": {
      "desc": "The threshold, as percentage of processes, for how many\n processes can simultaneously exist at the local node before the corresponding\n alarm is cleared.",
      "label": "Process low watermark"
    },
    "mqtt_max_packet_size": {
      "desc": "Maximum MQTT packet size allowed.",
      "label": "Max Packet Size"
    },
    "common_ssl_opts_schema_reuse_sessions": {
      "desc": "Enable TLS session reuse.",
      "label": "TLS session reuse"
    },
    "common_ssl_opts_schema_depth": {
      "desc": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.\nSo, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/>\nif 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/>\nif 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.",
      "label": "CACert Depth"
    },
    "sysmon_vm_long_gc": {
      "desc": "When an Erlang process spends long time to perform garbage collection, a warning level <code>long_gc</code> log is emitted,\nand an MQTT message is published to the system topic <code>$SYS/sysmon/long_gc</code>.",
      "label": "Enable Long GC monitoring."
    },
    "fields_mqtt_quic_listener_keyfile": {
      "desc": "Path to the secret key file. Will be deprecated in 5.1, use .ssl_options.keyfile instead.",
      "label": "Key file"
    },
    "mqtt_peer_cert_as_clientid": {
      "desc": "Use the CN, DN field in the peer certificate or the entire certificate content as Client ID. Only works for the TLS connection.\nSupported configurations are the following:\n- <code>cn</code>: CN field of the certificate\n- <code>dn</code>: DN field of the certificate\n- <code>crt</code>: <code>DER</code> or <code>PEM</code> certificate\n- <code>pem</code>: Convert <code>DER</code> certificate content to <code>PEM</code> format and use as Client ID\n- <code>md5</code>: MD5 value of the <code>DER</code> or <code>PEM</code> certificate",
      "label": "Use Peer Certificate as Client ID"
    },
    "persistent_session_store_message_gc_interval": {
      "desc": "The starting interval for garbage collection of undelivered messages to\na persistent session. This affects how often the \"max_retain_undelivered\"\nis checked for removal.",
      "label": "Message GC interval"
    },
    "broker_shared_dispatch_ack_enabled": {
      "desc": "Deprecated, will be removed in 5.1.\nEnable/disable shared dispatch acknowledgement for QoS 1 and QoS 2 messages.\nThis should allow messages to be dispatched to a different subscriber in the group in case the picked (based on `shared_subscription_strategy`) subscriber is offline."
    },
    "base_listener_enable_authn": {
      "desc": "Set <code>true</code> (default) to enable client authentication on this listener, the authentication\nprocess goes through the configured authentication chain.\nWhen set to <code>false</code> to allow any clients with or without authentication information such as username or password to log in.\nWhen set to <code>quick_deny_anonymous</code>, it behaves like when set to <code>true</code>, but clients will be\ndenied immediately without going through any authenticators if <code>username</code> is not provided. This is useful to fence off\nanonymous clients early.",
      "label": "Enable authentication"
    },
    "force_shutdown_enable": {
      "desc": "Enable `force_shutdown` feature.",
      "label": "Enable `force_shutdown` feature"
    },
    "broker_enable_session_registry": {
      "desc": "Enable session registry"
    },
    "overload_protection_backoff_delay": {
      "desc": "The maximum duration of delay for background task execution during high load conditions.",
      "label": "Delay Time"
    },
    "ciphers_schema_common": {
      "desc": "This config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br/>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br/>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br/>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
      "label": ""
    },
    "sys_event_client_disconnected": {
      "desc": "Enable to publish client disconnected event messages."
    },
    "crl_cache_refresh_interval": {
      "desc": "The period to refresh the CRLs from the servers.  This is a global setting for all URLs and listeners.",
      "label": "CRL Cache Refresh Interval"
    },
    "mqtt_listener_proxy_protocol": {
      "desc": "Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed behind HAProxy or Nginx.<br/>\nSee: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
      "label": "Proxy protocol"
    },
    "mqtt_listener_access_rules": {
      "desc": "The access control rules for this listener.<br/>See: https://github.com/emqtt/esockd#allowdeny",
      "label": "Access rules"
    },
    "server_ssl_opts_schema_enable_ocsp_stapling": {
      "desc": "Whether to enable Online Certificate Status Protocol (OCSP) stapling for the listener.  If set to true, requires defining the OCSP responder URL and issuer PEM path.",
      "label": "Enable OCSP Stapling"
    },
    "fields_tcp_opts_send_timeout_close": {
      "desc": "Close the connection if send timeout.",
      "label": "TCP send timeout close"
    },
    "sysmon_os_cpu_check_interval": {
      "desc": "The time interval for the periodic CPU check.",
      "label": "The time interval for the periodic CPU check."
    },
    "sysmon_top_sample_interval": {
      "desc": "Specifies how often process top should be collected",
      "label": "Top sample interval"
    },
    "fields_mqtt_quic_listener_idle_timeout_ms": {
      "desc": "How long a connection can go idle before it is gracefully shut down. 0 to disable timeout",
      "label": "Idle timeout ms"
    },
    "fields_ws_opts_fail_if_no_subprotocol": {
      "desc": "If <code>true</code>, the server will return an error when\n the client does not carry the <code>Sec-WebSocket-Protocol</code> field.\n <br/>Note: WeChat applet needs to disable this verification.",
      "label": "Fail if no subprotocol"
    },
    "mqtt_wildcard_subscription": {
      "desc": "Whether to enable support for MQTT wildcard subscription.",
      "label": "Wildcard Subscription Available"
    },
    "server_ssl_opts_schema_ocsp_refresh_interval": {
      "desc": "The period to refresh the OCSP response for the server.",
      "label": "OCSP Refresh Interval"
    },
    "overload_protection_backoff_hibernation": {
      "desc": "When at high load, skip process hibernation.",
      "label": "Skip hibernation"
    },
    "fields_ws_opts_max_frame_size": {
      "desc": "The maximum length of a single MQTT packet.",
      "label": "Max frame size"
    },
    "sys_event_messages": {
      "desc": "Client events messages."
    },
    "broker_perf_trie_compaction": {
      "desc": "Enable trie path compaction.\nEnabling it significantly improves wildcard topic subscribe rate, if wildcard topics have unique prefixes like: 'sensor/{{id}}/+/', where ID is unique per subscriber.\nTopic match performance (when publishing) may degrade if messages are mostly published to topics with large number of levels.\n\nNOTE: This is a cluster-wide configuration. It requires all nodes to be stopped before changing it."
    },
    "sysmon_vm_large_heap": {
      "desc": "When an Erlang process consumed a large amount of memory for its heap space,\nthe system will write a warning level <code>large_heap</code> log, and an MQTT message is published to\nthe system topic <code>$SYS/sysmon/large_heap</code>.",
      "label": "Enable Large Heap monitoring."
    }
  },
  "emqx_slow_subs_api": {
    "clear_records_api": {
      "desc": "Clear current data and re count slow topic"
    },
    "clientid": {
      "desc": "Message clientid"
    },
    "get_records_api": {
      "desc": "View slow topics statistics record data"
    },
    "get_setting_api": {
      "desc": "View slow subs settings"
    },
    "last_update_time": {
      "desc": "The timestamp of last update"
    },
    "node": {
      "desc": "Message node name"
    },
    "timespan": {
      "desc": "Timespan for message transmission"
    },
    "topic": {
      "desc": "Message topic"
    },
    "update_setting_api": {
      "desc": "Update slow subs settings"
    }
  },
  "emqx_slow_subs_schema": {
    "enable": {
      "desc": "Enable this feature"
    },
    "expire_interval": {
      "desc": "The eviction time of the record, which in the statistics record table"
    },
    "stats_type": {
      "desc": "The method to calculate the latency"
    },
    "threshold": {
      "desc": "The latency threshold for statistics"
    },
    "top_k_num": {
      "desc": "The maximum number of records in the slow subscription statistics record table"
    }
  },
  "emqx_statsd_api": {
    "get_statsd_config_api": {
      "desc": "List the configuration of StatsD metrics collection and push service."
    },
    "update_statsd_config_api": {
      "desc": "Update the configuration of StatsD metrics collection and push service."
    }
  },
  "emqx_statsd_schema": {
    "enable": {
      "desc": "Enable or disable StatsD metrics collection and push service."
    },
    "flush_interval": {
      "desc": "The push interval for metrics."
    },
    "get_statsd_config_api": {
      "desc": "List the configuration of StatsD metrics collection and push service."
    },
    "sample_interval": {
      "desc": "The sampling interval for metrics."
    },
    "server": {
      "desc": "StatsD server address."
    },
    "statsd": {
      "desc": "StatsD metrics collection and push configuration.",
      "label": "StatsD"
    },
    "tags": {
      "desc": "The tags for metrics."
    },
    "update_statsd_config_api": {
      "desc": "Update the configuration of StatsD metrics collection and push service."
    }
  },
  "emqx_stomp_schema": {
    "stom_frame_max_body_length": {
      "desc": "Maximum number of bytes of Body allowed per Stomp packet"
    },
    "stom_frame_max_headers": {
      "desc": "The maximum number of Header"
    },
    "stomp": {
      "desc": "The Stomp Gateway configuration.\nThis gateway supports v1.2/1.1/1.0"
    },
    "stomp_frame_max_headers_length": {
      "desc": "The maximum string length of the Header Value"
    }
  },
  "emqx_telemetry_api": {
    "active_modules": {
      "desc": "Get active modules"
    },
    "active_plugins": {
      "desc": "Get active plugins"
    },
    "emqx_version": {
      "desc": "Get emqx version"
    },
    "enable": {
      "desc": "Enable telemetry"
    },
    "get_telemetry_data_api": {
      "desc": "Get telemetry data"
    },
    "get_telemetry_status_api": {
      "desc": "Get telemetry status"
    },
    "license": {
      "desc": "Get license information"
    },
    "messages_received": {
      "desc": "Get number of messages received"
    },
    "messages_sent": {
      "desc": "Get number of messages sent"
    },
    "nodes_uuid": {
      "desc": "Get nodes UUID"
    },
    "num_clients": {
      "desc": "Get number of clients"
    },
    "os_name": {
      "desc": "Get OS name"
    },
    "os_version": {
      "desc": "Get OS version"
    },
    "otp_version": {
      "desc": "Get Erlang OTP version"
    },
    "up_time": {
      "desc": "Get uptime"
    },
    "update_telemetry_status_api": {
      "desc": "Enable or disable telemetry"
    },
    "uuid": {
      "desc": "Get UUID"
    }
  },
  "emqx_topic_metrics_api": {
    "message_qos1_in_rate": {
      "desc": "QoS1 in messages rate"
    },
    "message_out_count": {
      "desc": "Out messages count"
    },
    "message_qos2_out_rate": {
      "desc": "QoS2 out messages rate"
    },
    "message_qos0_in_rate": {
      "desc": "QoS0 in messages rate"
    },
    "get_topic_metrics_api": {
      "desc": "List topic metrics"
    },
    "reset_time": {
      "desc": "Reset time. In rfc3339. Nullable if never reset"
    },
    "topic_metrics_api_response400": {
      "desc": "Bad request. Already exists or bad topic name"
    },
    "reset_topic_desc": {
      "desc": "Topic Name. If this parameter is not present,all created topic metrics will be reset."
    },
    "topic_metrics_api_response409": {
      "desc": "Conflict. Topic metrics exceeded max limit 512"
    },
    "post_topic_metrics_api": {
      "desc": "Create topic metrics"
    },
    "message_dropped_rate": {
      "desc": "Dropped messages rate"
    },
    "message_qos2_in_rate": {
      "desc": "QoS2 in messages rate"
    },
    "message_in_rate": {
      "desc": "In messages rate"
    },
    "message_qos0_out_rate": {
      "desc": "QoS0 out messages rate"
    },
    "message_qos2_in_count": {
      "desc": "QoS2 in messages count"
    },
    "message_dropped_count": {
      "desc": "Dropped messages count"
    },
    "topic_metrics_api_response404": {
      "desc": "Not Found. Topic metrics not found"
    },
    "topic_in_path": {
      "desc": "Topic string. Notice: Topic string in url path must be encoded"
    },
    "action": {
      "desc": "Action. Only support reset"
    },
    "message_qos0_in_count": {
      "desc": "QoS0 in messages count"
    },
    "message_qos1_out_rate": {
      "desc": "QoS1 out messages rate"
    },
    "topic": {
      "desc": "Topic"
    },
    "reset_topic_metrics_api": {
      "desc": "Reset telemetry status"
    },
    "create_time": {
      "desc": "Create time"
    },
    "metrics": {
      "desc": "Metrics"
    },
    "message_qos1_out_count": {
      "desc": "QoS1 out messages count"
    },
    "gat_topic_metrics_data_api": {
      "desc": "Get topic metrics"
    },
    "message_qos1_in_count": {
      "desc": "QoS1 in messages count"
    },
    "delete_topic_metrics_data_api": {
      "desc": "Delete topic metrics"
    },
    "message_qos0_out_count": {
      "desc": "QoS0 out messages count"
    },
    "topic_in_body": {
      "desc": "Raw topic string"
    },
    "message_in_count": {
      "desc": "In messages count"
    },
    "message_qos2_out_count": {
      "desc": "QoS2 out messages count"
    },
    "message_out_rate": {
      "desc": "Out messages rate"
    }
  }
}