{
    "components": {
        "schemas": {
            "broker.ssl_client_opts": {
                "properties": {
                    "cacertfile": {
                        "description": "</br>Trusted PEM format CA certificates bundle file.</br>The certificates in this file are used to verify the TLS peer's certificates.</br>Append new certificates to the file if new CAs are to be trusted.</br>There is no need to restart EMQX to have the updated file loaded, because</br>the system regularly checks if file has been updated (and reload).</br>NOTE: invalidating (deleting) a certificate from the file will not affect</br>already established connections.</br>",
                        "label": "CACertfile",
                        "type": "string"
                    },
                    "certfile": {
                        "description": "</br>PEM format certificates chain file.</br>The certificates in this file should be in reversed order of the certificate</br>issue chain. That is, the host's certificate should be placed in the beginning</br>of the file, followed by the immediate issuer certificate and so on.</br>Although the root CA certificate is optional, it should be placed at the end of</br>the file if it is to be added.</br>",
                        "label": "Certfile",
                        "type": "string"
                    },
                    "keyfile": {
                        "description": "</br>PEM format private key file.</br>",
                        "label": "Keyfile",
                        "type": "string"
                    },
                    "verify": {
                        "default": "verify_none",
                        "description": "</br>Enable or disable peer verification.</br>",
                        "label": "Verify peer",
                        "symbols": [
                            "verify_peer",
                            "verify_none"
                        ],
                        "type": "enum"
                    },
                    "reuse_sessions": {
                        "default": true,
                        "description": "</br>Enable TLS session reuse.</br>",
                        "label": "TLS session reuse",
                        "type": "boolean"
                    },
                    "depth": {
                        "default": 10,
                        "description": "</br>Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path. So, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly; if 1 the path can be PEER, CA, ROOT-CA; if 2 the path can be PEER, CA, CA, ROOT-CA, and so on. The default value is 10.</br>",
                        "label": "CACert Depth",
                        "type": "number"
                    },
                    "password": {
                        "description": "</br>String containing the user's password.</br>Only used if the private key file is password-protected.</br>",
                        "example": "",
                        "label": "Keyfile passphrase",
                        "type": "string"
                    },
                    "versions": {
                        "default": [
                            "tlsv1.3",
                            "tlsv1.2",
                            "tlsv1.1",
                            "tlsv1"
                        ],
                        "description": "</br>All TLS/DTLS versions to be supported.</br>NOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.</br>In case PSK cipher suites are intended, make sure to configured</br><code>['tlsv1.2', 'tlsv1.1']</code> here.</br>",
                        "items": {
                            "type": "string"
                        },
                        "label": "SSL versions",
                        "type": "array"
                    },
                    "ciphers": {
                        "default": [
                            "TLS_AES_256_GCM_SHA384",
                            "TLS_AES_128_GCM_SHA256",
                            "TLS_CHACHA20_POLY1305_SHA256",
                            "TLS_AES_128_CCM_SHA256",
                            "TLS_AES_128_CCM_8_SHA256",
                            "ECDHE-ECDSA-AES256-GCM-SHA384",
                            "ECDHE-RSA-AES256-GCM-SHA384",
                            "ECDHE-ECDSA-AES256-SHA384",
                            "ECDHE-RSA-AES256-SHA384",
                            "ECDH-ECDSA-AES256-GCM-SHA384",
                            "ECDH-RSA-AES256-GCM-SHA384",
                            "ECDH-ECDSA-AES256-SHA384",
                            "ECDH-RSA-AES256-SHA384",
                            "DHE-DSS-AES256-GCM-SHA384",
                            "DHE-DSS-AES256-SHA256",
                            "AES256-GCM-SHA384",
                            "AES256-SHA256",
                            "ECDHE-ECDSA-AES128-GCM-SHA256",
                            "ECDHE-RSA-AES128-GCM-SHA256",
                            "ECDHE-ECDSA-AES128-SHA256",
                            "ECDHE-RSA-AES128-SHA256",
                            "ECDH-ECDSA-AES128-GCM-SHA256",
                            "ECDH-RSA-AES128-GCM-SHA256",
                            "ECDH-ECDSA-AES128-SHA256",
                            "ECDH-RSA-AES128-SHA256",
                            "DHE-DSS-AES128-GCM-SHA256",
                            "DHE-DSS-AES128-SHA256",
                            "AES128-GCM-SHA256",
                            "AES128-SHA256",
                            "ECDHE-ECDSA-AES256-SHA",
                            "ECDHE-RSA-AES256-SHA",
                            "DHE-DSS-AES256-SHA",
                            "ECDH-ECDSA-AES256-SHA",
                            "ECDH-RSA-AES256-SHA",
                            "ECDHE-ECDSA-AES128-SHA",
                            "ECDHE-RSA-AES128-SHA",
                            "DHE-DSS-AES128-SHA",
                            "ECDH-ECDSA-AES128-SHA",
                            "ECDH-RSA-AES128-SHA",
                            "RSA-PSK-AES256-GCM-SHA384",
                            "RSA-PSK-AES256-CBC-SHA384",
                            "RSA-PSK-AES128-GCM-SHA256",
                            "RSA-PSK-AES128-CBC-SHA256",
                            "RSA-PSK-AES256-CBC-SHA",
                            "RSA-PSK-AES128-CBC-SHA"
                        ],
                        "description": "</br>This config holds TLS cipher suite names separated by comma,</br>or as an array of strings. e.g.</br><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or</br><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.</br></br>Ciphers (and their ordering) define the way in which the</br>client and server encrypts information over the network connection.</br>Selecting a good cipher suite is critical for the</br>application's data security, confidentiality and performance.</br></br>The names should be in OpenSSL string format (not RFC format).</br>All default values and examples provided by EMQX config</br>documentation are all in OpenSSL format.</br></br>NOTE: Certain cipher suites are only compatible with</br>specific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')</br>incompatible cipher suites will be silently dropped.</br>For instance, if only 'tlsv1.3' is given in the <code>versions</code>,</br>configuring cipher suites for other versions will have no effect.</br></br></br>NOTE: PSK ciphers are suppressed by 'tlsv1.3' version config</br>If PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.</br>PSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,</br>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,</br>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,</br>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code></br>",
                        "items": {
                            "type": "string"
                        },
                        "label": "",
                        "type": "array"
                    },
                    "user_lookup_fun": {
                        "default": "emqx_tls_psk:lookup",
                        "description": "</br>EMQX-internal callback that is used to lookup pre-shared key (PSK) identity.</br>",
                        "label": "SSL PSK user lookup fun",
                        "type": "string"
                    },
                    "secure_renegotiate": {
                        "default": true,
                        "description": "</br>SSL parameter renegotiation is a feature that allows a client and a server</br>to renegotiate the parameters of the SSL connection on the fly.</br>RFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,</br>you drop support for the insecure renegotiation, prone to MitM attacks.</br>",
                        "label": "SSL renegotiate",
                        "type": "boolean"
                    },
                    "enable": {
                        "default": false,
                        "description": "</br>Enable TLS.</br>",
                        "label": "Enable TLS.",
                        "type": "boolean"
                    },
                    "server_name_indication": {
                        "description": "</br>Specify the host name to be used in TLS Server Name Indication extension.</br>For instance, when connecting to \"server.example.net\", the genuine server</br>which accepts the connection and performs TLS handshake may differ from the</br>host the TLS client initially connects to, e.g. when connecting to an IP address</br>or when the host has multiple resolvable DNS records </br>If not specified, it will default to the host name string which is used</br>to establish the connection, unless it is IP addressed used.</br>The host name is then also used in the host name verification of the peer</br>certificate.</br> The special value 'disable' prevents the Server Name</br>Indication extension from being sent and disables the hostname</br>verification check.</br>",
                        "example": "disable",
                        "label": "Server Name Indication",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "symbols": [
                                    "disable"
                                ],
                                "type": "enum"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "connector-mqtt.replayq": {
                "properties": {
                    "dir": {
                        "description": "</br>The dir where the replayq file saved.</br>Set to 'false' disables the replayq feature.</br>",
                        "label": "Replyq file Save Dir",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "boolean"
                            }
                        ]
                    },
                    "seg_bytes": {
                        "default": "100MB",
                        "description": "</br>The size in bytes of a single segment.</br>A segment is mapping to a file in the replayq dir. If the current segment is full, a new segment</br>(file) will be opened to write.</br>",
                        "label": "Segment Size",
                        "type": "byteSize"
                    },
                    "offload": {
                        "default": false,
                        "description": "</br>In offload mode, the disk queue is only used to offload queue tail segments.</br>The messages are cached in the memory first, then it writes to the replayq files after the size of</br>the memory cache reaches 'seg_bytes'.</br>",
                        "label": "Offload Mode",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "emqx_connector_mqtt.get": {
                "required": [
                    "server",
                    "name",
                    "type"
                ],
                "properties": {
                    "num_of_bridges": {
                        "description": "The current number of bridges that are using this connector.",
                        "label": "Num of Bridges",
                        "type": "number"
                    },
                    "type": {
                        "description": "The Connector Type.",
                        "label": "Connector Type",
                        "symbols": [
                            "mqtt"
                        ],
                        "type": "enum"
                    },
                    "name": {
                        "description": "Connector name, used as a human-readable description of the connector.",
                        "label": "Connector Name",
                        "type": "string"
                    },
                    "mode": {
                        "default": "cluster_shareload",
                        "description": "</br>The mode of the MQTT Bridge.</br></br>- cluster_shareload: create an MQTT connection on each node in the emqx cluster.</br>In 'cluster_shareload' mode, the incoming load from the remote broker is shared by</br>using shared subscription.</br>Note that the 'clientid' is suffixed by the node name, this is to avoid</br>clientid conflicts between different nodes. And we can only use shared subscription</br>topic filters for 'remote_topic' of ingress connections.</br>",
                        "label": "MQTT Bridge Mode",
                        "symbols": [
                            "cluster_shareload"
                        ],
                        "type": "enum"
                    },
                    "server": {
                        "description": "The host and port of the remote MQTT broker",
                        "label": "Broker IP And Port",
                        "type": "ip_port"
                    },
                    "reconnect_interval": {
                        "default": "15s",
                        "description": "Reconnect interval. Delay for the MQTT bridge to retry establishing the connection in case of transportation failure. Time interval is a string that contains a number followed by time unit:</br>- `ms` for milliseconds,</br>- `s` for seconds,</br>- `m` for minutes,</br>- `h` for hours;</br></br>or combination of whereof: `1h5m0s`",
                        "label": "reconnect_interval",
                        "type": "string"
                    },
                    "proto_ver": {
                        "default": "v4",
                        "description": "The MQTT protocol version",
                        "label": "Protocol Version",
                        "symbols": [
                            "v3",
                            "v4",
                            "v5"
                        ],
                        "type": "enum"
                    },
                    "bridge_mode": {
                        "default": false,
                        "description": "</br>If enable bridge mode.</br>NOTE: This setting is only for MQTT protocol version older than 5.0, and the remote MQTT</br>broker MUST support this feature.</br>    ",
                        "label": "Bridge Mode",
                        "type": "boolean"
                    },
                    "username": {
                        "default": "emqx",
                        "description": "The username of the MQTT protocol",
                        "label": "Username",
                        "type": "string"
                    },
                    "password": {
                        "default": "emqx",
                        "description": "The password of the MQTT protocol",
                        "label": "Password",
                        "type": "string"
                    },
                    "clean_start": {
                        "default": true,
                        "description": "The clean-start or the clean-session of the MQTT protocol",
                        "label": "Clean Session",
                        "type": "boolean"
                    },
                    "keepalive": {
                        "default": "300s",
                        "description": "MQTT Keepalive. Time interval is a string that contains a number followed by time unit:</br>- `ms` for milliseconds,</br>- `s` for seconds,</br>- `m` for minutes,</br>- `h` for hours;</br></br>or combination of whereof: `1h5m0s`",
                        "label": "keepalive",
                        "type": "string"
                    },
                    "retry_interval": {
                        "default": "15s",
                        "description": "Message retry interval. Delay for the MQTT bridge to retry sending the QoS1/QoS2 messages in case of ACK not received. Time interval is a string that contains a number followed by time unit:</br>- `ms` for milliseconds,</br>- `s` for seconds,</br>- `m` for minutes,</br>- `h` for hours;</br></br>or combination of whereof: `1h5m0s`",
                        "label": "retry_interval",
                        "type": "string"
                    },
                    "max_inflight": {
                        "default": 32,
                        "description": "Max inflight (sent, but un-acked) messages of the MQTT protocol",
                        "label": "Max Inflight Message",
                        "minimum": 1,
                        "type": "number"
                    },
                    "replayq": {
                        "description": "replayq Description",
                        "label": "replayq",
                        "$ref": "#/components/schemas/connector-mqtt.replayq"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "emqx_connector_mqtt.post": {
                "required": [
                    "server",
                    "name",
                    "type"
                ],
                "properties": {
                    "type": {
                        "description": "The Connector Type.",
                        "label": "Connector Type",
                        "symbols": [
                            "mqtt"
                        ],
                        "type": "enum"
                    },
                    "name": {
                        "description": "Connector name, used as a human-readable description of the connector.",
                        "label": "Connector Name",
                        "type": "string"
                    },
                    "mode": {
                        "default": "cluster_shareload",
                        "description": "</br>The mode of the MQTT Bridge.</br></br>- cluster_shareload: create an MQTT connection on each node in the emqx cluster.</br>In 'cluster_shareload' mode, the incoming load from the remote broker is shared by</br>using shared subscription.</br>Note that the 'clientid' is suffixed by the node name, this is to avoid</br>clientid conflicts between different nodes. And we can only use shared subscription</br>topic filters for 'remote_topic' of ingress connections.</br>",
                        "label": "MQTT Bridge Mode",
                        "symbols": [
                            "cluster_shareload"
                        ],
                        "type": "enum"
                    },
                    "server": {
                        "description": "The host and port of the remote MQTT broker",
                        "label": "Broker IP And Port",
                        "type": "ip_port"
                    },
                    "reconnect_interval": {
                        "default": "15s",
                        "description": "Reconnect interval. Delay for the MQTT bridge to retry establishing the connection in case of transportation failure. Time interval is a string that contains a number followed by time unit:</br>- `ms` for milliseconds,</br>- `s` for seconds,</br>- `m` for minutes,</br>- `h` for hours;</br></br>or combination of whereof: `1h5m0s`",
                        "label": "reconnect_interval",
                        "type": "string"
                    },
                    "proto_ver": {
                        "default": "v4",
                        "description": "The MQTT protocol version",
                        "label": "Protocol Version",
                        "symbols": [
                            "v3",
                            "v4",
                            "v5"
                        ],
                        "type": "enum"
                    },
                    "bridge_mode": {
                        "default": false,
                        "description": "</br>If enable bridge mode.</br>NOTE: This setting is only for MQTT protocol version older than 5.0, and the remote MQTT</br>broker MUST support this feature.</br>    ",
                        "label": "Bridge Mode",
                        "type": "boolean"
                    },
                    "username": {
                        "default": "emqx",
                        "description": "The username of the MQTT protocol",
                        "label": "Username",
                        "type": "string"
                    },
                    "password": {
                        "default": "emqx",
                        "description": "The password of the MQTT protocol",
                        "label": "Password",
                        "type": "string"
                    },
                    "clean_start": {
                        "default": true,
                        "description": "The clean-start or the clean-session of the MQTT protocol",
                        "label": "Clean Session",
                        "type": "boolean"
                    },
                    "keepalive": {
                        "default": "300s",
                        "description": "MQTT Keepalive. Time interval is a string that contains a number followed by time unit:</br>- `ms` for milliseconds,</br>- `s` for seconds,</br>- `m` for minutes,</br>- `h` for hours;</br></br>or combination of whereof: `1h5m0s`",
                        "label": "keepalive",
                        "type": "string"
                    },
                    "retry_interval": {
                        "default": "15s",
                        "description": "Message retry interval. Delay for the MQTT bridge to retry sending the QoS1/QoS2 messages in case of ACK not received. Time interval is a string that contains a number followed by time unit:</br>- `ms` for milliseconds,</br>- `s` for seconds,</br>- `m` for minutes,</br>- `h` for hours;</br></br>or combination of whereof: `1h5m0s`",
                        "label": "retry_interval",
                        "type": "string"
                    },
                    "max_inflight": {
                        "default": 32,
                        "description": "Max inflight (sent, but un-acked) messages of the MQTT protocol",
                        "label": "Max Inflight Message",
                        "minimum": 1,
                        "type": "number"
                    },
                    "replayq": {
                        "description": "replayq Description",
                        "label": "replayq",
                        "$ref": "#/components/schemas/connector-mqtt.replayq"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "emqx_connector_mqtt.put": {
                "required": [
                    "server"
                ],
                "properties": {
                    "mode": {
                        "default": "cluster_shareload",
                        "description": "</br>The mode of the MQTT Bridge.</br></br>- cluster_shareload: create an MQTT connection on each node in the emqx cluster.</br>In 'cluster_shareload' mode, the incoming load from the remote broker is shared by</br>using shared subscription.</br>Note that the 'clientid' is suffixed by the node name, this is to avoid</br>clientid conflicts between different nodes. And we can only use shared subscription</br>topic filters for 'remote_topic' of ingress connections.</br>",
                        "label": "MQTT Bridge Mode",
                        "symbols": [
                            "cluster_shareload"
                        ],
                        "type": "enum"
                    },
                    "server": {
                        "description": "The host and port of the remote MQTT broker",
                        "label": "Broker IP And Port",
                        "type": "ip_port"
                    },
                    "reconnect_interval": {
                        "default": "15s",
                        "description": "Reconnect interval. Delay for the MQTT bridge to retry establishing the connection in case of transportation failure. Time interval is a string that contains a number followed by time unit:</br>- `ms` for milliseconds,</br>- `s` for seconds,</br>- `m` for minutes,</br>- `h` for hours;</br></br>or combination of whereof: `1h5m0s`",
                        "label": "reconnect_interval",
                        "type": "string"
                    },
                    "proto_ver": {
                        "default": "v4",
                        "description": "The MQTT protocol version",
                        "label": "Protocol Version",
                        "symbols": [
                            "v3",
                            "v4",
                            "v5"
                        ],
                        "type": "enum"
                    },
                    "bridge_mode": {
                        "default": false,
                        "description": "</br>If enable bridge mode.</br>NOTE: This setting is only for MQTT protocol version older than 5.0, and the remote MQTT</br>broker MUST support this feature.</br>    ",
                        "label": "Bridge Mode",
                        "type": "boolean"
                    },
                    "username": {
                        "default": "emqx",
                        "description": "The username of the MQTT protocol",
                        "label": "Username",
                        "type": "string"
                    },
                    "password": {
                        "default": "emqx",
                        "description": "The password of the MQTT protocol",
                        "label": "Password",
                        "type": "string"
                    },
                    "clean_start": {
                        "default": true,
                        "description": "The clean-start or the clean-session of the MQTT protocol",
                        "label": "Clean Session",
                        "type": "boolean"
                    },
                    "keepalive": {
                        "default": "300s",
                        "description": "MQTT Keepalive. Time interval is a string that contains a number followed by time unit:</br>- `ms` for milliseconds,</br>- `s` for seconds,</br>- `m` for minutes,</br>- `h` for hours;</br></br>or combination of whereof: `1h5m0s`",
                        "label": "keepalive",
                        "type": "string"
                    },
                    "retry_interval": {
                        "default": "15s",
                        "description": "Message retry interval. Delay for the MQTT bridge to retry sending the QoS1/QoS2 messages in case of ACK not received. Time interval is a string that contains a number followed by time unit:</br>- `ms` for milliseconds,</br>- `s` for seconds,</br>- `m` for minutes,</br>- `h` for hours;</br></br>or combination of whereof: `1h5m0s`",
                        "label": "retry_interval",
                        "type": "string"
                    },
                    "max_inflight": {
                        "default": 32,
                        "description": "Max inflight (sent, but un-acked) messages of the MQTT protocol",
                        "label": "Max Inflight Message",
                        "minimum": 1,
                        "type": "number"
                    },
                    "replayq": {
                        "description": "replayq Description",
                        "label": "replayq",
                        "$ref": "#/components/schemas/connector-mqtt.replayq"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "emqx_ee_connector_hstream.get": {
                "required": [
                    "pool_size",
                    "stream",
                    "url",
                    "name",
                    "type"
                ],
                "properties": {
                    "type": {
                        "description": "The Connector Type.",
                        "label": "Connector Type",
                        "symbols": [
                            "hstreamdb"
                        ],
                        "type": "enum"
                    },
                    "name": {
                        "description": "Connector name, used as a human-readable description of the connector.",
                        "label": "Connector Name",
                        "type": "string"
                    },
                    "url": {
                        "description": "HStreamDB Server URL",
                        "label": "HStreamDB Server URL",
                        "type": "string"
                    },
                    "stream": {
                        "description": "HStreamDB Stream Name",
                        "label": "HStreamDB Stream Name",
                        "type": "string"
                    },
                    "ordering_key": {
                        "description": "HStreamDB Ordering Key",
                        "label": "HStreamDB Ordering Key",
                        "type": "string"
                    },
                    "pool_size": {
                        "description": "HStreamDB Pool Size",
                        "label": "HStreamDB Pool Size",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "emqx_ee_connector_hstream.post": {
                "required": [
                    "pool_size",
                    "stream",
                    "url",
                    "name",
                    "type"
                ],
                "properties": {
                    "type": {
                        "description": "The Connector Type.",
                        "label": "Connector Type",
                        "symbols": [
                            "hstreamdb"
                        ],
                        "type": "enum"
                    },
                    "name": {
                        "description": "Connector name, used as a human-readable description of the connector.",
                        "label": "Connector Name",
                        "type": "string"
                    },
                    "url": {
                        "description": "HStreamDB Server URL",
                        "label": "HStreamDB Server URL",
                        "type": "string"
                    },
                    "stream": {
                        "description": "HStreamDB Stream Name",
                        "label": "HStreamDB Stream Name",
                        "type": "string"
                    },
                    "ordering_key": {
                        "description": "HStreamDB Ordering Key",
                        "label": "HStreamDB Ordering Key",
                        "type": "string"
                    },
                    "pool_size": {
                        "description": "HStreamDB Pool Size",
                        "label": "HStreamDB Pool Size",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "emqx_ee_connector_hstream.put": {
                "required": [
                    "pool_size",
                    "stream",
                    "url"
                ],
                "properties": {
                    "url": {
                        "description": "HStreamDB Server URL",
                        "label": "HStreamDB Server URL",
                        "type": "string"
                    },
                    "stream": {
                        "description": "HStreamDB Stream Name",
                        "label": "HStreamDB Stream Name",
                        "type": "string"
                    },
                    "ordering_key": {
                        "description": "HStreamDB Ordering Key",
                        "label": "HStreamDB Ordering Key",
                        "type": "string"
                    },
                    "pool_size": {
                        "description": "HStreamDB Pool Size",
                        "label": "HStreamDB Pool Size",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "emqx_ee_connector_influxdb.get_api_v1": {
                "required": [
                    "name",
                    "type",
                    "pool_size",
                    "port",
                    "host",
                    "password",
                    "username",
                    "database"
                ],
                "properties": {
                    "database": {
                        "description": "InfluxDB database.",
                        "label": "Database",
                        "type": "string"
                    },
                    "username": {
                        "description": "InfluxDB username.",
                        "label": "Username",
                        "type": "string"
                    },
                    "password": {
                        "description": "InfluxDB password.",
                        "label": "Password",
                        "type": "string"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    },
                    "host": {
                        "default": "120.0.0.1",
                        "description": "InfluxDB host.",
                        "label": "Host",
                        "type": "string"
                    },
                    "port": {
                        "default": 8086,
                        "description": "InfluxDB port.",
                        "label": "Port",
                        "type": "string"
                    },
                    "precision": {
                        "default": "ms",
                        "description": "InfluxDB time precision.",
                        "label": "Time Precision",
                        "symbols": [
                            "ns",
                            "us",
                            "ms",
                            "s",
                            "m",
                            "h"
                        ],
                        "type": "enum"
                    },
                    "pool_size": {
                        "description": "InfluxDB Pool Size",
                        "label": "InfluxDB Pool Size",
                        "type": "string"
                    },
                    "type": {
                        "description": "The Connector Type.",
                        "label": "Connector Type",
                        "symbols": [
                            "influxdb_api_v1"
                        ],
                        "type": "enum"
                    },
                    "name": {
                        "description": "Connector name, used as a human-readable description of the connector.",
                        "label": "Connector Name",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "emqx_ee_connector_influxdb.get_api_v2": {
                "required": [
                    "name",
                    "type",
                    "pool_size",
                    "port",
                    "host",
                    "token",
                    "org",
                    "bucket"
                ],
                "properties": {
                    "bucket": {
                        "description": "InfluxDB bucket name.",
                        "label": "Bucket",
                        "type": "string"
                    },
                    "org": {
                        "description": "InfluxDB organization name.",
                        "label": "Organization",
                        "type": "string"
                    },
                    "token": {
                        "description": "InfluxDB token.",
                        "label": "Token",
                        "type": "string"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    },
                    "host": {
                        "default": "120.0.0.1",
                        "description": "InfluxDB host.",
                        "label": "Host",
                        "type": "string"
                    },
                    "port": {
                        "default": 8086,
                        "description": "InfluxDB port.",
                        "label": "Port",
                        "type": "string"
                    },
                    "precision": {
                        "default": "ms",
                        "description": "InfluxDB time precision.",
                        "label": "Time Precision",
                        "symbols": [
                            "ns",
                            "us",
                            "ms",
                            "s",
                            "m",
                            "h"
                        ],
                        "type": "enum"
                    },
                    "pool_size": {
                        "description": "InfluxDB Pool Size",
                        "label": "InfluxDB Pool Size",
                        "type": "string"
                    },
                    "type": {
                        "description": "The Connector Type.",
                        "label": "Connector Type",
                        "symbols": [
                            "influxdb_api_v2"
                        ],
                        "type": "enum"
                    },
                    "name": {
                        "description": "Connector name, used as a human-readable description of the connector.",
                        "label": "Connector Name",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "emqx_ee_connector_influxdb.get_udp": {
                "required": [
                    "name",
                    "type",
                    "pool_size",
                    "port",
                    "host"
                ],
                "properties": {
                    "host": {
                        "default": "120.0.0.1",
                        "description": "InfluxDB host.",
                        "label": "Host",
                        "type": "string"
                    },
                    "port": {
                        "default": 8086,
                        "description": "InfluxDB port.",
                        "label": "Port",
                        "type": "string"
                    },
                    "precision": {
                        "default": "ms",
                        "description": "InfluxDB time precision.",
                        "label": "Time Precision",
                        "symbols": [
                            "ns",
                            "us",
                            "ms",
                            "s",
                            "m",
                            "h"
                        ],
                        "type": "enum"
                    },
                    "pool_size": {
                        "description": "InfluxDB Pool Size",
                        "label": "InfluxDB Pool Size",
                        "type": "string"
                    },
                    "type": {
                        "description": "The Connector Type.",
                        "label": "Connector Type",
                        "symbols": [
                            "influxdb_udp"
                        ],
                        "type": "enum"
                    },
                    "name": {
                        "description": "Connector name, used as a human-readable description of the connector.",
                        "label": "Connector Name",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "emqx_ee_connector_influxdb.post_api_v1": {
                "required": [
                    "name",
                    "type",
                    "pool_size",
                    "port",
                    "host",
                    "password",
                    "username",
                    "database"
                ],
                "properties": {
                    "database": {
                        "description": "InfluxDB database.",
                        "label": "Database",
                        "type": "string"
                    },
                    "username": {
                        "description": "InfluxDB username.",
                        "label": "Username",
                        "type": "string"
                    },
                    "password": {
                        "description": "InfluxDB password.",
                        "label": "Password",
                        "type": "string"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    },
                    "host": {
                        "default": "120.0.0.1",
                        "description": "InfluxDB host.",
                        "label": "Host",
                        "type": "string"
                    },
                    "port": {
                        "default": 8086,
                        "description": "InfluxDB port.",
                        "label": "Port",
                        "type": "string"
                    },
                    "precision": {
                        "default": "ms",
                        "description": "InfluxDB time precision.",
                        "label": "Time Precision",
                        "symbols": [
                            "ns",
                            "us",
                            "ms",
                            "s",
                            "m",
                            "h"
                        ],
                        "type": "enum"
                    },
                    "pool_size": {
                        "description": "InfluxDB Pool Size",
                        "label": "InfluxDB Pool Size",
                        "type": "string"
                    },
                    "type": {
                        "description": "The Connector Type.",
                        "label": "Connector Type",
                        "symbols": [
                            "influxdb_api_v1"
                        ],
                        "type": "enum"
                    },
                    "name": {
                        "description": "Connector name, used as a human-readable description of the connector.",
                        "label": "Connector Name",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "emqx_ee_connector_influxdb.post_api_v2": {
                "required": [
                    "name",
                    "type",
                    "pool_size",
                    "port",
                    "host",
                    "token",
                    "org",
                    "bucket"
                ],
                "properties": {
                    "bucket": {
                        "description": "InfluxDB bucket name.",
                        "label": "Bucket",
                        "type": "string"
                    },
                    "org": {
                        "description": "InfluxDB organization name.",
                        "label": "Organization",
                        "type": "string"
                    },
                    "token": {
                        "description": "InfluxDB token.",
                        "label": "Token",
                        "type": "string"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    },
                    "host": {
                        "default": "120.0.0.1",
                        "description": "InfluxDB host.",
                        "label": "Host",
                        "type": "string"
                    },
                    "port": {
                        "default": 8086,
                        "description": "InfluxDB port.",
                        "label": "Port",
                        "type": "string"
                    },
                    "precision": {
                        "default": "ms",
                        "description": "InfluxDB time precision.",
                        "label": "Time Precision",
                        "symbols": [
                            "ns",
                            "us",
                            "ms",
                            "s",
                            "m",
                            "h"
                        ],
                        "type": "enum"
                    },
                    "pool_size": {
                        "description": "InfluxDB Pool Size",
                        "label": "InfluxDB Pool Size",
                        "type": "string"
                    },
                    "type": {
                        "description": "The Connector Type.",
                        "label": "Connector Type",
                        "symbols": [
                            "influxdb_api_v2"
                        ],
                        "type": "enum"
                    },
                    "name": {
                        "description": "Connector name, used as a human-readable description of the connector.",
                        "label": "Connector Name",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "emqx_ee_connector_influxdb.post_udp": {
                "required": [
                    "name",
                    "type",
                    "pool_size",
                    "port",
                    "host"
                ],
                "properties": {
                    "host": {
                        "default": "120.0.0.1",
                        "description": "InfluxDB host.",
                        "label": "Host",
                        "type": "string"
                    },
                    "port": {
                        "default": 8086,
                        "description": "InfluxDB port.",
                        "label": "Port",
                        "type": "string"
                    },
                    "precision": {
                        "default": "ms",
                        "description": "InfluxDB time precision.",
                        "label": "Time Precision",
                        "symbols": [
                            "ns",
                            "us",
                            "ms",
                            "s",
                            "m",
                            "h"
                        ],
                        "type": "enum"
                    },
                    "pool_size": {
                        "description": "InfluxDB Pool Size",
                        "label": "InfluxDB Pool Size",
                        "type": "string"
                    },
                    "type": {
                        "description": "The Connector Type.",
                        "label": "Connector Type",
                        "symbols": [
                            "influxdb_udp"
                        ],
                        "type": "enum"
                    },
                    "name": {
                        "description": "Connector name, used as a human-readable description of the connector.",
                        "label": "Connector Name",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "emqx_ee_connector_influxdb.put_api_v1": {
                "required": [
                    "pool_size",
                    "port",
                    "host",
                    "password",
                    "username",
                    "database"
                ],
                "properties": {
                    "database": {
                        "description": "InfluxDB database.",
                        "label": "Database",
                        "type": "string"
                    },
                    "username": {
                        "description": "InfluxDB username.",
                        "label": "Username",
                        "type": "string"
                    },
                    "password": {
                        "description": "InfluxDB password.",
                        "label": "Password",
                        "type": "string"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    },
                    "host": {
                        "default": "120.0.0.1",
                        "description": "InfluxDB host.",
                        "label": "Host",
                        "type": "string"
                    },
                    "port": {
                        "default": 8086,
                        "description": "InfluxDB port.",
                        "label": "Port",
                        "type": "string"
                    },
                    "precision": {
                        "default": "ms",
                        "description": "InfluxDB time precision.",
                        "label": "Time Precision",
                        "symbols": [
                            "ns",
                            "us",
                            "ms",
                            "s",
                            "m",
                            "h"
                        ],
                        "type": "enum"
                    },
                    "pool_size": {
                        "description": "InfluxDB Pool Size",
                        "label": "InfluxDB Pool Size",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "emqx_ee_connector_influxdb.put_api_v2": {
                "required": [
                    "pool_size",
                    "port",
                    "host",
                    "token",
                    "org",
                    "bucket"
                ],
                "properties": {
                    "bucket": {
                        "description": "InfluxDB bucket name.",
                        "label": "Bucket",
                        "type": "string"
                    },
                    "org": {
                        "description": "InfluxDB organization name.",
                        "label": "Organization",
                        "type": "string"
                    },
                    "token": {
                        "description": "InfluxDB token.",
                        "label": "Token",
                        "type": "string"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    },
                    "host": {
                        "default": "120.0.0.1",
                        "description": "InfluxDB host.",
                        "label": "Host",
                        "type": "string"
                    },
                    "port": {
                        "default": 8086,
                        "description": "InfluxDB port.",
                        "label": "Port",
                        "type": "string"
                    },
                    "precision": {
                        "default": "ms",
                        "description": "InfluxDB time precision.",
                        "label": "Time Precision",
                        "symbols": [
                            "ns",
                            "us",
                            "ms",
                            "s",
                            "m",
                            "h"
                        ],
                        "type": "enum"
                    },
                    "pool_size": {
                        "description": "InfluxDB Pool Size",
                        "label": "InfluxDB Pool Size",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "emqx_ee_connector_influxdb.put_udp": {
                "required": [
                    "pool_size",
                    "port",
                    "host"
                ],
                "properties": {
                    "host": {
                        "default": "120.0.0.1",
                        "description": "InfluxDB host.",
                        "label": "Host",
                        "type": "string"
                    },
                    "port": {
                        "default": 8086,
                        "description": "InfluxDB port.",
                        "label": "Port",
                        "type": "string"
                    },
                    "precision": {
                        "default": "ms",
                        "description": "InfluxDB time precision.",
                        "label": "Time Precision",
                        "symbols": [
                            "ns",
                            "us",
                            "ms",
                            "s",
                            "m",
                            "h"
                        ],
                        "type": "enum"
                    },
                    "pool_size": {
                        "description": "InfluxDB Pool Size",
                        "label": "InfluxDB Pool Size",
                        "type": "string"
                    }
                },
                "type": "object"
            }
        }
    },
    "info": {
        "title": "EMQX Connector API Schema",
        "version": "0.1.0"
    },
    "paths": {
        "/connectors": {
            "get": {
                "items": {
                    "oneOf": [
                        {
                            "$ref": "#/components/schemas/emqx_ee_connector_influxdb.get_api_v2"
                        },
                        {
                            "$ref": "#/components/schemas/emqx_ee_connector_influxdb.get_api_v1"
                        },
                        {
                            "$ref": "#/components/schemas/emqx_ee_connector_influxdb.get_udp"
                        },
                        {
                            "$ref": "#/components/schemas/emqx_ee_connector_hstream.get"
                        },
                        {
                            "$ref": "#/components/schemas/emqx_connector_mqtt.get"
                        }
                    ]
                },
                "type": "array"
            }
        },
        "/connectors/:id": {
            "get": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/emqx_ee_connector_influxdb.get_api_v2"
                    },
                    {
                        "$ref": "#/components/schemas/emqx_ee_connector_influxdb.get_api_v1"
                    },
                    {
                        "$ref": "#/components/schemas/emqx_ee_connector_influxdb.get_udp"
                    },
                    {
                        "$ref": "#/components/schemas/emqx_ee_connector_hstream.get"
                    },
                    {
                        "$ref": "#/components/schemas/emqx_connector_mqtt.get"
                    }
                ]
            },
            "put": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/emqx_ee_connector_influxdb.get_api_v2"
                    },
                    {
                        "$ref": "#/components/schemas/emqx_ee_connector_influxdb.get_api_v1"
                    },
                    {
                        "$ref": "#/components/schemas/emqx_ee_connector_influxdb.get_udp"
                    },
                    {
                        "$ref": "#/components/schemas/emqx_ee_connector_hstream.get"
                    },
                    {
                        "$ref": "#/components/schemas/emqx_connector_mqtt.get"
                    }
                ]
            }
        },
        "/connectors_test": {}
    }
}