{
    "components": {
        "schemas": {
            "bridge_redis.post_sentinel": {
                "required": [
                    "name",
                    "type",
                    "database",
                    "sentinel",
                    "servers",
                    "command_template"
                ],
                "properties": {
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this bridge",
                        "label": "Enable Or Disable Bridge",
                        "type": "boolean"
                    },
                    "local_topic": {
                        "description": "The MQTT topic filter to be forwarded to Redis. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.</br><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded.",
                        "label": "Local Topic",
                        "type": "string"
                    },
                    "command_template": {
                        "description": "Redis command template used to export messages. Each list element stands for a command name or its argument.<br/>For example, to push payloads in a Redis list by key `msgs`, the elements should be the following:<br/>`rpush`, `msgs`, `${payload}`.",
                        "items": {
                            "type": "string"
                        },
                        "label": "Redis Command Template",
                        "type": "array"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/bridge_redis.creation_opts_redis_sentinel"
                    },
                    "servers": {
                        "description": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`<br/>For each Node should be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The Redis default port 6379 is used if `[:Port]` is not specified.",
                        "label": "Servers",
                        "type": "string"
                    },
                    "redis_type": {
                        "default": "sentinel",
                        "description": "Sentinel mode. Must be set to 'sentinel' when Redis server is running in sentinel mode.",
                        "label": "Sentinel Mode",
                        "symbols": [
                            "sentinel"
                        ],
                        "type": "enum"
                    },
                    "sentinel": {
                        "description": "The cluster name in Redis sentinel mode.",
                        "label": "Cluster Name",
                        "type": "string"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "Size of the connection pool towards the bridge target service.",
                        "label": "Connection Pool Size",
                        "type": "string"
                    },
                    "password": {
                        "description": "EMQX's password in the external database.",
                        "format": "password",
                        "label": "Password",
                        "type": "string"
                    },
                    "database": {
                        "default": 0,
                        "description": "Redis database ID.",
                        "label": "Database ID",
                        "type": "number"
                    },
                    "auto_reconnect": {
                        "default": true,
                        "deprecated": "since(\"v5.0.15\")",
                        "description": "Deprecated. Enable automatic reconnect to the database.",
                        "label": "Deprecated. Auto Reconnect Database",
                        "type": "boolean"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    },
                    "type": {
                        "description": "The Bridge Type",
                        "label": "Bridge Type",
                        "symbols": [
                            "redis_sentinel"
                        ],
                        "type": "enum"
                    },
                    "name": {
                        "description": "Bridge name, used as a human-readable description of the bridge.",
                        "label": "Bridge Name",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "bridge_kafka.producer_buffer": {
                "properties": {
                    "mode": {
                        "default": "memory",
                        "description": "Message buffer mode.<br/><br/><code>memory</code>: Buffer all messages in memory. The messages will be lost in case of EMQX node restart<br/><code>disk</code>: Buffer all messages on disk. The messages on disk are able to survive EMQX node restart.<br/><code>hybrid</code>: Buffer message in memory first, when up to certain limit (see <code>segment_bytes</code> config for more information), then start offloading messages to disk, Like <code>memory</code> mode, the messages will be lost in case of EMQX node restart.",
                        "label": "Buffer Mode",
                        "symbols": [
                            "memory",
                            "disk",
                            "hybrid"
                        ],
                        "type": "enum"
                    },
                    "per_partition_limit": {
                        "default": "2GB",
                        "description": "Number of bytes allowed to buffer for each Kafka partition. When this limit is exceeded, old messages will be dropped in a trade for credits for new messages to be buffered.",
                        "label": "Per-partition Buffer Limit",
                        "type": "byteSize"
                    },
                    "segment_bytes": {
                        "default": "100MB",
                        "description": "Applicable when buffer mode is set to <code>disk</code> or <code>hybrid</code>.<br/>This value is to specify the size of each on-disk buffer file.",
                        "label": "Segment File Bytes",
                        "type": "byteSize"
                    },
                    "memory_overload_protection": {
                        "default": true,
                        "description": "Applicable when buffer mode is set to <code>memory</code> or <code>hybrid</code>.<br/>EMQX will drop old buffered messages under high memory pressure. The high memory threshold is defined in config <code>sysmon.os.sysmem_high_watermark</code>. NOTE: This config only works on Linux.",
                        "label": "Memory Overload Protection",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "bridge_influxdb.post_api_v1": {
                "required": [
                    "name",
                    "type",
                    "database",
                    "write_syntax"
                ],
                "properties": {
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this bridge",
                        "label": "Enable Or Disable Bridge",
                        "type": "boolean"
                    },
                    "local_topic": {
                        "description": "The MQTT topic filter to be forwarded to the InfluxDB. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.</br><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded.",
                        "label": "Local Topic",
                        "type": "string"
                    },
                    "write_syntax": {
                        "description": "Conf of InfluxDB line protocol to write data points. It is a text-based format that provides the measurement, tag set, field set, and timestamp of a data point, and placeholder supported.<br/>See also [InfluxDB 2.3 Line Protocol](https://docs.influxdata.com/influxdb/v2.3/reference/syntax/line-protocol/) and<br/>[InfluxDB 1.8 Line Protocol](https://docs.influxdata.com/influxdb/v1.8/write_protocols/line_protocol_tutorial/) </br><br/>TLDR:</br><br/>```<br/><measurement>[,<tag_key>=<tag_value>[,<tag_key>=<tag_value>]] <field_key>=<field_value>[,<field_key>=<field_value>] [<timestamp>]<br/>```",
                        "format": "sql",
                        "label": "Write Syntax",
                        "type": "string"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/resource_schema.creation_opts"
                    },
                    "server": {
                        "default": "127.0.0.1:8086",
                        "description": "The IPv4 or IPv6 address or the hostname to connect to.</br><br/>A host entry has the following form: `Host[:Port]`.</br><br/>The InfluxDB default port 8086 is used if `[:Port]` is not specified.",
                        "label": "Server Host",
                        "type": "string"
                    },
                    "precision": {
                        "default": "ms",
                        "description": "InfluxDB time precision.",
                        "label": "Time Precision",
                        "symbols": [
                            "ns",
                            "us",
                            "ms",
                            "s"
                        ],
                        "type": "enum"
                    },
                    "database": {
                        "description": "InfluxDB database.",
                        "label": "Database",
                        "type": "string"
                    },
                    "username": {
                        "description": "InfluxDB username.",
                        "label": "Username",
                        "type": "string"
                    },
                    "password": {
                        "description": "InfluxDB password.",
                        "format": "password",
                        "label": "Password",
                        "type": "string"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    },
                    "type": {
                        "description": "The Bridge Type.",
                        "label": "Bridge Type",
                        "symbols": [
                            "influxdb_api_v1"
                        ],
                        "type": "enum"
                    },
                    "name": {
                        "description": "Bridge name.",
                        "label": "Bridge Name",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "connector-mqtt.ingress": {
                "properties": {
                    "remote": {
                        "description": "The configs about subscribing to the remote broker.",
                        "label": "Remote Configs",
                        "$ref": "#/components/schemas/connector-mqtt.ingress_remote"
                    },
                    "local": {
                        "description": "The configs about sending message to the local broker.",
                        "label": "Local Configs",
                        "$ref": "#/components/schemas/connector-mqtt.ingress_local"
                    }
                },
                "type": "object"
            },
            "bridge_influxdb.get_api_v2": {
                "required": [
                    "name",
                    "type",
                    "token",
                    "org",
                    "bucket",
                    "write_syntax"
                ],
                "properties": {
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this bridge",
                        "label": "Enable Or Disable Bridge",
                        "type": "boolean"
                    },
                    "local_topic": {
                        "description": "The MQTT topic filter to be forwarded to the InfluxDB. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.</br><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded.",
                        "label": "Local Topic",
                        "type": "string"
                    },
                    "write_syntax": {
                        "description": "Conf of InfluxDB line protocol to write data points. It is a text-based format that provides the measurement, tag set, field set, and timestamp of a data point, and placeholder supported.<br/>See also [InfluxDB 2.3 Line Protocol](https://docs.influxdata.com/influxdb/v2.3/reference/syntax/line-protocol/) and<br/>[InfluxDB 1.8 Line Protocol](https://docs.influxdata.com/influxdb/v1.8/write_protocols/line_protocol_tutorial/) </br><br/>TLDR:</br><br/>```<br/><measurement>[,<tag_key>=<tag_value>[,<tag_key>=<tag_value>]] <field_key>=<field_value>[,<field_key>=<field_value>] [<timestamp>]<br/>```",
                        "format": "sql",
                        "label": "Write Syntax",
                        "type": "string"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/resource_schema.creation_opts"
                    },
                    "server": {
                        "default": "127.0.0.1:8086",
                        "description": "The IPv4 or IPv6 address or the hostname to connect to.</br><br/>A host entry has the following form: `Host[:Port]`.</br><br/>The InfluxDB default port 8086 is used if `[:Port]` is not specified.",
                        "label": "Server Host",
                        "type": "string"
                    },
                    "precision": {
                        "default": "ms",
                        "description": "InfluxDB time precision.",
                        "label": "Time Precision",
                        "symbols": [
                            "ns",
                            "us",
                            "ms",
                            "s"
                        ],
                        "type": "enum"
                    },
                    "bucket": {
                        "description": "InfluxDB bucket name.",
                        "label": "Bucket",
                        "type": "string"
                    },
                    "org": {
                        "description": "Organization name of InfluxDB.",
                        "label": "Organization",
                        "type": "string"
                    },
                    "token": {
                        "description": "InfluxDB token.",
                        "label": "Token",
                        "type": "string"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    },
                    "type": {
                        "description": "The Bridge Type.",
                        "label": "Bridge Type",
                        "symbols": [
                            "influxdb_api_v2"
                        ],
                        "type": "enum"
                    },
                    "name": {
                        "description": "Bridge name.",
                        "label": "Bridge Name",
                        "type": "string"
                    },
                    "status": {
                        "description": "The status of the bridge",
                        "label": "Bridge Status",
                        "symbols": [
                            "connected",
                            "disconnected",
                            "connecting"
                        ],
                        "type": "enum"
                    },
                    "node_status": {
                        "description": "Node status.",
                        "items": {
                            "$ref": "#/components/schemas/bridge.node_status"
                        },
                        "label": "Node Status",
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "connector-mqtt.egress_local": {
                "properties": {
                    "topic": {
                        "description": "The local topic to be forwarded to the remote broker",
                        "label": "Local Topic",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "bridge_influxdb.put_api_v2": {
                "required": [
                    "token",
                    "org",
                    "bucket",
                    "write_syntax"
                ],
                "properties": {
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this bridge",
                        "label": "Enable Or Disable Bridge",
                        "type": "boolean"
                    },
                    "local_topic": {
                        "description": "The MQTT topic filter to be forwarded to the InfluxDB. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.</br><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded.",
                        "label": "Local Topic",
                        "type": "string"
                    },
                    "write_syntax": {
                        "description": "Conf of InfluxDB line protocol to write data points. It is a text-based format that provides the measurement, tag set, field set, and timestamp of a data point, and placeholder supported.<br/>See also [InfluxDB 2.3 Line Protocol](https://docs.influxdata.com/influxdb/v2.3/reference/syntax/line-protocol/) and<br/>[InfluxDB 1.8 Line Protocol](https://docs.influxdata.com/influxdb/v1.8/write_protocols/line_protocol_tutorial/) </br><br/>TLDR:</br><br/>```<br/><measurement>[,<tag_key>=<tag_value>[,<tag_key>=<tag_value>]] <field_key>=<field_value>[,<field_key>=<field_value>] [<timestamp>]<br/>```",
                        "format": "sql",
                        "label": "Write Syntax",
                        "type": "string"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/resource_schema.creation_opts"
                    },
                    "server": {
                        "default": "127.0.0.1:8086",
                        "description": "The IPv4 or IPv6 address or the hostname to connect to.</br><br/>A host entry has the following form: `Host[:Port]`.</br><br/>The InfluxDB default port 8086 is used if `[:Port]` is not specified.",
                        "label": "Server Host",
                        "type": "string"
                    },
                    "precision": {
                        "default": "ms",
                        "description": "InfluxDB time precision.",
                        "label": "Time Precision",
                        "symbols": [
                            "ns",
                            "us",
                            "ms",
                            "s"
                        ],
                        "type": "enum"
                    },
                    "bucket": {
                        "description": "InfluxDB bucket name.",
                        "label": "Bucket",
                        "type": "string"
                    },
                    "org": {
                        "description": "Organization name of InfluxDB.",
                        "label": "Organization",
                        "type": "string"
                    },
                    "token": {
                        "description": "InfluxDB token.",
                        "label": "Token",
                        "type": "string"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "bridge_redis.creation_opts_redis_single": {
                "properties": {
                    "worker_pool_size": {
                        "default": 16,
                        "description": "The number of buffer workers. Only applicable for egress type bridges.<br/>For bridges only have ingress direction data flow, it can be set to 0 otherwise must be greater than 0.",
                        "label": "Buffer Pool Size",
                        "minimum": 1,
                        "type": "number"
                    },
                    "health_check_interval": {
                        "default": "15s",
                        "description": "Health check interval.",
                        "label": "Health Check Interval",
                        "type": "duration"
                    },
                    "start_after_created": {
                        "default": "true",
                        "description": "Whether start the resource right after created.",
                        "label": "Start After Created",
                        "type": "boolean"
                    },
                    "start_timeout": {
                        "default": "5s",
                        "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
                        "label": "Start Timeout",
                        "type": "duration"
                    },
                    "auto_restart_interval": {
                        "default": "60s",
                        "description": "The auto restart interval after the resource is disconnected.",
                        "label": "Auto Restart Interval",
                        "oneOf": [
                            {
                                "type": "duration"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "query_mode": {
                        "default": "sync",
                        "description": "Query mode. Only support 'sync'.",
                        "label": "Query mode",
                        "symbols": [
                            "sync"
                        ],
                        "type": "enum"
                    },
                    "request_timeout": {
                        "default": "15s",
                        "description": "Timeout for requests.  If <code>query_mode</code> is <code>sync</code>, calls to the resource will be blocked for this amount of time before timing out.",
                        "label": "Request timeout",
                        "oneOf": [
                            {
                                "type": "duration"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "enable_batch": {
                        "default": true,
                        "deprecated": "since(\"v5.0.14\")",
                        "description": "Batch mode enabled.",
                        "label": "Enable batch",
                        "type": "boolean"
                    },
                    "batch_size": {
                        "default": 1,
                        "description": "Maximum batch count. If equal to 1, there's effectively no batching.",
                        "label": "Batch size",
                        "type": "string"
                    },
                    "batch_time": {
                        "default": "20ms",
                        "description": "Maximum batch waiting interval.",
                        "label": "Batch time",
                        "type": "duration"
                    },
                    "enable_queue": {
                        "default": false,
                        "deprecated": "since(\"v5.0.14\")",
                        "description": "Enable disk buffer queue (only applicable for egress bridges).<br/>When Enabled, messages will be buffered on disk when the bridge connection is down.<br/>When disabled the messages are buffered in RAM only.",
                        "label": "Enable disk buffer queue",
                        "type": "boolean"
                    },
                    "max_queue_bytes": {
                        "default": "100MB",
                        "description": "Maximum number of bytes to buffer for each buffer worker.",
                        "label": "Max buffer queue size",
                        "type": "byteSize"
                    }
                },
                "type": "object"
            },
            "bridge_kafka.get": {
                "required": [
                    "bootstrap_hosts",
                    "name",
                    "type"
                ],
                "properties": {
                    "status": {
                        "description": "The status of the bridge",
                        "label": "Bridge Status",
                        "symbols": [
                            "connected",
                            "disconnected",
                            "connecting"
                        ],
                        "type": "enum"
                    },
                    "node_status": {
                        "description": "Node status.",
                        "items": {
                            "$ref": "#/components/schemas/bridge.node_status"
                        },
                        "label": "Node Status",
                        "type": "array"
                    },
                    "type": {
                        "description": "The Bridge Type",
                        "label": "Bridge Type",
                        "symbols": [
                            "kafka"
                        ],
                        "type": "enum"
                    },
                    "name": {
                        "description": "Bridge name, used as a human-readable description of the bridge.",
                        "label": "Bridge Name",
                        "type": "string"
                    },
                    "enable": {
                        "default": true,
                        "description": "Enable (true) or disable (false) this Kafka bridge.",
                        "label": "Enable or Disable",
                        "type": "boolean"
                    },
                    "bootstrap_hosts": {
                        "description": "A comma separated list of Kafka <code>host[:port]</code> endpoints to bootstrap the client. Default port number is 9092.",
                        "label": "Bootstrap Hosts",
                        "type": "string"
                    },
                    "connect_timeout": {
                        "default": "5s",
                        "description": "Maximum wait time for TCP connection establishment (including authentication time if enabled).",
                        "label": "Connect Timeout",
                        "type": "duration"
                    },
                    "min_metadata_refresh_interval": {
                        "default": "3s",
                        "description": "Minimum time interval the client has to wait before refreshing Kafka broker and topic metadata. Setting too small value may add extra load on Kafka.",
                        "label": "Min Metadata Refresh Interval",
                        "type": "duration"
                    },
                    "metadata_request_timeout": {
                        "default": "5s",
                        "description": "Maximum wait time when fetching metadata from Kafka.",
                        "label": "Metadata Request Timeout",
                        "type": "duration"
                    },
                    "authentication": {
                        "default": "none",
                        "description": "Authentication configs.",
                        "label": "Authentication",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/bridge_kafka.auth_gssapi_kerberos"
                            },
                            {
                                "$ref": "#/components/schemas/bridge_kafka.auth_username_password"
                            },
                            {
                                "symbols": [
                                    "none"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "producer": {
                        "description": "Local MQTT data source and Kafka bridge configs.",
                        "label": "MQTT to Kafka",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/bridge_kafka.producer_opts"
                            },
                            {
                                "symbols": [
                                    "none"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "socket_opts": {
                        "description": "Extra socket options.",
                        "label": "Socket Options",
                        "$ref": "#/components/schemas/bridge_kafka.socket_opts"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "bridge_mongodb.post_rs": {
                "required": [
                    "name",
                    "type",
                    "database",
                    "replica_set_name",
                    "servers"
                ],
                "properties": {
                    "mongo_type": {
                        "default": "rs",
                        "description": "Replica set. Must be set to 'rs' when MongoDB server is running in 'replica set' mode.",
                        "label": "Replica set",
                        "symbols": [
                            "rs"
                        ],
                        "type": "enum"
                    },
                    "servers": {
                        "description": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`<br/>For each Node should be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The MongoDB default port 27017 is used if `[:Port]` is not specified.",
                        "label": "Servers",
                        "type": "string"
                    },
                    "w_mode": {
                        "default": "unsafe",
                        "description": "Write mode.",
                        "label": "Write Mode",
                        "symbols": [
                            "unsafe",
                            "safe"
                        ],
                        "type": "enum"
                    },
                    "r_mode": {
                        "default": "master",
                        "description": "Read mode.",
                        "label": "Read Mode",
                        "symbols": [
                            "master",
                            "slave_ok"
                        ],
                        "type": "enum"
                    },
                    "replica_set_name": {
                        "description": "Name of the replica set.",
                        "label": "Replica Set Name",
                        "type": "string"
                    },
                    "srv_record": {
                        "default": false,
                        "description": "Use DNS SRV record.",
                        "label": "Srv Record",
                        "type": "boolean"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "Size of the connection pool towards the bridge target service.",
                        "label": "Connection Pool Size",
                        "type": "string"
                    },
                    "username": {
                        "description": "EMQX's username in the external database.",
                        "label": "Username",
                        "type": "string"
                    },
                    "password": {
                        "description": "EMQX's password in the external database.",
                        "format": "password",
                        "label": "Password",
                        "type": "string"
                    },
                    "auth_source": {
                        "description": "Database name associated with the user's credentials.",
                        "label": "Auth Source",
                        "type": "string"
                    },
                    "database": {
                        "description": "Database name.",
                        "label": "Database Name",
                        "type": "string"
                    },
                    "topology": {
                        "description": "topology Description",
                        "label": "topology",
                        "$ref": "#/components/schemas/emqx_connector_mongo.topology"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    },
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this MongoDB Bridge",
                        "label": "Enable or disable",
                        "type": "boolean"
                    },
                    "collection": {
                        "default": "mqtt",
                        "description": "The collection where data will be stored into",
                        "label": "Collection to be used",
                        "type": "string"
                    },
                    "payload_template": {
                        "description": "The template for formatting the outgoing messages.  If undefined, rule engine will use JSON format to serialize all visible inputs, such as clientid, topic, payload etc.",
                        "label": "Payload template",
                        "type": "string"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/resource_schema.creation_opts_sync_only"
                    },
                    "type": {
                        "description": "The Bridge Type.",
                        "label": "Bridge Type",
                        "symbols": [
                            "mongodb_rs"
                        ],
                        "type": "enum"
                    },
                    "name": {
                        "description": "Bridge name.",
                        "label": "Bridge Name",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "bridge_mongodb.put_rs": {
                "required": [
                    "database",
                    "replica_set_name",
                    "servers"
                ],
                "properties": {
                    "mongo_type": {
                        "default": "rs",
                        "description": "Replica set. Must be set to 'rs' when MongoDB server is running in 'replica set' mode.",
                        "label": "Replica set",
                        "symbols": [
                            "rs"
                        ],
                        "type": "enum"
                    },
                    "servers": {
                        "description": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`<br/>For each Node should be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The MongoDB default port 27017 is used if `[:Port]` is not specified.",
                        "label": "Servers",
                        "type": "string"
                    },
                    "w_mode": {
                        "default": "unsafe",
                        "description": "Write mode.",
                        "label": "Write Mode",
                        "symbols": [
                            "unsafe",
                            "safe"
                        ],
                        "type": "enum"
                    },
                    "r_mode": {
                        "default": "master",
                        "description": "Read mode.",
                        "label": "Read Mode",
                        "symbols": [
                            "master",
                            "slave_ok"
                        ],
                        "type": "enum"
                    },
                    "replica_set_name": {
                        "description": "Name of the replica set.",
                        "label": "Replica Set Name",
                        "type": "string"
                    },
                    "srv_record": {
                        "default": false,
                        "description": "Use DNS SRV record.",
                        "label": "Srv Record",
                        "type": "boolean"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "Size of the connection pool towards the bridge target service.",
                        "label": "Connection Pool Size",
                        "type": "string"
                    },
                    "username": {
                        "description": "EMQX's username in the external database.",
                        "label": "Username",
                        "type": "string"
                    },
                    "password": {
                        "description": "EMQX's password in the external database.",
                        "format": "password",
                        "label": "Password",
                        "type": "string"
                    },
                    "auth_source": {
                        "description": "Database name associated with the user's credentials.",
                        "label": "Auth Source",
                        "type": "string"
                    },
                    "database": {
                        "description": "Database name.",
                        "label": "Database Name",
                        "type": "string"
                    },
                    "topology": {
                        "description": "topology Description",
                        "label": "topology",
                        "$ref": "#/components/schemas/emqx_connector_mongo.topology"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    },
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this MongoDB Bridge",
                        "label": "Enable or disable",
                        "type": "boolean"
                    },
                    "collection": {
                        "default": "mqtt",
                        "description": "The collection where data will be stored into",
                        "label": "Collection to be used",
                        "type": "string"
                    },
                    "payload_template": {
                        "description": "The template for formatting the outgoing messages.  If undefined, rule engine will use JSON format to serialize all visible inputs, such as clientid, topic, payload etc.",
                        "label": "Payload template",
                        "type": "string"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/resource_schema.creation_opts_sync_only"
                    }
                },
                "type": "object"
            },
            "bridge.metrics": {
                "properties": {
                    "dropped": {
                        "description": "Count of messages dropped.",
                        "label": "Dropped",
                        "type": "number"
                    },
                    "dropped.other": {
                        "description": "Count of messages dropped due to other reasons.",
                        "label": "Dropped Other",
                        "type": "number"
                    },
                    "dropped.queue_full": {
                        "description": "Count of messages dropped due to the queue is full.",
                        "label": "Dropped Queue Full",
                        "type": "number"
                    },
                    "dropped.resource_not_found": {
                        "description": "Count of messages dropped due to the resource is not found.",
                        "label": "Dropped Resource NotFound",
                        "type": "number"
                    },
                    "dropped.resource_stopped": {
                        "description": "Count of messages dropped due to the resource is stopped.",
                        "label": "Dropped Resource Stopped",
                        "type": "number"
                    },
                    "matched": {
                        "description": "Count of this bridge is matched and queried.",
                        "label": "Matched",
                        "type": "number"
                    },
                    "queuing": {
                        "description": "Count of messages that are currently queuing.",
                        "label": "Queued",
                        "type": "number"
                    },
                    "retried": {
                        "description": "Times of retried.",
                        "label": "Retried",
                        "type": "number"
                    },
                    "failed": {
                        "description": "Count of messages that sent failed.",
                        "label": "Sent Failed",
                        "type": "number"
                    },
                    "inflight": {
                        "description": "Count of messages that were sent asynchronously but ACKs are not yet received.",
                        "label": "Sent Inflight",
                        "type": "number"
                    },
                    "success": {
                        "description": "Count of messages that sent successfully.",
                        "label": "Sent Success",
                        "type": "number"
                    },
                    "rate": {
                        "description": "The rate of matched, times/second",
                        "label": "Rate",
                        "type": "number"
                    },
                    "rate_max": {
                        "description": "The max rate of matched, times/second",
                        "label": "Max Rate Of Matched",
                        "type": "number"
                    },
                    "rate_last5m": {
                        "description": "The average rate of matched in the last 5 minutes, times/second",
                        "label": "Last 5 Minutes Rate",
                        "type": "number"
                    },
                    "received": {
                        "description": "Count of messages that is received from the remote system.",
                        "label": "Received",
                        "type": "number"
                    }
                },
                "type": "object"
            },
            "bridge_kafka.post": {
                "required": [
                    "bootstrap_hosts",
                    "name",
                    "type"
                ],
                "properties": {
                    "type": {
                        "description": "The Bridge Type",
                        "label": "Bridge Type",
                        "symbols": [
                            "kafka"
                        ],
                        "type": "enum"
                    },
                    "name": {
                        "description": "Bridge name, used as a human-readable description of the bridge.",
                        "label": "Bridge Name",
                        "type": "string"
                    },
                    "enable": {
                        "default": true,
                        "description": "Enable (true) or disable (false) this Kafka bridge.",
                        "label": "Enable or Disable",
                        "type": "boolean"
                    },
                    "bootstrap_hosts": {
                        "description": "A comma separated list of Kafka <code>host[:port]</code> endpoints to bootstrap the client. Default port number is 9092.",
                        "label": "Bootstrap Hosts",
                        "type": "string"
                    },
                    "connect_timeout": {
                        "default": "5s",
                        "description": "Maximum wait time for TCP connection establishment (including authentication time if enabled).",
                        "label": "Connect Timeout",
                        "type": "duration"
                    },
                    "min_metadata_refresh_interval": {
                        "default": "3s",
                        "description": "Minimum time interval the client has to wait before refreshing Kafka broker and topic metadata. Setting too small value may add extra load on Kafka.",
                        "label": "Min Metadata Refresh Interval",
                        "type": "duration"
                    },
                    "metadata_request_timeout": {
                        "default": "5s",
                        "description": "Maximum wait time when fetching metadata from Kafka.",
                        "label": "Metadata Request Timeout",
                        "type": "duration"
                    },
                    "authentication": {
                        "default": "none",
                        "description": "Authentication configs.",
                        "label": "Authentication",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/bridge_kafka.auth_gssapi_kerberos"
                            },
                            {
                                "$ref": "#/components/schemas/bridge_kafka.auth_username_password"
                            },
                            {
                                "symbols": [
                                    "none"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "producer": {
                        "description": "Local MQTT data source and Kafka bridge configs.",
                        "label": "MQTT to Kafka",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/bridge_kafka.producer_opts"
                            },
                            {
                                "symbols": [
                                    "none"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "socket_opts": {
                        "description": "Extra socket options.",
                        "label": "Socket Options",
                        "$ref": "#/components/schemas/bridge_kafka.socket_opts"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "bridge_influxdb.get_api_v1": {
                "required": [
                    "name",
                    "type",
                    "database",
                    "write_syntax"
                ],
                "properties": {
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this bridge",
                        "label": "Enable Or Disable Bridge",
                        "type": "boolean"
                    },
                    "local_topic": {
                        "description": "The MQTT topic filter to be forwarded to the InfluxDB. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.</br><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded.",
                        "label": "Local Topic",
                        "type": "string"
                    },
                    "write_syntax": {
                        "description": "Conf of InfluxDB line protocol to write data points. It is a text-based format that provides the measurement, tag set, field set, and timestamp of a data point, and placeholder supported.<br/>See also [InfluxDB 2.3 Line Protocol](https://docs.influxdata.com/influxdb/v2.3/reference/syntax/line-protocol/) and<br/>[InfluxDB 1.8 Line Protocol](https://docs.influxdata.com/influxdb/v1.8/write_protocols/line_protocol_tutorial/) </br><br/>TLDR:</br><br/>```<br/><measurement>[,<tag_key>=<tag_value>[,<tag_key>=<tag_value>]] <field_key>=<field_value>[,<field_key>=<field_value>] [<timestamp>]<br/>```",
                        "format": "sql",
                        "label": "Write Syntax",
                        "type": "string"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/resource_schema.creation_opts"
                    },
                    "server": {
                        "default": "127.0.0.1:8086",
                        "description": "The IPv4 or IPv6 address or the hostname to connect to.</br><br/>A host entry has the following form: `Host[:Port]`.</br><br/>The InfluxDB default port 8086 is used if `[:Port]` is not specified.",
                        "label": "Server Host",
                        "type": "string"
                    },
                    "precision": {
                        "default": "ms",
                        "description": "InfluxDB time precision.",
                        "label": "Time Precision",
                        "symbols": [
                            "ns",
                            "us",
                            "ms",
                            "s"
                        ],
                        "type": "enum"
                    },
                    "database": {
                        "description": "InfluxDB database.",
                        "label": "Database",
                        "type": "string"
                    },
                    "username": {
                        "description": "InfluxDB username.",
                        "label": "Username",
                        "type": "string"
                    },
                    "password": {
                        "description": "InfluxDB password.",
                        "format": "password",
                        "label": "Password",
                        "type": "string"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    },
                    "type": {
                        "description": "The Bridge Type.",
                        "label": "Bridge Type",
                        "symbols": [
                            "influxdb_api_v1"
                        ],
                        "type": "enum"
                    },
                    "name": {
                        "description": "Bridge name.",
                        "label": "Bridge Name",
                        "type": "string"
                    },
                    "status": {
                        "description": "The status of the bridge",
                        "label": "Bridge Status",
                        "symbols": [
                            "connected",
                            "disconnected",
                            "connecting"
                        ],
                        "type": "enum"
                    },
                    "node_status": {
                        "description": "Node status.",
                        "items": {
                            "$ref": "#/components/schemas/bridge.node_status"
                        },
                        "label": "Node Status",
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "bridge_mysql.put": {
                "required": [
                    "database",
                    "server"
                ],
                "properties": {
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this bridge",
                        "label": "Enable Or Disable Bridge",
                        "type": "boolean"
                    },
                    "sql": {
                        "default": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, FROM_UNIXTIME(${timestamp}/1000))",
                        "description": "SQL Template",
                        "format": "sql",
                        "label": "SQL Template",
                        "type": "string"
                    },
                    "local_topic": {
                        "description": "The MQTT topic filter to be forwarded to MySQL. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.</br><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded.",
                        "label": "Local Topic",
                        "type": "string"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/bridge_mysql.creation_opts"
                    },
                    "server": {
                        "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The MySQL default port 3306 is used if `[:Port]` is not specified.",
                        "label": "Server Host",
                        "type": "string"
                    },
                    "database": {
                        "description": "Database name.",
                        "label": "Database Name",
                        "type": "string"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "Size of the connection pool towards the bridge target service.",
                        "label": "Connection Pool Size",
                        "type": "string"
                    },
                    "username": {
                        "default": "root",
                        "description": "EMQX's username in the external database.",
                        "label": "Username",
                        "type": "string"
                    },
                    "password": {
                        "description": "EMQX's password in the external database.",
                        "format": "password",
                        "label": "Password",
                        "type": "string"
                    },
                    "auto_reconnect": {
                        "default": true,
                        "deprecated": "since(\"v5.0.15\")",
                        "description": "Deprecated. Enable automatic reconnect to the database.",
                        "label": "Deprecated. Auto Reconnect Database",
                        "type": "boolean"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "connector-http.request": {
                "properties": {
                    "method": {
                        "description": "HTTP method.",
                        "label": "HTTP Method",
                        "type": "string"
                    },
                    "path": {
                        "description": "URL path.",
                        "label": "URL Path",
                        "type": "string"
                    },
                    "body": {
                        "description": "HTTP request body.",
                        "label": "HTTP Body",
                        "type": "string"
                    },
                    "headers": {
                        "description": "List of HTTP headers.",
                        "label": "HTTP Headers",
                        "type": "object"
                    },
                    "max_retries": {
                        "description": "Max retry times if error on sending request.",
                        "label": "Max Retries",
                        "minimum": 1,
                        "type": "number"
                    },
                    "request_timeout": {
                        "description": "HTTP request timeout.",
                        "label": "Request Timeout",
                        "type": "duration"
                    }
                },
                "type": "object"
            },
            "bridge_mongodb.post_sharded": {
                "required": [
                    "name",
                    "type",
                    "database",
                    "servers"
                ],
                "properties": {
                    "mongo_type": {
                        "default": "sharded",
                        "description": "Sharded cluster. Must be set to 'sharded' when MongoDB server is running in 'sharded' mode.",
                        "label": "Sharded cluster",
                        "symbols": [
                            "sharded"
                        ],
                        "type": "enum"
                    },
                    "servers": {
                        "description": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`<br/>For each Node should be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The MongoDB default port 27017 is used if `[:Port]` is not specified.",
                        "label": "Servers",
                        "type": "string"
                    },
                    "w_mode": {
                        "default": "unsafe",
                        "description": "Write mode.",
                        "label": "Write Mode",
                        "symbols": [
                            "unsafe",
                            "safe"
                        ],
                        "type": "enum"
                    },
                    "srv_record": {
                        "default": false,
                        "description": "Use DNS SRV record.",
                        "label": "Srv Record",
                        "type": "boolean"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "Size of the connection pool towards the bridge target service.",
                        "label": "Connection Pool Size",
                        "type": "string"
                    },
                    "username": {
                        "description": "EMQX's username in the external database.",
                        "label": "Username",
                        "type": "string"
                    },
                    "password": {
                        "description": "EMQX's password in the external database.",
                        "format": "password",
                        "label": "Password",
                        "type": "string"
                    },
                    "auth_source": {
                        "description": "Database name associated with the user's credentials.",
                        "label": "Auth Source",
                        "type": "string"
                    },
                    "database": {
                        "description": "Database name.",
                        "label": "Database Name",
                        "type": "string"
                    },
                    "topology": {
                        "description": "topology Description",
                        "label": "topology",
                        "$ref": "#/components/schemas/emqx_connector_mongo.topology"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    },
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this MongoDB Bridge",
                        "label": "Enable or disable",
                        "type": "boolean"
                    },
                    "collection": {
                        "default": "mqtt",
                        "description": "The collection where data will be stored into",
                        "label": "Collection to be used",
                        "type": "string"
                    },
                    "payload_template": {
                        "description": "The template for formatting the outgoing messages.  If undefined, rule engine will use JSON format to serialize all visible inputs, such as clientid, topic, payload etc.",
                        "label": "Payload template",
                        "type": "string"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/resource_schema.creation_opts_sync_only"
                    },
                    "type": {
                        "description": "The Bridge Type.",
                        "label": "Bridge Type",
                        "symbols": [
                            "mongodb_sharded"
                        ],
                        "type": "enum"
                    },
                    "name": {
                        "description": "Bridge name.",
                        "label": "Bridge Name",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "bridge.node_status": {
                "properties": {
                    "node": {
                        "description": "The node name.",
                        "example": "emqx@127.0.0.1",
                        "label": "Node Name",
                        "type": "string"
                    },
                    "status": {
                        "description": "status Description",
                        "label": "status",
                        "symbols": [
                            "connected",
                            "disconnected",
                            "connecting"
                        ],
                        "type": "enum"
                    }
                },
                "type": "object"
            },
            "bridge_hstreamdb.post": {
                "required": [
                    "connector",
                    "name",
                    "type"
                ],
                "properties": {
                    "type": {
                        "description": "The Bridge Type",
                        "label": "Bridge Type",
                        "symbols": [
                            "hstreamdb"
                        ],
                        "type": "enum"
                    },
                    "name": {
                        "description": "Bridge name, used as a human-readable description of the bridge.",
                        "label": "Bridge Name",
                        "type": "string"
                    },
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this bridge",
                        "label": "Enable Or Disable Bridge",
                        "type": "boolean"
                    },
                    "direction": {
                        "default": "egress",
                        "description": "The direction of this bridge, MUST be 'egress'",
                        "label": "Bridge Direction",
                        "symbols": [
                            "egress"
                        ],
                        "type": "enum"
                    },
                    "local_topic": {
                        "description": "The MQTT topic filter to be forwarded to the HStreamDB. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.</br><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded.",
                        "label": "Local Topic",
                        "type": "string"
                    },
                    "payload": {
                        "default": "${payload}",
                        "description": "The payload to be forwarded to the HStreamDB. Placeholders supported.",
                        "label": "Payload",
                        "type": "string"
                    },
                    "connector": {
                        "description": "Generic configuration for the connector.",
                        "example": "hstreamdb:demo",
                        "label": "Connector Generic Configuration",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/connector_hstreamdb.config"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "connector-mqtt.egress_remote": {
                "required": [
                    "topic"
                ],
                "properties": {
                    "topic": {
                        "description": "Forward to which topic of the remote broker.<br/><br/>Template with variables is allowed.",
                        "label": "Remote Topic",
                        "type": "string"
                    },
                    "qos": {
                        "default": 1,
                        "description": "The QoS of the MQTT message to be sent.<br/><br/>Template with variables is allowed.",
                        "label": "Remote QoS",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "symbols": [
                                    0,
                                    1,
                                    2
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "retain": {
                        "default": false,
                        "description": "The 'retain' flag of the MQTT message to be sent.<br/><br/>Template with variables is allowed.",
                        "label": "Retain Flag",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "boolean"
                            }
                        ]
                    },
                    "payload": {
                        "description": "The payload of the MQTT message to be sent.<br/><br/>Template with variables is allowed.",
                        "label": "Payload",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "bridge_redis.get_sentinel": {
                "required": [
                    "name",
                    "type",
                    "database",
                    "sentinel",
                    "servers",
                    "command_template"
                ],
                "properties": {
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this bridge",
                        "label": "Enable Or Disable Bridge",
                        "type": "boolean"
                    },
                    "local_topic": {
                        "description": "The MQTT topic filter to be forwarded to Redis. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.</br><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded.",
                        "label": "Local Topic",
                        "type": "string"
                    },
                    "command_template": {
                        "description": "Redis command template used to export messages. Each list element stands for a command name or its argument.<br/>For example, to push payloads in a Redis list by key `msgs`, the elements should be the following:<br/>`rpush`, `msgs`, `${payload}`.",
                        "items": {
                            "type": "string"
                        },
                        "label": "Redis Command Template",
                        "type": "array"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/bridge_redis.creation_opts_redis_sentinel"
                    },
                    "servers": {
                        "description": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`<br/>For each Node should be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The Redis default port 6379 is used if `[:Port]` is not specified.",
                        "label": "Servers",
                        "type": "string"
                    },
                    "redis_type": {
                        "default": "sentinel",
                        "description": "Sentinel mode. Must be set to 'sentinel' when Redis server is running in sentinel mode.",
                        "label": "Sentinel Mode",
                        "symbols": [
                            "sentinel"
                        ],
                        "type": "enum"
                    },
                    "sentinel": {
                        "description": "The cluster name in Redis sentinel mode.",
                        "label": "Cluster Name",
                        "type": "string"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "Size of the connection pool towards the bridge target service.",
                        "label": "Connection Pool Size",
                        "type": "string"
                    },
                    "password": {
                        "description": "EMQX's password in the external database.",
                        "format": "password",
                        "label": "Password",
                        "type": "string"
                    },
                    "database": {
                        "default": 0,
                        "description": "Redis database ID.",
                        "label": "Database ID",
                        "type": "number"
                    },
                    "auto_reconnect": {
                        "default": true,
                        "deprecated": "since(\"v5.0.15\")",
                        "description": "Deprecated. Enable automatic reconnect to the database.",
                        "label": "Deprecated. Auto Reconnect Database",
                        "type": "boolean"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    },
                    "type": {
                        "description": "The Bridge Type",
                        "label": "Bridge Type",
                        "symbols": [
                            "redis_sentinel"
                        ],
                        "type": "enum"
                    },
                    "name": {
                        "description": "Bridge name, used as a human-readable description of the bridge.",
                        "label": "Bridge Name",
                        "type": "string"
                    },
                    "status": {
                        "description": "The status of the bridge",
                        "label": "Bridge Status",
                        "symbols": [
                            "connected",
                            "disconnected",
                            "connecting"
                        ],
                        "type": "enum"
                    },
                    "node_status": {
                        "description": "Node status.",
                        "items": {
                            "$ref": "#/components/schemas/bridge.node_status"
                        },
                        "label": "Node Status",
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "bridge.node_metrics": {
                "properties": {
                    "node": {
                        "description": "The node name.",
                        "example": "emqx@127.0.0.1",
                        "label": "Node Name",
                        "type": "string"
                    },
                    "metrics": {
                        "description": "metrics Description",
                        "label": "metrics",
                        "$ref": "#/components/schemas/bridge.metrics"
                    }
                },
                "type": "object"
            },
            "bridge_mqtt.creation_opts": {
                "properties": {
                    "worker_pool_size": {
                        "default": 16,
                        "description": "The number of buffer workers. Only applicable for egress type bridges.<br/>For bridges only have ingress direction data flow, it can be set to 0 otherwise must be greater than 0.",
                        "label": "Buffer Pool Size",
                        "minimum": 1,
                        "type": "number"
                    },
                    "health_check_interval": {
                        "default": "15s",
                        "description": "Health check interval.",
                        "label": "Health Check Interval",
                        "type": "duration"
                    },
                    "start_after_created": {
                        "default": "true",
                        "description": "Whether start the resource right after created.",
                        "label": "Start After Created",
                        "type": "boolean"
                    },
                    "start_timeout": {
                        "default": "5s",
                        "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
                        "label": "Start Timeout",
                        "type": "duration"
                    },
                    "auto_restart_interval": {
                        "default": "60s",
                        "description": "The auto restart interval after the resource is disconnected.",
                        "label": "Auto Restart Interval",
                        "oneOf": [
                            {
                                "type": "duration"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "query_mode": {
                        "default": "async",
                        "description": "Query mode. Optional 'sync/async', default 'async'.",
                        "label": "Query mode",
                        "symbols": [
                            "sync",
                            "async"
                        ],
                        "type": "enum"
                    },
                    "request_timeout": {
                        "default": "15s",
                        "description": "Timeout for requests.  If <code>query_mode</code> is <code>sync</code>, calls to the resource will be blocked for this amount of time before timing out.",
                        "label": "Request timeout",
                        "oneOf": [
                            {
                                "type": "duration"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "async_inflight_window": {
                        "default": 100,
                        "description": "Async query inflight window.",
                        "label": "Async inflight window",
                        "type": "string"
                    },
                    "enable_queue": {
                        "default": false,
                        "deprecated": "since(\"v5.0.14\")",
                        "description": "Enable disk buffer queue (only applicable for egress bridges).<br/>When Enabled, messages will be buffered on disk when the bridge connection is down.<br/>When disabled the messages are buffered in RAM only.",
                        "label": "Enable disk buffer queue",
                        "type": "boolean"
                    },
                    "max_queue_bytes": {
                        "default": "100MB",
                        "description": "Maximum number of bytes to buffer for each buffer worker.",
                        "label": "Max buffer queue size",
                        "type": "byteSize"
                    }
                },
                "type": "object"
            },
            "bridge_kafka.auth_username_password": {
                "required": [
                    "password",
                    "username",
                    "mechanism"
                ],
                "properties": {
                    "mechanism": {
                        "description": "SASL authentication mechanism.",
                        "label": "Mechanism",
                        "symbols": [
                            "plain",
                            "scram_sha_256",
                            "scram_sha_512"
                        ],
                        "type": "enum"
                    },
                    "username": {
                        "description": "SASL authentication username.",
                        "label": "Username",
                        "type": "string"
                    },
                    "password": {
                        "description": "SASL authentication password.",
                        "label": "Password",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "bridge_matrix.post": {
                "required": [
                    "database",
                    "server",
                    "name",
                    "type"
                ],
                "properties": {
                    "type": {
                        "description": "The Bridge Type",
                        "label": "Bridge Type",
                        "symbols": [
                            "matrix"
                        ],
                        "type": "enum"
                    },
                    "name": {
                        "description": "Bridge name.",
                        "label": "Bridge Name",
                        "type": "string"
                    },
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this bridge",
                        "label": "Enable Or Disable Bridge",
                        "type": "boolean"
                    },
                    "sql": {
                        "default": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                        "description": "SQL Template",
                        "format": "sql",
                        "label": "SQL Template",
                        "type": "string"
                    },
                    "local_topic": {
                        "description": "The MQTT topic filter to be forwarded to PostgreSQL. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.</br><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded.",
                        "label": "Local Topic",
                        "type": "string"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/bridge_pgsql.creation_opts"
                    },
                    "server": {
                        "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The PostgreSQL default port 5432 is used if `[:Port]` is not specified.",
                        "label": "Server Host",
                        "type": "string"
                    },
                    "database": {
                        "description": "Database name.",
                        "label": "Database Name",
                        "type": "string"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "Size of the connection pool towards the bridge target service.",
                        "label": "Connection Pool Size",
                        "type": "string"
                    },
                    "username": {
                        "description": "EMQX's username in the external database.",
                        "label": "Username",
                        "type": "string"
                    },
                    "password": {
                        "description": "EMQX's password in the external database.",
                        "format": "password",
                        "label": "Password",
                        "type": "string"
                    },
                    "auto_reconnect": {
                        "default": true,
                        "deprecated": "since(\"v5.0.15\")",
                        "description": "Deprecated. Enable automatic reconnect to the database.",
                        "label": "Deprecated. Auto Reconnect Database",
                        "type": "boolean"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "bridge_influxdb.put_api_v1": {
                "required": [
                    "database",
                    "write_syntax"
                ],
                "properties": {
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this bridge",
                        "label": "Enable Or Disable Bridge",
                        "type": "boolean"
                    },
                    "local_topic": {
                        "description": "The MQTT topic filter to be forwarded to the InfluxDB. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.</br><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded.",
                        "label": "Local Topic",
                        "type": "string"
                    },
                    "write_syntax": {
                        "description": "Conf of InfluxDB line protocol to write data points. It is a text-based format that provides the measurement, tag set, field set, and timestamp of a data point, and placeholder supported.<br/>See also [InfluxDB 2.3 Line Protocol](https://docs.influxdata.com/influxdb/v2.3/reference/syntax/line-protocol/) and<br/>[InfluxDB 1.8 Line Protocol](https://docs.influxdata.com/influxdb/v1.8/write_protocols/line_protocol_tutorial/) </br><br/>TLDR:</br><br/>```<br/><measurement>[,<tag_key>=<tag_value>[,<tag_key>=<tag_value>]] <field_key>=<field_value>[,<field_key>=<field_value>] [<timestamp>]<br/>```",
                        "format": "sql",
                        "label": "Write Syntax",
                        "type": "string"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/resource_schema.creation_opts"
                    },
                    "server": {
                        "default": "127.0.0.1:8086",
                        "description": "The IPv4 or IPv6 address or the hostname to connect to.</br><br/>A host entry has the following form: `Host[:Port]`.</br><br/>The InfluxDB default port 8086 is used if `[:Port]` is not specified.",
                        "label": "Server Host",
                        "type": "string"
                    },
                    "precision": {
                        "default": "ms",
                        "description": "InfluxDB time precision.",
                        "label": "Time Precision",
                        "symbols": [
                            "ns",
                            "us",
                            "ms",
                            "s"
                        ],
                        "type": "enum"
                    },
                    "database": {
                        "description": "InfluxDB database.",
                        "label": "Database",
                        "type": "string"
                    },
                    "username": {
                        "description": "InfluxDB username.",
                        "label": "Username",
                        "type": "string"
                    },
                    "password": {
                        "description": "InfluxDB password.",
                        "format": "password",
                        "label": "Password",
                        "type": "string"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "bridge_pgsql.put": {
                "required": [
                    "database",
                    "server"
                ],
                "properties": {
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this bridge",
                        "label": "Enable Or Disable Bridge",
                        "type": "boolean"
                    },
                    "sql": {
                        "default": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                        "description": "SQL Template",
                        "format": "sql",
                        "label": "SQL Template",
                        "type": "string"
                    },
                    "local_topic": {
                        "description": "The MQTT topic filter to be forwarded to PostgreSQL. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.</br><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded.",
                        "label": "Local Topic",
                        "type": "string"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/bridge_pgsql.creation_opts"
                    },
                    "server": {
                        "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The PostgreSQL default port 5432 is used if `[:Port]` is not specified.",
                        "label": "Server Host",
                        "type": "string"
                    },
                    "database": {
                        "description": "Database name.",
                        "label": "Database Name",
                        "type": "string"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "Size of the connection pool towards the bridge target service.",
                        "label": "Connection Pool Size",
                        "type": "string"
                    },
                    "username": {
                        "description": "EMQX's username in the external database.",
                        "label": "Username",
                        "type": "string"
                    },
                    "password": {
                        "description": "EMQX's password in the external database.",
                        "format": "password",
                        "label": "Password",
                        "type": "string"
                    },
                    "auto_reconnect": {
                        "default": true,
                        "deprecated": "since(\"v5.0.15\")",
                        "description": "Deprecated. Enable automatic reconnect to the database.",
                        "label": "Deprecated. Auto Reconnect Database",
                        "type": "boolean"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "bridge_pgsql.post": {
                "required": [
                    "database",
                    "server",
                    "name",
                    "type"
                ],
                "properties": {
                    "type": {
                        "description": "The Bridge Type",
                        "label": "Bridge Type",
                        "symbols": [
                            "pgsql"
                        ],
                        "type": "enum"
                    },
                    "name": {
                        "description": "Bridge name.",
                        "label": "Bridge Name",
                        "type": "string"
                    },
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this bridge",
                        "label": "Enable Or Disable Bridge",
                        "type": "boolean"
                    },
                    "sql": {
                        "default": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                        "description": "SQL Template",
                        "format": "sql",
                        "label": "SQL Template",
                        "type": "string"
                    },
                    "local_topic": {
                        "description": "The MQTT topic filter to be forwarded to PostgreSQL. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.</br><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded.",
                        "label": "Local Topic",
                        "type": "string"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/bridge_pgsql.creation_opts"
                    },
                    "server": {
                        "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The PostgreSQL default port 5432 is used if `[:Port]` is not specified.",
                        "label": "Server Host",
                        "type": "string"
                    },
                    "database": {
                        "description": "Database name.",
                        "label": "Database Name",
                        "type": "string"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "Size of the connection pool towards the bridge target service.",
                        "label": "Connection Pool Size",
                        "type": "string"
                    },
                    "username": {
                        "description": "EMQX's username in the external database.",
                        "label": "Username",
                        "type": "string"
                    },
                    "password": {
                        "description": "EMQX's password in the external database.",
                        "format": "password",
                        "label": "Password",
                        "type": "string"
                    },
                    "auto_reconnect": {
                        "default": true,
                        "deprecated": "since(\"v5.0.15\")",
                        "description": "Deprecated. Enable automatic reconnect to the database.",
                        "label": "Deprecated. Auto Reconnect Database",
                        "type": "boolean"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "bridge_gcp_pubsub.put": {
                "required": [
                    "service_account_json",
                    "pubsub_topic"
                ],
                "properties": {
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this bridge",
                        "label": "Enable Or Disable Bridge",
                        "type": "boolean"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/resource_schema.creation_opts"
                    },
                    "connect_timeout": {
                        "default": "15s",
                        "description": "The timeout when connecting to the HTTP server.",
                        "label": "Connect Timeout",
                        "type": "duration"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "The pool size.",
                        "label": "Pool Size",
                        "type": "string"
                    },
                    "pipelining": {
                        "default": 100,
                        "description": "A positive integer. Whether to send HTTP requests continuously, when set to 1, it means that after each HTTP request is sent, you need to wait for the server to return and then continue to send the next request.",
                        "label": "HTTP Pipelineing",
                        "type": "string"
                    },
                    "max_retries": {
                        "default": 2,
                        "description": "Max retry times if an error occurs when sending a request.",
                        "label": "Max Retries",
                        "minimum": 1,
                        "type": "number"
                    },
                    "request_timeout": {
                        "default": "15s",
                        "description": "HTTP request timeout.",
                        "label": "Request Timeout",
                        "type": "duration"
                    },
                    "payload_template": {
                        "default": "",
                        "description": "The template for formatting the outgoing messages.  If undefined, will send all the available context in JSON format.",
                        "label": "Payload template",
                        "type": "string"
                    },
                    "local_topic": {
                        "description": "The MQTT topic filter to be forwarded to GCP PubSub. All MQTT 'PUBLISH' messages with the topic<br/>matching `local_topic` will be forwarded.</br><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded.",
                        "label": "Local Topic",
                        "type": "string"
                    },
                    "pubsub_topic": {
                        "description": "The GCP PubSub topic to publish messages to.",
                        "label": "GCP PubSub Topic",
                        "type": "string"
                    },
                    "service_account_json": {
                        "description": "JSON containing the GCP Service Account credentials to be used with PubSub.<br/>When a GCP Service Account is created (as described in https://developers.google.com/identity/protocols/oauth2/service-account#creatinganaccount), you have the option of downloading the credentials in JSON form.  That's the file needed.",
                        "label": "GCP Service Account Credentials",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "bridge_hstreamdb.put": {
                "required": [
                    "connector"
                ],
                "properties": {
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this bridge",
                        "label": "Enable Or Disable Bridge",
                        "type": "boolean"
                    },
                    "direction": {
                        "default": "egress",
                        "description": "The direction of this bridge, MUST be 'egress'",
                        "label": "Bridge Direction",
                        "symbols": [
                            "egress"
                        ],
                        "type": "enum"
                    },
                    "local_topic": {
                        "description": "The MQTT topic filter to be forwarded to the HStreamDB. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.</br><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded.",
                        "label": "Local Topic",
                        "type": "string"
                    },
                    "payload": {
                        "default": "${payload}",
                        "description": "The payload to be forwarded to the HStreamDB. Placeholders supported.",
                        "label": "Payload",
                        "type": "string"
                    },
                    "connector": {
                        "description": "Generic configuration for the connector.",
                        "example": "hstreamdb:demo",
                        "label": "Connector Generic Configuration",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/connector_hstreamdb.config"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "bridge_mongodb.get_sharded": {
                "required": [
                    "name",
                    "type",
                    "database",
                    "servers"
                ],
                "properties": {
                    "status": {
                        "description": "The status of the bridge",
                        "label": "Bridge Status",
                        "symbols": [
                            "connected",
                            "disconnected",
                            "connecting"
                        ],
                        "type": "enum"
                    },
                    "node_status": {
                        "description": "Node status.",
                        "items": {
                            "$ref": "#/components/schemas/bridge.node_status"
                        },
                        "label": "Node Status",
                        "type": "array"
                    },
                    "mongo_type": {
                        "default": "sharded",
                        "description": "Sharded cluster. Must be set to 'sharded' when MongoDB server is running in 'sharded' mode.",
                        "label": "Sharded cluster",
                        "symbols": [
                            "sharded"
                        ],
                        "type": "enum"
                    },
                    "servers": {
                        "description": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`<br/>For each Node should be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The MongoDB default port 27017 is used if `[:Port]` is not specified.",
                        "label": "Servers",
                        "type": "string"
                    },
                    "w_mode": {
                        "default": "unsafe",
                        "description": "Write mode.",
                        "label": "Write Mode",
                        "symbols": [
                            "unsafe",
                            "safe"
                        ],
                        "type": "enum"
                    },
                    "srv_record": {
                        "default": false,
                        "description": "Use DNS SRV record.",
                        "label": "Srv Record",
                        "type": "boolean"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "Size of the connection pool towards the bridge target service.",
                        "label": "Connection Pool Size",
                        "type": "string"
                    },
                    "username": {
                        "description": "EMQX's username in the external database.",
                        "label": "Username",
                        "type": "string"
                    },
                    "password": {
                        "description": "EMQX's password in the external database.",
                        "format": "password",
                        "label": "Password",
                        "type": "string"
                    },
                    "auth_source": {
                        "description": "Database name associated with the user's credentials.",
                        "label": "Auth Source",
                        "type": "string"
                    },
                    "database": {
                        "description": "Database name.",
                        "label": "Database Name",
                        "type": "string"
                    },
                    "topology": {
                        "description": "topology Description",
                        "label": "topology",
                        "$ref": "#/components/schemas/emqx_connector_mongo.topology"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    },
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this MongoDB Bridge",
                        "label": "Enable or disable",
                        "type": "boolean"
                    },
                    "collection": {
                        "default": "mqtt",
                        "description": "The collection where data will be stored into",
                        "label": "Collection to be used",
                        "type": "string"
                    },
                    "payload_template": {
                        "description": "The template for formatting the outgoing messages.  If undefined, rule engine will use JSON format to serialize all visible inputs, such as clientid, topic, payload etc.",
                        "label": "Payload template",
                        "type": "string"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/resource_schema.creation_opts_sync_only"
                    },
                    "type": {
                        "description": "The Bridge Type.",
                        "label": "Bridge Type",
                        "symbols": [
                            "mongodb_sharded"
                        ],
                        "type": "enum"
                    },
                    "name": {
                        "description": "Bridge name.",
                        "label": "Bridge Name",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "bridge_mongodb.post_single": {
                "required": [
                    "name",
                    "type",
                    "database",
                    "server"
                ],
                "properties": {
                    "mongo_type": {
                        "default": "single",
                        "description": "Standalone instance. Must be set to 'single' when MongoDB server is running in standalone mode.",
                        "label": "Standalone instance",
                        "symbols": [
                            "single"
                        ],
                        "type": "enum"
                    },
                    "server": {
                        "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The MongoDB default port 27017 is used if `[:Port]` is not specified.",
                        "label": "Server Host",
                        "type": "string"
                    },
                    "w_mode": {
                        "default": "unsafe",
                        "description": "Write mode.",
                        "label": "Write Mode",
                        "symbols": [
                            "unsafe",
                            "safe"
                        ],
                        "type": "enum"
                    },
                    "srv_record": {
                        "default": false,
                        "description": "Use DNS SRV record.",
                        "label": "Srv Record",
                        "type": "boolean"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "Size of the connection pool towards the bridge target service.",
                        "label": "Connection Pool Size",
                        "type": "string"
                    },
                    "username": {
                        "description": "EMQX's username in the external database.",
                        "label": "Username",
                        "type": "string"
                    },
                    "password": {
                        "description": "EMQX's password in the external database.",
                        "format": "password",
                        "label": "Password",
                        "type": "string"
                    },
                    "auth_source": {
                        "description": "Database name associated with the user's credentials.",
                        "label": "Auth Source",
                        "type": "string"
                    },
                    "database": {
                        "description": "Database name.",
                        "label": "Database Name",
                        "type": "string"
                    },
                    "topology": {
                        "description": "topology Description",
                        "label": "topology",
                        "$ref": "#/components/schemas/emqx_connector_mongo.topology"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    },
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this MongoDB Bridge",
                        "label": "Enable or disable",
                        "type": "boolean"
                    },
                    "collection": {
                        "default": "mqtt",
                        "description": "The collection where data will be stored into",
                        "label": "Collection to be used",
                        "type": "string"
                    },
                    "payload_template": {
                        "description": "The template for formatting the outgoing messages.  If undefined, rule engine will use JSON format to serialize all visible inputs, such as clientid, topic, payload etc.",
                        "label": "Payload template",
                        "type": "string"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/resource_schema.creation_opts_sync_only"
                    },
                    "type": {
                        "description": "The Bridge Type.",
                        "label": "Bridge Type",
                        "symbols": [
                            "mongodb_single"
                        ],
                        "type": "enum"
                    },
                    "name": {
                        "description": "Bridge name.",
                        "label": "Bridge Name",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "connector-mqtt.egress": {
                "required": [
                    "remote"
                ],
                "properties": {
                    "local": {
                        "description": "The configs about receiving messages from local broker.",
                        "label": "Local Configs",
                        "$ref": "#/components/schemas/connector-mqtt.egress_local"
                    },
                    "remote": {
                        "description": "The configs about sending message to the remote broker.",
                        "label": "Remote Configs",
                        "$ref": "#/components/schemas/connector-mqtt.egress_remote"
                    }
                },
                "type": "object"
            },
            "resource_schema.creation_opts_sync_only": {
                "properties": {
                    "worker_pool_size": {
                        "default": 16,
                        "description": "The number of buffer workers. Only applicable for egress type bridges.<br/>For bridges only have ingress direction data flow, it can be set to 0 otherwise must be greater than 0.",
                        "label": "Buffer Pool Size",
                        "minimum": 1,
                        "type": "number"
                    },
                    "health_check_interval": {
                        "default": "15s",
                        "description": "Health check interval.",
                        "label": "Health Check Interval",
                        "type": "duration"
                    },
                    "start_after_created": {
                        "default": "true",
                        "description": "Whether start the resource right after created.",
                        "label": "Start After Created",
                        "type": "boolean"
                    },
                    "start_timeout": {
                        "default": "5s",
                        "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
                        "label": "Start Timeout",
                        "type": "duration"
                    },
                    "auto_restart_interval": {
                        "default": "60s",
                        "description": "The auto restart interval after the resource is disconnected.",
                        "label": "Auto Restart Interval",
                        "oneOf": [
                            {
                                "type": "duration"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "query_mode": {
                        "default": "sync",
                        "description": "Query mode. Only support 'sync'.",
                        "label": "Query mode",
                        "symbols": [
                            "sync"
                        ],
                        "type": "enum"
                    },
                    "request_timeout": {
                        "default": "15s",
                        "description": "Timeout for requests.  If <code>query_mode</code> is <code>sync</code>, calls to the resource will be blocked for this amount of time before timing out.",
                        "label": "Request timeout",
                        "oneOf": [
                            {
                                "type": "duration"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "enable_batch": {
                        "default": true,
                        "deprecated": "since(\"v5.0.14\")",
                        "description": "Batch mode enabled.",
                        "label": "Enable batch",
                        "type": "boolean"
                    },
                    "batch_size": {
                        "default": 1,
                        "description": "Maximum batch count. If equal to 1, there's effectively no batching.",
                        "label": "Batch size",
                        "type": "string"
                    },
                    "batch_time": {
                        "default": "20ms",
                        "description": "Maximum batch waiting interval.",
                        "label": "Batch time",
                        "type": "duration"
                    },
                    "enable_queue": {
                        "default": false,
                        "deprecated": "since(\"v5.0.14\")",
                        "description": "Enable disk buffer queue (only applicable for egress bridges).<br/>When Enabled, messages will be buffered on disk when the bridge connection is down.<br/>When disabled the messages are buffered in RAM only.",
                        "label": "Enable disk buffer queue",
                        "type": "boolean"
                    },
                    "max_queue_bytes": {
                        "default": "100MB",
                        "description": "Maximum number of bytes to buffer for each buffer worker.",
                        "label": "Max buffer queue size",
                        "type": "byteSize"
                    }
                },
                "type": "object"
            },
            "bridge_matrix.put": {
                "required": [
                    "database",
                    "server"
                ],
                "properties": {
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this bridge",
                        "label": "Enable Or Disable Bridge",
                        "type": "boolean"
                    },
                    "sql": {
                        "default": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                        "description": "SQL Template",
                        "format": "sql",
                        "label": "SQL Template",
                        "type": "string"
                    },
                    "local_topic": {
                        "description": "The MQTT topic filter to be forwarded to PostgreSQL. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.</br><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded.",
                        "label": "Local Topic",
                        "type": "string"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/bridge_pgsql.creation_opts"
                    },
                    "server": {
                        "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The PostgreSQL default port 5432 is used if `[:Port]` is not specified.",
                        "label": "Server Host",
                        "type": "string"
                    },
                    "database": {
                        "description": "Database name.",
                        "label": "Database Name",
                        "type": "string"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "Size of the connection pool towards the bridge target service.",
                        "label": "Connection Pool Size",
                        "type": "string"
                    },
                    "username": {
                        "description": "EMQX's username in the external database.",
                        "label": "Username",
                        "type": "string"
                    },
                    "password": {
                        "description": "EMQX's password in the external database.",
                        "format": "password",
                        "label": "Password",
                        "type": "string"
                    },
                    "auto_reconnect": {
                        "default": true,
                        "deprecated": "since(\"v5.0.15\")",
                        "description": "Deprecated. Enable automatic reconnect to the database.",
                        "label": "Deprecated. Auto Reconnect Database",
                        "type": "boolean"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "bridge_mongodb.get_rs": {
                "required": [
                    "name",
                    "type",
                    "database",
                    "replica_set_name",
                    "servers"
                ],
                "properties": {
                    "status": {
                        "description": "The status of the bridge",
                        "label": "Bridge Status",
                        "symbols": [
                            "connected",
                            "disconnected",
                            "connecting"
                        ],
                        "type": "enum"
                    },
                    "node_status": {
                        "description": "Node status.",
                        "items": {
                            "$ref": "#/components/schemas/bridge.node_status"
                        },
                        "label": "Node Status",
                        "type": "array"
                    },
                    "mongo_type": {
                        "default": "rs",
                        "description": "Replica set. Must be set to 'rs' when MongoDB server is running in 'replica set' mode.",
                        "label": "Replica set",
                        "symbols": [
                            "rs"
                        ],
                        "type": "enum"
                    },
                    "servers": {
                        "description": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`<br/>For each Node should be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The MongoDB default port 27017 is used if `[:Port]` is not specified.",
                        "label": "Servers",
                        "type": "string"
                    },
                    "w_mode": {
                        "default": "unsafe",
                        "description": "Write mode.",
                        "label": "Write Mode",
                        "symbols": [
                            "unsafe",
                            "safe"
                        ],
                        "type": "enum"
                    },
                    "r_mode": {
                        "default": "master",
                        "description": "Read mode.",
                        "label": "Read Mode",
                        "symbols": [
                            "master",
                            "slave_ok"
                        ],
                        "type": "enum"
                    },
                    "replica_set_name": {
                        "description": "Name of the replica set.",
                        "label": "Replica Set Name",
                        "type": "string"
                    },
                    "srv_record": {
                        "default": false,
                        "description": "Use DNS SRV record.",
                        "label": "Srv Record",
                        "type": "boolean"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "Size of the connection pool towards the bridge target service.",
                        "label": "Connection Pool Size",
                        "type": "string"
                    },
                    "username": {
                        "description": "EMQX's username in the external database.",
                        "label": "Username",
                        "type": "string"
                    },
                    "password": {
                        "description": "EMQX's password in the external database.",
                        "format": "password",
                        "label": "Password",
                        "type": "string"
                    },
                    "auth_source": {
                        "description": "Database name associated with the user's credentials.",
                        "label": "Auth Source",
                        "type": "string"
                    },
                    "database": {
                        "description": "Database name.",
                        "label": "Database Name",
                        "type": "string"
                    },
                    "topology": {
                        "description": "topology Description",
                        "label": "topology",
                        "$ref": "#/components/schemas/emqx_connector_mongo.topology"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    },
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this MongoDB Bridge",
                        "label": "Enable or disable",
                        "type": "boolean"
                    },
                    "collection": {
                        "default": "mqtt",
                        "description": "The collection where data will be stored into",
                        "label": "Collection to be used",
                        "type": "string"
                    },
                    "payload_template": {
                        "description": "The template for formatting the outgoing messages.  If undefined, rule engine will use JSON format to serialize all visible inputs, such as clientid, topic, payload etc.",
                        "label": "Payload template",
                        "type": "string"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/resource_schema.creation_opts_sync_only"
                    },
                    "type": {
                        "description": "The Bridge Type.",
                        "label": "Bridge Type",
                        "symbols": [
                            "mongodb_rs"
                        ],
                        "type": "enum"
                    },
                    "name": {
                        "description": "Bridge name.",
                        "label": "Bridge Name",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "bridge_mongodb.put_single": {
                "required": [
                    "database",
                    "server"
                ],
                "properties": {
                    "mongo_type": {
                        "default": "single",
                        "description": "Standalone instance. Must be set to 'single' when MongoDB server is running in standalone mode.",
                        "label": "Standalone instance",
                        "symbols": [
                            "single"
                        ],
                        "type": "enum"
                    },
                    "server": {
                        "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The MongoDB default port 27017 is used if `[:Port]` is not specified.",
                        "label": "Server Host",
                        "type": "string"
                    },
                    "w_mode": {
                        "default": "unsafe",
                        "description": "Write mode.",
                        "label": "Write Mode",
                        "symbols": [
                            "unsafe",
                            "safe"
                        ],
                        "type": "enum"
                    },
                    "srv_record": {
                        "default": false,
                        "description": "Use DNS SRV record.",
                        "label": "Srv Record",
                        "type": "boolean"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "Size of the connection pool towards the bridge target service.",
                        "label": "Connection Pool Size",
                        "type": "string"
                    },
                    "username": {
                        "description": "EMQX's username in the external database.",
                        "label": "Username",
                        "type": "string"
                    },
                    "password": {
                        "description": "EMQX's password in the external database.",
                        "format": "password",
                        "label": "Password",
                        "type": "string"
                    },
                    "auth_source": {
                        "description": "Database name associated with the user's credentials.",
                        "label": "Auth Source",
                        "type": "string"
                    },
                    "database": {
                        "description": "Database name.",
                        "label": "Database Name",
                        "type": "string"
                    },
                    "topology": {
                        "description": "topology Description",
                        "label": "topology",
                        "$ref": "#/components/schemas/emqx_connector_mongo.topology"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    },
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this MongoDB Bridge",
                        "label": "Enable or disable",
                        "type": "boolean"
                    },
                    "collection": {
                        "default": "mqtt",
                        "description": "The collection where data will be stored into",
                        "label": "Collection to be used",
                        "type": "string"
                    },
                    "payload_template": {
                        "description": "The template for formatting the outgoing messages.  If undefined, rule engine will use JSON format to serialize all visible inputs, such as clientid, topic, payload etc.",
                        "label": "Payload template",
                        "type": "string"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/resource_schema.creation_opts_sync_only"
                    }
                },
                "type": "object"
            },
            "bridge_webhook.get": {
                "required": [
                    "url",
                    "name",
                    "type"
                ],
                "properties": {
                    "status": {
                        "description": "The status of the bridge",
                        "label": "Bridge Status",
                        "symbols": [
                            "connected",
                            "disconnected",
                            "connecting"
                        ],
                        "type": "enum"
                    },
                    "node_status": {
                        "description": "Node status.",
                        "items": {
                            "$ref": "#/components/schemas/bridge.node_status"
                        },
                        "label": "Node Status",
                        "type": "array"
                    },
                    "type": {
                        "description": "The Bridge Type",
                        "label": "Bridge Type",
                        "symbols": [
                            "webhook"
                        ],
                        "type": "enum"
                    },
                    "name": {
                        "description": "Bridge name, used as a human-readable description of the bridge.",
                        "label": "Bridge Name",
                        "type": "string"
                    },
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this bridge",
                        "label": "Enable Or Disable Bridge",
                        "type": "boolean"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/bridge_webhook.creation_opts"
                    },
                    "connect_timeout": {
                        "default": "15s",
                        "description": "The timeout when connecting to the HTTP server.",
                        "label": "Connect Timeout",
                        "type": "duration"
                    },
                    "retry_interval": {
                        "deprecated": "since(\"5.0.4\")",
                        "description": "retry_interval Description",
                        "label": "retry_interval",
                        "type": "duration"
                    },
                    "pool_type": {
                        "default": "random",
                        "description": "The type of the pool. Can be one of `random`, `hash`.",
                        "label": "Pool Type",
                        "symbols": [
                            "random",
                            "hash"
                        ],
                        "type": "enum"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "The pool size.",
                        "label": "Pool Size",
                        "type": "string"
                    },
                    "enable_pipelining": {
                        "default": 100,
                        "description": "A positive integer. Whether to send HTTP requests continuously, when set to 1, it means that after each HTTP request is sent, you need to wait for the server to return and then continue to send the next request.",
                        "label": "HTTP Pipelineing",
                        "type": "string"
                    },
                    "request": {
                        "description": "Configure HTTP request parameters.",
                        "label": "Request",
                        "$ref": "#/components/schemas/connector-http.request"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    },
                    "url": {
                        "description": "The URL of the HTTP Bridge.<br/><br/>Template with variables is allowed in the path, but variables cannot be used in the scheme, host,<br/>or port part.<br/><br/>For example, <code> http://localhost:9901/${topic} </code> is allowed, but<br/><code> http://${host}:9901/message </code> or <code> http://localhost:${port}/message </code><br/>is not allowed.",
                        "label": "HTTP Bridge",
                        "type": "string"
                    },
                    "direction": {
                        "deprecated": "since(\"5.0.12\")",
                        "description": "Deprecated, The direction of this bridge, MUST be 'egress'",
                        "label": "Bridge Direction",
                        "symbols": [
                            "egress"
                        ],
                        "type": "enum"
                    },
                    "local_topic": {
                        "description": "The MQTT topic filter to be forwarded to the HTTP server. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded.",
                        "label": "Local Topic",
                        "type": "string"
                    },
                    "method": {
                        "default": "post",
                        "description": "The method of the HTTP request. All the available methods are: post, put, get, delete.<br/><br/>Template with variables is allowed.",
                        "label": "HTTP Method",
                        "symbols": [
                            "post",
                            "put",
                            "get",
                            "delete"
                        ],
                        "type": "enum"
                    },
                    "headers": {
                        "default": {
                            "accept": "application/json",
                            "cache-control": "no-cache",
                            "connection": "keep-alive",
                            "content-type": "application/json",
                            "keep-alive": "timeout=5"
                        },
                        "description": "The headers of the HTTP request.<br/><br/>Template with variables is allowed.",
                        "label": "HTTP Header",
                        "type": "object"
                    },
                    "body": {
                        "description": "The body of the HTTP request.<br/><br/>If not provided, the body will be a JSON object of all the available fields.<br/><br/>There, 'all the available fields' means the context of a MQTT message when<br/>this webhook is triggered by receiving a MQTT message (the `local_topic` is set),<br/>or the context of the event when this webhook is triggered by a rule (i.e. this<br/>webhook is used as an action of a rule).<br/><br/>Template with variables is allowed.",
                        "label": "HTTP Body",
                        "type": "string"
                    },
                    "max_retries": {
                        "default": 2,
                        "description": "HTTP request max retry times if failed.",
                        "label": "HTTP Request Max Retries",
                        "minimum": 1,
                        "type": "number"
                    },
                    "request_timeout": {
                        "default": "15s",
                        "description": "HTTP request timeout.",
                        "label": "HTTP Request Timeout",
                        "type": "duration"
                    }
                },
                "type": "object"
            },
            "bridge_kafka.producer_opts": {
                "required": [
                    "kafka"
                ],
                "properties": {
                    "mqtt": {
                        "description": "MQTT data source. Optional when used as a rule-engine action.",
                        "label": "MQTT Source Topic",
                        "$ref": "#/components/schemas/bridge_kafka.producer_mqtt_opts"
                    },
                    "kafka": {
                        "description": "Kafka producer configs.",
                        "label": "Kafka Producer",
                        "$ref": "#/components/schemas/bridge_kafka.producer_kafka_opts"
                    }
                },
                "type": "object"
            },
            "bridge_redis.put_cluster": {
                "required": [
                    "servers",
                    "command_template"
                ],
                "properties": {
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this bridge",
                        "label": "Enable Or Disable Bridge",
                        "type": "boolean"
                    },
                    "local_topic": {
                        "description": "The MQTT topic filter to be forwarded to Redis. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.</br><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded.",
                        "label": "Local Topic",
                        "type": "string"
                    },
                    "command_template": {
                        "description": "Redis command template used to export messages. Each list element stands for a command name or its argument.<br/>For example, to push payloads in a Redis list by key `msgs`, the elements should be the following:<br/>`rpush`, `msgs`, `${payload}`.",
                        "items": {
                            "type": "string"
                        },
                        "label": "Redis Command Template",
                        "type": "array"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/bridge_redis.creation_opts_redis_cluster"
                    },
                    "servers": {
                        "description": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`<br/>For each Node should be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The Redis default port 6379 is used if `[:Port]` is not specified.",
                        "label": "Servers",
                        "type": "string"
                    },
                    "redis_type": {
                        "default": "cluster",
                        "description": "Cluster mode. Must be set to 'cluster' when Redis server is running in clustered mode.",
                        "label": "Cluster Mode",
                        "symbols": [
                            "cluster"
                        ],
                        "type": "enum"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "Size of the connection pool towards the bridge target service.",
                        "label": "Connection Pool Size",
                        "type": "string"
                    },
                    "password": {
                        "description": "EMQX's password in the external database.",
                        "format": "password",
                        "label": "Password",
                        "type": "string"
                    },
                    "auto_reconnect": {
                        "default": true,
                        "deprecated": "since(\"v5.0.15\")",
                        "description": "Deprecated. Enable automatic reconnect to the database.",
                        "label": "Deprecated. Auto Reconnect Database",
                        "type": "boolean"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "bridge_kafka.put": {
                "required": [
                    "bootstrap_hosts"
                ],
                "properties": {
                    "enable": {
                        "default": true,
                        "description": "Enable (true) or disable (false) this Kafka bridge.",
                        "label": "Enable or Disable",
                        "type": "boolean"
                    },
                    "bootstrap_hosts": {
                        "description": "A comma separated list of Kafka <code>host[:port]</code> endpoints to bootstrap the client. Default port number is 9092.",
                        "label": "Bootstrap Hosts",
                        "type": "string"
                    },
                    "connect_timeout": {
                        "default": "5s",
                        "description": "Maximum wait time for TCP connection establishment (including authentication time if enabled).",
                        "label": "Connect Timeout",
                        "type": "duration"
                    },
                    "min_metadata_refresh_interval": {
                        "default": "3s",
                        "description": "Minimum time interval the client has to wait before refreshing Kafka broker and topic metadata. Setting too small value may add extra load on Kafka.",
                        "label": "Min Metadata Refresh Interval",
                        "type": "duration"
                    },
                    "metadata_request_timeout": {
                        "default": "5s",
                        "description": "Maximum wait time when fetching metadata from Kafka.",
                        "label": "Metadata Request Timeout",
                        "type": "duration"
                    },
                    "authentication": {
                        "default": "none",
                        "description": "Authentication configs.",
                        "label": "Authentication",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/bridge_kafka.auth_gssapi_kerberos"
                            },
                            {
                                "$ref": "#/components/schemas/bridge_kafka.auth_username_password"
                            },
                            {
                                "symbols": [
                                    "none"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "producer": {
                        "description": "Local MQTT data source and Kafka bridge configs.",
                        "label": "MQTT to Kafka",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/bridge_kafka.producer_opts"
                            },
                            {
                                "symbols": [
                                    "none"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "socket_opts": {
                        "description": "Extra socket options.",
                        "label": "Socket Options",
                        "$ref": "#/components/schemas/bridge_kafka.socket_opts"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "bridge_influxdb.post_api_v2": {
                "required": [
                    "name",
                    "type",
                    "token",
                    "org",
                    "bucket",
                    "write_syntax"
                ],
                "properties": {
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this bridge",
                        "label": "Enable Or Disable Bridge",
                        "type": "boolean"
                    },
                    "local_topic": {
                        "description": "The MQTT topic filter to be forwarded to the InfluxDB. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.</br><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded.",
                        "label": "Local Topic",
                        "type": "string"
                    },
                    "write_syntax": {
                        "description": "Conf of InfluxDB line protocol to write data points. It is a text-based format that provides the measurement, tag set, field set, and timestamp of a data point, and placeholder supported.<br/>See also [InfluxDB 2.3 Line Protocol](https://docs.influxdata.com/influxdb/v2.3/reference/syntax/line-protocol/) and<br/>[InfluxDB 1.8 Line Protocol](https://docs.influxdata.com/influxdb/v1.8/write_protocols/line_protocol_tutorial/) </br><br/>TLDR:</br><br/>```<br/><measurement>[,<tag_key>=<tag_value>[,<tag_key>=<tag_value>]] <field_key>=<field_value>[,<field_key>=<field_value>] [<timestamp>]<br/>```",
                        "format": "sql",
                        "label": "Write Syntax",
                        "type": "string"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/resource_schema.creation_opts"
                    },
                    "server": {
                        "default": "127.0.0.1:8086",
                        "description": "The IPv4 or IPv6 address or the hostname to connect to.</br><br/>A host entry has the following form: `Host[:Port]`.</br><br/>The InfluxDB default port 8086 is used if `[:Port]` is not specified.",
                        "label": "Server Host",
                        "type": "string"
                    },
                    "precision": {
                        "default": "ms",
                        "description": "InfluxDB time precision.",
                        "label": "Time Precision",
                        "symbols": [
                            "ns",
                            "us",
                            "ms",
                            "s"
                        ],
                        "type": "enum"
                    },
                    "bucket": {
                        "description": "InfluxDB bucket name.",
                        "label": "Bucket",
                        "type": "string"
                    },
                    "org": {
                        "description": "Organization name of InfluxDB.",
                        "label": "Organization",
                        "type": "string"
                    },
                    "token": {
                        "description": "InfluxDB token.",
                        "label": "Token",
                        "type": "string"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    },
                    "type": {
                        "description": "The Bridge Type.",
                        "label": "Bridge Type",
                        "symbols": [
                            "influxdb_api_v2"
                        ],
                        "type": "enum"
                    },
                    "name": {
                        "description": "Bridge name.",
                        "label": "Bridge Name",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "emqx_connector_mongo.topology": {
                "properties": {
                    "pool_size": {
                        "default": 8,
                        "description": "Size of the connection pool towards the bridge target service.",
                        "label": "Connection Pool Size",
                        "type": "string"
                    },
                    "max_overflow": {
                        "default": 0,
                        "description": "Max Overflow.",
                        "label": "Max Overflow",
                        "minimum": 1,
                        "type": "number"
                    },
                    "overflow_ttl": {
                        "description": "Period of time before workers that exceed the configured pool size (\"overflow\") to be terminated.",
                        "label": "Overflow TTL",
                        "type": "duration"
                    },
                    "overflow_check_period": {
                        "description": "Period for checking if there are more workers than configured (\"overflow\").",
                        "label": "Overflow Check Period",
                        "type": "duration"
                    },
                    "local_threshold_ms": {
                        "description": "The size of the latency window for selecting among multiple suitable MongoDB instances.",
                        "label": "Local Threshold",
                        "type": "duration"
                    },
                    "connect_timeout_ms": {
                        "description": "The duration to attempt a connection before timing out.",
                        "label": "Connect Timeout",
                        "type": "duration"
                    },
                    "socket_timeout_ms": {
                        "description": "The duration to attempt to send or to receive on a socket before the attempt times out.",
                        "label": "Socket Timeout",
                        "type": "duration"
                    },
                    "server_selection_timeout_ms": {
                        "description": "Specifies how long to block for server selection before throwing an exception.",
                        "label": "Server Selection Timeout",
                        "type": "duration"
                    },
                    "wait_queue_timeout_ms": {
                        "description": "The maximum duration that a worker can wait for a connection to become available.",
                        "label": "Wait Queue Timeout",
                        "type": "duration"
                    },
                    "heartbeat_frequency_ms": {
                        "description": "Controls when the driver checks the state of the MongoDB deployment. Specify the interval between checks, counted from the end of the previous check until the beginning of the next one.",
                        "label": "Heartbeat period",
                        "type": "duration"
                    },
                    "min_heartbeat_frequency_ms": {
                        "description": "Controls the minimum amount of time to wait between heartbeats.",
                        "label": "Minimum Heartbeat Period",
                        "type": "duration"
                    }
                },
                "type": "object"
            },
            "bridge_gcp_pubsub.get": {
                "required": [
                    "service_account_json",
                    "pubsub_topic",
                    "name",
                    "type"
                ],
                "properties": {
                    "status": {
                        "description": "The status of the bridge",
                        "label": "Bridge Status",
                        "symbols": [
                            "connected",
                            "disconnected",
                            "connecting"
                        ],
                        "type": "enum"
                    },
                    "node_status": {
                        "description": "Node status.",
                        "items": {
                            "$ref": "#/components/schemas/bridge.node_status"
                        },
                        "label": "Node Status",
                        "type": "array"
                    },
                    "type": {
                        "description": "The Bridge Type",
                        "label": "Bridge Type",
                        "symbols": [
                            "gcp_pubsub"
                        ],
                        "type": "enum"
                    },
                    "name": {
                        "description": "Bridge name, used as a human-readable description of the bridge.",
                        "label": "Bridge Name",
                        "type": "string"
                    },
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this bridge",
                        "label": "Enable Or Disable Bridge",
                        "type": "boolean"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/resource_schema.creation_opts"
                    },
                    "connect_timeout": {
                        "default": "15s",
                        "description": "The timeout when connecting to the HTTP server.",
                        "label": "Connect Timeout",
                        "type": "duration"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "The pool size.",
                        "label": "Pool Size",
                        "type": "string"
                    },
                    "pipelining": {
                        "default": 100,
                        "description": "A positive integer. Whether to send HTTP requests continuously, when set to 1, it means that after each HTTP request is sent, you need to wait for the server to return and then continue to send the next request.",
                        "label": "HTTP Pipelineing",
                        "type": "string"
                    },
                    "max_retries": {
                        "default": 2,
                        "description": "Max retry times if an error occurs when sending a request.",
                        "label": "Max Retries",
                        "minimum": 1,
                        "type": "number"
                    },
                    "request_timeout": {
                        "default": "15s",
                        "description": "HTTP request timeout.",
                        "label": "Request Timeout",
                        "type": "duration"
                    },
                    "payload_template": {
                        "default": "",
                        "description": "The template for formatting the outgoing messages.  If undefined, will send all the available context in JSON format.",
                        "label": "Payload template",
                        "type": "string"
                    },
                    "local_topic": {
                        "description": "The MQTT topic filter to be forwarded to GCP PubSub. All MQTT 'PUBLISH' messages with the topic<br/>matching `local_topic` will be forwarded.</br><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded.",
                        "label": "Local Topic",
                        "type": "string"
                    },
                    "pubsub_topic": {
                        "description": "The GCP PubSub topic to publish messages to.",
                        "label": "GCP PubSub Topic",
                        "type": "string"
                    },
                    "service_account_json": {
                        "description": "JSON containing the GCP Service Account credentials to be used with PubSub.<br/>When a GCP Service Account is created (as described in https://developers.google.com/identity/protocols/oauth2/service-account#creatinganaccount), you have the option of downloading the credentials in JSON form.  That's the file needed.",
                        "label": "GCP Service Account Credentials",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "bridge_redis.creation_opts_redis_cluster": {
                "properties": {
                    "worker_pool_size": {
                        "default": 16,
                        "description": "The number of buffer workers. Only applicable for egress type bridges.<br/>For bridges only have ingress direction data flow, it can be set to 0 otherwise must be greater than 0.",
                        "label": "Buffer Pool Size",
                        "minimum": 1,
                        "type": "number"
                    },
                    "health_check_interval": {
                        "default": "15s",
                        "description": "Health check interval.",
                        "label": "Health Check Interval",
                        "type": "duration"
                    },
                    "start_after_created": {
                        "default": "true",
                        "description": "Whether start the resource right after created.",
                        "label": "Start After Created",
                        "type": "boolean"
                    },
                    "start_timeout": {
                        "default": "5s",
                        "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
                        "label": "Start Timeout",
                        "type": "duration"
                    },
                    "auto_restart_interval": {
                        "default": "60s",
                        "description": "The auto restart interval after the resource is disconnected.",
                        "label": "Auto Restart Interval",
                        "oneOf": [
                            {
                                "type": "duration"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "query_mode": {
                        "default": "sync",
                        "description": "Query mode. Only support 'sync'.",
                        "label": "Query mode",
                        "symbols": [
                            "sync"
                        ],
                        "type": "enum"
                    },
                    "request_timeout": {
                        "default": "15s",
                        "description": "Timeout for requests.  If <code>query_mode</code> is <code>sync</code>, calls to the resource will be blocked for this amount of time before timing out.",
                        "label": "Request timeout",
                        "oneOf": [
                            {
                                "type": "duration"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "enable_queue": {
                        "default": false,
                        "deprecated": "since(\"v5.0.14\")",
                        "description": "Enable disk buffer queue (only applicable for egress bridges).<br/>When Enabled, messages will be buffered on disk when the bridge connection is down.<br/>When disabled the messages are buffered in RAM only.",
                        "label": "Enable disk buffer queue",
                        "type": "boolean"
                    },
                    "max_queue_bytes": {
                        "default": "100MB",
                        "description": "Maximum number of bytes to buffer for each buffer worker.",
                        "label": "Max buffer queue size",
                        "type": "byteSize"
                    }
                },
                "type": "object"
            },
            "connector-mqtt.ingress_remote": {
                "required": [
                    "topic"
                ],
                "properties": {
                    "topic": {
                        "description": "Receive messages from which topic of the remote broker",
                        "label": "Remote Topic",
                        "type": "string"
                    },
                    "qos": {
                        "default": 1,
                        "description": "The QoS level to be used when subscribing to the remote broker",
                        "label": "Remote QoS",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "symbols": [
                                    0,
                                    1,
                                    2
                                ],
                                "type": "enum"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "broker.ssl_client_opts": {
                "properties": {
                    "cacertfile": {
                        "description": "Trusted PEM format CA certificates bundle file.<br/><br/>The certificates in this file are used to verify the TLS peer's certificates.<br/>Append new certificates to the file if new CAs are to be trusted.<br/>There is no need to restart EMQX to have the updated file loaded, because<br/>the system regularly checks if file has been updated (and reload).<br/><br/>NOTE: invalidating (deleting) a certificate from the file will not affect<br/>already established connections.",
                        "label": "CACertfile",
                        "type": "string"
                    },
                    "certfile": {
                        "description": "PEM format certificates chain file.<br/><br/>The certificates in this file should be in reversed order of the certificate<br/>issue chain. That is, the host's certificate should be placed in the beginning<br/>of the file, followed by the immediate issuer certificate and so on.<br/>Although the root CA certificate is optional, it should be placed at the end of<br/>the file if it is to be added.",
                        "label": "Certfile",
                        "type": "string"
                    },
                    "keyfile": {
                        "description": "PEM format private key file.",
                        "label": "Keyfile",
                        "type": "string"
                    },
                    "verify": {
                        "default": "verify_none",
                        "description": "Enable or disable peer verification.",
                        "label": "Verify peer",
                        "symbols": [
                            "verify_peer",
                            "verify_none"
                        ],
                        "type": "enum"
                    },
                    "reuse_sessions": {
                        "default": true,
                        "description": "Enable TLS session reuse.",
                        "label": "TLS session reuse",
                        "type": "boolean"
                    },
                    "depth": {
                        "default": 10,
                        "description": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.<br/>So, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/><br/>if 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/><br/>if 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.",
                        "label": "CACert Depth",
                        "type": "number"
                    },
                    "password": {
                        "description": "String containing the user's password. Only used if the private key file is password-protected.",
                        "example": "",
                        "format": "password",
                        "label": "Keyfile passphrase",
                        "type": "string"
                    },
                    "versions": {
                        "default": [
                            "tlsv1.3",
                            "tlsv1.2",
                            "tlsv1.1",
                            "tlsv1"
                        ],
                        "description": "All TLS/DTLS versions to be supported.<br/><br/>NOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/><br/>In case PSK cipher suites are intended, make sure to configure<br/><code>['tlsv1.2', 'tlsv1.1']</code> here.",
                        "items": {
                            "type": "string"
                        },
                        "label": "SSL versions",
                        "type": "array"
                    },
                    "ciphers": {
                        "default": "",
                        "description": "This config holds TLS cipher suite names separated by comma,<br/>or as an array of strings. e.g.<br/><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or<br/><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.<br/><br/><br/>Ciphers (and their ordering) define the way in which the<br/>client and server encrypts information over the network connection.<br/>Selecting a good cipher suite is critical for the<br/>application's data security, confidentiality and performance.<br/><br/>The names should be in OpenSSL string format (not RFC format).<br/>All default values and examples provided by EMQX config<br/>documentation are all in OpenSSL format.<br/><br/><br/>NOTE: Certain cipher suites are only compatible with<br/>specific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')<br/>incompatible cipher suites will be silently dropped.<br/>For instance, if only 'tlsv1.3' is given in the <code>versions</code>,<br/>configuring cipher suites for other versions will have no effect.<br/><br/><br/><br/>NOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/><br/>If PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/><br/>PSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,<br/>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,<br/>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,<br/>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                        "items": {
                            "type": "string"
                        },
                        "label": "",
                        "type": "array"
                    },
                    "user_lookup_fun": {
                        "default": "emqx_tls_psk:lookup",
                        "description": "EMQX-internal callback that is used to lookup pre-shared key (PSK) identity.",
                        "label": "SSL PSK user lookup fun",
                        "type": "string"
                    },
                    "secure_renegotiate": {
                        "default": true,
                        "description": "SSL parameter renegotiation is a feature that allows a client and a server<br/>to renegotiate the parameters of the SSL connection on the fly.<br/>RFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,<br/>you drop support for the insecure renegotiation, prone to MitM attacks.",
                        "label": "SSL renegotiate",
                        "type": "boolean"
                    },
                    "enable": {
                        "default": false,
                        "description": "Enable TLS.",
                        "label": "Enable TLS.",
                        "type": "boolean"
                    },
                    "server_name_indication": {
                        "description": "Specify the host name to be used in TLS Server Name Indication extension.<br/><br/>For instance, when connecting to \"server.example.net\", the genuine server<br/>which accepts the connection and performs TLS handshake may differ from the<br/>host the TLS client initially connects to, e.g. when connecting to an IP address<br/>or when the host has multiple resolvable DNS records <br/><br/>If not specified, it will default to the host name string which is used<br/>to establish the connection, unless it is IP addressed used.<br/><br/>The host name is then also used in the host name verification of the peer<br/>certificate.<br/> The special value 'disable' prevents the Server Name<br/>Indication extension from being sent and disables the hostname<br/>verification check.",
                        "example": "disable",
                        "label": "Server Name Indication",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "symbols": [
                                    "disable"
                                ],
                                "type": "enum"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "bridge_redis.get_single": {
                "required": [
                    "name",
                    "type",
                    "database",
                    "server",
                    "command_template"
                ],
                "properties": {
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this bridge",
                        "label": "Enable Or Disable Bridge",
                        "type": "boolean"
                    },
                    "local_topic": {
                        "description": "The MQTT topic filter to be forwarded to Redis. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.</br><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded.",
                        "label": "Local Topic",
                        "type": "string"
                    },
                    "command_template": {
                        "description": "Redis command template used to export messages. Each list element stands for a command name or its argument.<br/>For example, to push payloads in a Redis list by key `msgs`, the elements should be the following:<br/>`rpush`, `msgs`, `${payload}`.",
                        "items": {
                            "type": "string"
                        },
                        "label": "Redis Command Template",
                        "type": "array"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/bridge_redis.creation_opts_redis_single"
                    },
                    "server": {
                        "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The Redis default port 6379 is used if `[:Port]` is not specified.",
                        "label": "Server Host",
                        "type": "string"
                    },
                    "redis_type": {
                        "default": "single",
                        "description": "Single mode. Must be set to 'single' when Redis server is running in single mode.",
                        "label": "Single Mode",
                        "symbols": [
                            "single"
                        ],
                        "type": "enum"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "Size of the connection pool towards the bridge target service.",
                        "label": "Connection Pool Size",
                        "type": "string"
                    },
                    "password": {
                        "description": "EMQX's password in the external database.",
                        "format": "password",
                        "label": "Password",
                        "type": "string"
                    },
                    "database": {
                        "default": 0,
                        "description": "Redis database ID.",
                        "label": "Database ID",
                        "type": "number"
                    },
                    "auto_reconnect": {
                        "default": true,
                        "deprecated": "since(\"v5.0.15\")",
                        "description": "Deprecated. Enable automatic reconnect to the database.",
                        "label": "Deprecated. Auto Reconnect Database",
                        "type": "boolean"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    },
                    "type": {
                        "description": "The Bridge Type",
                        "label": "Bridge Type",
                        "symbols": [
                            "redis_single"
                        ],
                        "type": "enum"
                    },
                    "name": {
                        "description": "Bridge name, used as a human-readable description of the bridge.",
                        "label": "Bridge Name",
                        "type": "string"
                    },
                    "status": {
                        "description": "The status of the bridge",
                        "label": "Bridge Status",
                        "symbols": [
                            "connected",
                            "disconnected",
                            "connecting"
                        ],
                        "type": "enum"
                    },
                    "node_status": {
                        "description": "Node status.",
                        "items": {
                            "$ref": "#/components/schemas/bridge.node_status"
                        },
                        "label": "Node Status",
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "bridge_webhook.creation_opts": {
                "properties": {
                    "worker_pool_size": {
                        "default": 16,
                        "description": "The number of buffer workers. Only applicable for egress type bridges.<br/>For bridges only have ingress direction data flow, it can be set to 0 otherwise must be greater than 0.",
                        "label": "Buffer Pool Size",
                        "minimum": 1,
                        "type": "number"
                    },
                    "health_check_interval": {
                        "default": "15s",
                        "description": "Health check interval.",
                        "label": "Health Check Interval",
                        "type": "duration"
                    },
                    "start_after_created": {
                        "default": "true",
                        "description": "Whether start the resource right after created.",
                        "label": "Start After Created",
                        "type": "boolean"
                    },
                    "start_timeout": {
                        "default": "5s",
                        "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
                        "label": "Start Timeout",
                        "type": "duration"
                    },
                    "auto_restart_interval": {
                        "default": "60s",
                        "description": "The auto restart interval after the resource is disconnected.",
                        "label": "Auto Restart Interval",
                        "oneOf": [
                            {
                                "type": "duration"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "query_mode": {
                        "default": "async",
                        "description": "Query mode. Optional 'sync/async', default 'async'.",
                        "label": "Query mode",
                        "symbols": [
                            "sync",
                            "async"
                        ],
                        "type": "enum"
                    },
                    "request_timeout": {
                        "default": "15s",
                        "description": "Timeout for requests.  If <code>query_mode</code> is <code>sync</code>, calls to the resource will be blocked for this amount of time before timing out.",
                        "label": "Request timeout",
                        "oneOf": [
                            {
                                "type": "duration"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "async_inflight_window": {
                        "default": 100,
                        "description": "Async query inflight window.",
                        "label": "Async inflight window",
                        "type": "string"
                    },
                    "enable_queue": {
                        "default": false,
                        "deprecated": "since(\"v5.0.14\")",
                        "description": "Enable disk buffer queue (only applicable for egress bridges).<br/>When Enabled, messages will be buffered on disk when the bridge connection is down.<br/>When disabled the messages are buffered in RAM only.",
                        "label": "Enable disk buffer queue",
                        "type": "boolean"
                    },
                    "max_queue_bytes": {
                        "default": "100MB",
                        "description": "Maximum number of bytes to buffer for each buffer worker.",
                        "label": "Max buffer queue size",
                        "type": "byteSize"
                    }
                },
                "type": "object"
            },
            "bridge_redis.get_cluster": {
                "required": [
                    "name",
                    "type",
                    "servers",
                    "command_template"
                ],
                "properties": {
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this bridge",
                        "label": "Enable Or Disable Bridge",
                        "type": "boolean"
                    },
                    "local_topic": {
                        "description": "The MQTT topic filter to be forwarded to Redis. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.</br><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded.",
                        "label": "Local Topic",
                        "type": "string"
                    },
                    "command_template": {
                        "description": "Redis command template used to export messages. Each list element stands for a command name or its argument.<br/>For example, to push payloads in a Redis list by key `msgs`, the elements should be the following:<br/>`rpush`, `msgs`, `${payload}`.",
                        "items": {
                            "type": "string"
                        },
                        "label": "Redis Command Template",
                        "type": "array"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/bridge_redis.creation_opts_redis_cluster"
                    },
                    "servers": {
                        "description": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`<br/>For each Node should be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The Redis default port 6379 is used if `[:Port]` is not specified.",
                        "label": "Servers",
                        "type": "string"
                    },
                    "redis_type": {
                        "default": "cluster",
                        "description": "Cluster mode. Must be set to 'cluster' when Redis server is running in clustered mode.",
                        "label": "Cluster Mode",
                        "symbols": [
                            "cluster"
                        ],
                        "type": "enum"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "Size of the connection pool towards the bridge target service.",
                        "label": "Connection Pool Size",
                        "type": "string"
                    },
                    "password": {
                        "description": "EMQX's password in the external database.",
                        "format": "password",
                        "label": "Password",
                        "type": "string"
                    },
                    "auto_reconnect": {
                        "default": true,
                        "deprecated": "since(\"v5.0.15\")",
                        "description": "Deprecated. Enable automatic reconnect to the database.",
                        "label": "Deprecated. Auto Reconnect Database",
                        "type": "boolean"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    },
                    "type": {
                        "description": "The Bridge Type",
                        "label": "Bridge Type",
                        "symbols": [
                            "redis_cluster"
                        ],
                        "type": "enum"
                    },
                    "name": {
                        "description": "Bridge name, used as a human-readable description of the bridge.",
                        "label": "Bridge Name",
                        "type": "string"
                    },
                    "status": {
                        "description": "The status of the bridge",
                        "label": "Bridge Status",
                        "symbols": [
                            "connected",
                            "disconnected",
                            "connecting"
                        ],
                        "type": "enum"
                    },
                    "node_status": {
                        "description": "Node status.",
                        "items": {
                            "$ref": "#/components/schemas/bridge.node_status"
                        },
                        "label": "Node Status",
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "bridge_timescale.get": {
                "required": [
                    "database",
                    "server",
                    "name",
                    "type"
                ],
                "properties": {
                    "status": {
                        "description": "The status of the bridge",
                        "label": "Bridge Status",
                        "symbols": [
                            "connected",
                            "disconnected",
                            "connecting"
                        ],
                        "type": "enum"
                    },
                    "node_status": {
                        "description": "Node status.",
                        "items": {
                            "$ref": "#/components/schemas/bridge.node_status"
                        },
                        "label": "Node Status",
                        "type": "array"
                    },
                    "type": {
                        "description": "The Bridge Type",
                        "label": "Bridge Type",
                        "symbols": [
                            "pgsql"
                        ],
                        "type": "enum"
                    },
                    "name": {
                        "description": "Bridge name.",
                        "label": "Bridge Name",
                        "type": "string"
                    },
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this bridge",
                        "label": "Enable Or Disable Bridge",
                        "type": "boolean"
                    },
                    "sql": {
                        "default": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                        "description": "SQL Template",
                        "format": "sql",
                        "label": "SQL Template",
                        "type": "string"
                    },
                    "local_topic": {
                        "description": "The MQTT topic filter to be forwarded to PostgreSQL. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.</br><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded.",
                        "label": "Local Topic",
                        "type": "string"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/bridge_pgsql.creation_opts"
                    },
                    "server": {
                        "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The PostgreSQL default port 5432 is used if `[:Port]` is not specified.",
                        "label": "Server Host",
                        "type": "string"
                    },
                    "database": {
                        "description": "Database name.",
                        "label": "Database Name",
                        "type": "string"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "Size of the connection pool towards the bridge target service.",
                        "label": "Connection Pool Size",
                        "type": "string"
                    },
                    "username": {
                        "description": "EMQX's username in the external database.",
                        "label": "Username",
                        "type": "string"
                    },
                    "password": {
                        "description": "EMQX's password in the external database.",
                        "format": "password",
                        "label": "Password",
                        "type": "string"
                    },
                    "auto_reconnect": {
                        "default": true,
                        "deprecated": "since(\"v5.0.15\")",
                        "description": "Deprecated. Enable automatic reconnect to the database.",
                        "label": "Deprecated. Auto Reconnect Database",
                        "type": "boolean"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "bridge_mysql.get": {
                "required": [
                    "database",
                    "server",
                    "name",
                    "type"
                ],
                "properties": {
                    "status": {
                        "description": "The status of the bridge",
                        "label": "Bridge Status",
                        "symbols": [
                            "connected",
                            "disconnected",
                            "connecting"
                        ],
                        "type": "enum"
                    },
                    "node_status": {
                        "description": "Node status.",
                        "items": {
                            "$ref": "#/components/schemas/bridge.node_status"
                        },
                        "label": "Node Status",
                        "type": "array"
                    },
                    "type": {
                        "description": "The Bridge Type",
                        "label": "Bridge Type",
                        "symbols": [
                            "mysql"
                        ],
                        "type": "enum"
                    },
                    "name": {
                        "description": "Bridge name, used as a human-readable description of the bridge.",
                        "label": "Bridge Name",
                        "type": "string"
                    },
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this bridge",
                        "label": "Enable Or Disable Bridge",
                        "type": "boolean"
                    },
                    "sql": {
                        "default": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, FROM_UNIXTIME(${timestamp}/1000))",
                        "description": "SQL Template",
                        "format": "sql",
                        "label": "SQL Template",
                        "type": "string"
                    },
                    "local_topic": {
                        "description": "The MQTT topic filter to be forwarded to MySQL. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.</br><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded.",
                        "label": "Local Topic",
                        "type": "string"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/bridge_mysql.creation_opts"
                    },
                    "server": {
                        "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The MySQL default port 3306 is used if `[:Port]` is not specified.",
                        "label": "Server Host",
                        "type": "string"
                    },
                    "database": {
                        "description": "Database name.",
                        "label": "Database Name",
                        "type": "string"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "Size of the connection pool towards the bridge target service.",
                        "label": "Connection Pool Size",
                        "type": "string"
                    },
                    "username": {
                        "default": "root",
                        "description": "EMQX's username in the external database.",
                        "label": "Username",
                        "type": "string"
                    },
                    "password": {
                        "description": "EMQX's password in the external database.",
                        "format": "password",
                        "label": "Password",
                        "type": "string"
                    },
                    "auto_reconnect": {
                        "default": true,
                        "deprecated": "since(\"v5.0.15\")",
                        "description": "Deprecated. Enable automatic reconnect to the database.",
                        "label": "Deprecated. Auto Reconnect Database",
                        "type": "boolean"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "bridge_redis.post_cluster": {
                "required": [
                    "name",
                    "type",
                    "servers",
                    "command_template"
                ],
                "properties": {
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this bridge",
                        "label": "Enable Or Disable Bridge",
                        "type": "boolean"
                    },
                    "local_topic": {
                        "description": "The MQTT topic filter to be forwarded to Redis. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.</br><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded.",
                        "label": "Local Topic",
                        "type": "string"
                    },
                    "command_template": {
                        "description": "Redis command template used to export messages. Each list element stands for a command name or its argument.<br/>For example, to push payloads in a Redis list by key `msgs`, the elements should be the following:<br/>`rpush`, `msgs`, `${payload}`.",
                        "items": {
                            "type": "string"
                        },
                        "label": "Redis Command Template",
                        "type": "array"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/bridge_redis.creation_opts_redis_cluster"
                    },
                    "servers": {
                        "description": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`<br/>For each Node should be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The Redis default port 6379 is used if `[:Port]` is not specified.",
                        "label": "Servers",
                        "type": "string"
                    },
                    "redis_type": {
                        "default": "cluster",
                        "description": "Cluster mode. Must be set to 'cluster' when Redis server is running in clustered mode.",
                        "label": "Cluster Mode",
                        "symbols": [
                            "cluster"
                        ],
                        "type": "enum"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "Size of the connection pool towards the bridge target service.",
                        "label": "Connection Pool Size",
                        "type": "string"
                    },
                    "password": {
                        "description": "EMQX's password in the external database.",
                        "format": "password",
                        "label": "Password",
                        "type": "string"
                    },
                    "auto_reconnect": {
                        "default": true,
                        "deprecated": "since(\"v5.0.15\")",
                        "description": "Deprecated. Enable automatic reconnect to the database.",
                        "label": "Deprecated. Auto Reconnect Database",
                        "type": "boolean"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    },
                    "type": {
                        "description": "The Bridge Type",
                        "label": "Bridge Type",
                        "symbols": [
                            "redis_cluster"
                        ],
                        "type": "enum"
                    },
                    "name": {
                        "description": "Bridge name, used as a human-readable description of the bridge.",
                        "label": "Bridge Name",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "bridge_mqtt.put": {
                "required": [
                    "server"
                ],
                "properties": {
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this bridge",
                        "label": "Enable Or Disable Bridge",
                        "type": "boolean"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/bridge_mqtt.creation_opts"
                    },
                    "mode": {
                        "default": "cluster_shareload",
                        "description": "The mode of the MQTT Bridge.<br/><br/>- cluster_shareload: create an MQTT connection on each node in the emqx cluster.<br/><br/>In 'cluster_shareload' mode, the incoming load from the remote broker is shared by<br/>using shared subscription.<br/><br/>Note that the 'clientid' is suffixed by the node name, this is to avoid<br/>clientid conflicts between different nodes. And we can only use shared subscription<br/>topic filters for <code>remote.topic</code> of ingress connections.",
                        "label": "MQTT Bridge Mode",
                        "symbols": [
                            "cluster_shareload"
                        ],
                        "type": "enum"
                    },
                    "server": {
                        "description": "The host and port of the remote MQTT broker",
                        "label": "Broker IP And Port",
                        "type": "string"
                    },
                    "clientid_prefix": {
                        "description": "Optional prefix to prepend to the clientid used by egress bridges.",
                        "label": "Clientid Prefix",
                        "type": "string"
                    },
                    "proto_ver": {
                        "default": "v4",
                        "description": "The MQTT protocol version",
                        "label": "Protocol Version",
                        "symbols": [
                            "v3",
                            "v4",
                            "v5"
                        ],
                        "type": "enum"
                    },
                    "bridge_mode": {
                        "default": false,
                        "description": "If enable bridge mode.<br/>NOTE: This setting is only for MQTT protocol version older than 5.0, and the remote MQTT<br/>broker MUST support this feature.",
                        "label": "Bridge Mode",
                        "type": "boolean"
                    },
                    "username": {
                        "description": "The username of the MQTT protocol",
                        "label": "Username",
                        "type": "string"
                    },
                    "password": {
                        "description": "The password of the MQTT protocol",
                        "format": "password",
                        "label": "Password",
                        "type": "string"
                    },
                    "clean_start": {
                        "default": true,
                        "deprecated": "since(\"v5.0.16\")",
                        "description": "The clean-start or the clean-session of the MQTT protocol",
                        "label": "Clean Session",
                        "type": "boolean"
                    },
                    "keepalive": {
                        "default": "300s",
                        "description": "MQTT Keepalive. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`",
                        "label": "keepalive",
                        "type": "string"
                    },
                    "retry_interval": {
                        "default": "15s",
                        "description": "Message retry interval. Delay for the MQTT bridge to retry sending the QoS1/QoS2 messages in case of ACK not received. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`",
                        "label": "retry_interval",
                        "type": "string"
                    },
                    "max_inflight": {
                        "default": 32,
                        "description": "Max inflight (sent, but un-acked) messages of the MQTT protocol",
                        "label": "Max Inflight Message",
                        "minimum": 1,
                        "type": "number"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    },
                    "ingress": {
                        "description": "The ingress config defines how this bridge receive messages from the remote MQTT broker, and then<br/>        send them to the local broker.<br/><br/>        Template with variables is allowed in 'remote.qos', 'local.topic', 'local.qos', 'local.retain', 'local.payload'.<br/><br/>        NOTE: if this bridge is used as the input of a rule, and also 'local.topic' is<br/>        configured, then messages got from the remote broker will be sent to both the 'local.topic' and<br/>        the rule.",
                        "label": "Ingress Configs",
                        "$ref": "#/components/schemas/connector-mqtt.ingress"
                    },
                    "egress": {
                        "description": "The egress config defines how this bridge forwards messages from the local broker to the remote broker.<br/><br/>Template with variables is allowed in 'remote.topic', 'local.qos', 'local.retain', 'local.payload'.<br/><br/>NOTE: if this bridge is used as the action of a rule, and also 'local.topic'<br/>is configured, then both the data got from the rule and the MQTT messages that matches<br/>'local.topic' will be forwarded.",
                        "label": "Egress Configs",
                        "$ref": "#/components/schemas/connector-mqtt.egress"
                    }
                },
                "type": "object"
            },
            "bridge_hstreamdb.get": {
                "required": [
                    "connector",
                    "name",
                    "type"
                ],
                "properties": {
                    "status": {
                        "description": "The status of the bridge",
                        "label": "Bridge Status",
                        "symbols": [
                            "connected",
                            "disconnected",
                            "connecting"
                        ],
                        "type": "enum"
                    },
                    "node_status": {
                        "description": "Node status.",
                        "items": {
                            "$ref": "#/components/schemas/bridge.node_status"
                        },
                        "label": "Node Status",
                        "type": "array"
                    },
                    "type": {
                        "description": "The Bridge Type",
                        "label": "Bridge Type",
                        "symbols": [
                            "hstreamdb"
                        ],
                        "type": "enum"
                    },
                    "name": {
                        "description": "Bridge name, used as a human-readable description of the bridge.",
                        "label": "Bridge Name",
                        "type": "string"
                    },
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this bridge",
                        "label": "Enable Or Disable Bridge",
                        "type": "boolean"
                    },
                    "direction": {
                        "default": "egress",
                        "description": "The direction of this bridge, MUST be 'egress'",
                        "label": "Bridge Direction",
                        "symbols": [
                            "egress"
                        ],
                        "type": "enum"
                    },
                    "local_topic": {
                        "description": "The MQTT topic filter to be forwarded to the HStreamDB. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.</br><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded.",
                        "label": "Local Topic",
                        "type": "string"
                    },
                    "payload": {
                        "default": "${payload}",
                        "description": "The payload to be forwarded to the HStreamDB. Placeholders supported.",
                        "label": "Payload",
                        "type": "string"
                    },
                    "connector": {
                        "description": "Generic configuration for the connector.",
                        "example": "hstreamdb:demo",
                        "label": "Connector Generic Configuration",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/connector_hstreamdb.config"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "bridge_redis.creation_opts_redis_sentinel": {
                "properties": {
                    "worker_pool_size": {
                        "default": 16,
                        "description": "The number of buffer workers. Only applicable for egress type bridges.<br/>For bridges only have ingress direction data flow, it can be set to 0 otherwise must be greater than 0.",
                        "label": "Buffer Pool Size",
                        "minimum": 1,
                        "type": "number"
                    },
                    "health_check_interval": {
                        "default": "15s",
                        "description": "Health check interval.",
                        "label": "Health Check Interval",
                        "type": "duration"
                    },
                    "start_after_created": {
                        "default": "true",
                        "description": "Whether start the resource right after created.",
                        "label": "Start After Created",
                        "type": "boolean"
                    },
                    "start_timeout": {
                        "default": "5s",
                        "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
                        "label": "Start Timeout",
                        "type": "duration"
                    },
                    "auto_restart_interval": {
                        "default": "60s",
                        "description": "The auto restart interval after the resource is disconnected.",
                        "label": "Auto Restart Interval",
                        "oneOf": [
                            {
                                "type": "duration"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "query_mode": {
                        "default": "sync",
                        "description": "Query mode. Only support 'sync'.",
                        "label": "Query mode",
                        "symbols": [
                            "sync"
                        ],
                        "type": "enum"
                    },
                    "request_timeout": {
                        "default": "15s",
                        "description": "Timeout for requests.  If <code>query_mode</code> is <code>sync</code>, calls to the resource will be blocked for this amount of time before timing out.",
                        "label": "Request timeout",
                        "oneOf": [
                            {
                                "type": "duration"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "enable_batch": {
                        "default": true,
                        "deprecated": "since(\"v5.0.14\")",
                        "description": "Batch mode enabled.",
                        "label": "Enable batch",
                        "type": "boolean"
                    },
                    "batch_size": {
                        "default": 1,
                        "description": "Maximum batch count. If equal to 1, there's effectively no batching.",
                        "label": "Batch size",
                        "type": "string"
                    },
                    "batch_time": {
                        "default": "20ms",
                        "description": "Maximum batch waiting interval.",
                        "label": "Batch time",
                        "type": "duration"
                    },
                    "enable_queue": {
                        "default": false,
                        "deprecated": "since(\"v5.0.14\")",
                        "description": "Enable disk buffer queue (only applicable for egress bridges).<br/>When Enabled, messages will be buffered on disk when the bridge connection is down.<br/>When disabled the messages are buffered in RAM only.",
                        "label": "Enable disk buffer queue",
                        "type": "boolean"
                    },
                    "max_queue_bytes": {
                        "default": "100MB",
                        "description": "Maximum number of bytes to buffer for each buffer worker.",
                        "label": "Max buffer queue size",
                        "type": "byteSize"
                    }
                },
                "type": "object"
            },
            "bridge_pgsql.get": {
                "required": [
                    "database",
                    "server",
                    "name",
                    "type"
                ],
                "properties": {
                    "status": {
                        "description": "The status of the bridge",
                        "label": "Bridge Status",
                        "symbols": [
                            "connected",
                            "disconnected",
                            "connecting"
                        ],
                        "type": "enum"
                    },
                    "node_status": {
                        "description": "Node status.",
                        "items": {
                            "$ref": "#/components/schemas/bridge.node_status"
                        },
                        "label": "Node Status",
                        "type": "array"
                    },
                    "type": {
                        "description": "The Bridge Type",
                        "label": "Bridge Type",
                        "symbols": [
                            "pgsql"
                        ],
                        "type": "enum"
                    },
                    "name": {
                        "description": "Bridge name.",
                        "label": "Bridge Name",
                        "type": "string"
                    },
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this bridge",
                        "label": "Enable Or Disable Bridge",
                        "type": "boolean"
                    },
                    "sql": {
                        "default": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                        "description": "SQL Template",
                        "format": "sql",
                        "label": "SQL Template",
                        "type": "string"
                    },
                    "local_topic": {
                        "description": "The MQTT topic filter to be forwarded to PostgreSQL. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.</br><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded.",
                        "label": "Local Topic",
                        "type": "string"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/bridge_pgsql.creation_opts"
                    },
                    "server": {
                        "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The PostgreSQL default port 5432 is used if `[:Port]` is not specified.",
                        "label": "Server Host",
                        "type": "string"
                    },
                    "database": {
                        "description": "Database name.",
                        "label": "Database Name",
                        "type": "string"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "Size of the connection pool towards the bridge target service.",
                        "label": "Connection Pool Size",
                        "type": "string"
                    },
                    "username": {
                        "description": "EMQX's username in the external database.",
                        "label": "Username",
                        "type": "string"
                    },
                    "password": {
                        "description": "EMQX's password in the external database.",
                        "format": "password",
                        "label": "Password",
                        "type": "string"
                    },
                    "auto_reconnect": {
                        "default": true,
                        "deprecated": "since(\"v5.0.15\")",
                        "description": "Deprecated. Enable automatic reconnect to the database.",
                        "label": "Deprecated. Auto Reconnect Database",
                        "type": "boolean"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "bridge_matrix.get": {
                "required": [
                    "database",
                    "server",
                    "name",
                    "type"
                ],
                "properties": {
                    "status": {
                        "description": "The status of the bridge",
                        "label": "Bridge Status",
                        "symbols": [
                            "connected",
                            "disconnected",
                            "connecting"
                        ],
                        "type": "enum"
                    },
                    "node_status": {
                        "description": "Node status.",
                        "items": {
                            "$ref": "#/components/schemas/bridge.node_status"
                        },
                        "label": "Node Status",
                        "type": "array"
                    },
                    "type": {
                        "description": "The Bridge Type",
                        "label": "Bridge Type",
                        "symbols": [
                            "pgsql"
                        ],
                        "type": "enum"
                    },
                    "name": {
                        "description": "Bridge name.",
                        "label": "Bridge Name",
                        "type": "string"
                    },
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this bridge",
                        "label": "Enable Or Disable Bridge",
                        "type": "boolean"
                    },
                    "sql": {
                        "default": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                        "description": "SQL Template",
                        "format": "sql",
                        "label": "SQL Template",
                        "type": "string"
                    },
                    "local_topic": {
                        "description": "The MQTT topic filter to be forwarded to PostgreSQL. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.</br><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded.",
                        "label": "Local Topic",
                        "type": "string"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/bridge_pgsql.creation_opts"
                    },
                    "server": {
                        "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The PostgreSQL default port 5432 is used if `[:Port]` is not specified.",
                        "label": "Server Host",
                        "type": "string"
                    },
                    "database": {
                        "description": "Database name.",
                        "label": "Database Name",
                        "type": "string"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "Size of the connection pool towards the bridge target service.",
                        "label": "Connection Pool Size",
                        "type": "string"
                    },
                    "username": {
                        "description": "EMQX's username in the external database.",
                        "label": "Username",
                        "type": "string"
                    },
                    "password": {
                        "description": "EMQX's password in the external database.",
                        "format": "password",
                        "label": "Password",
                        "type": "string"
                    },
                    "auto_reconnect": {
                        "default": true,
                        "deprecated": "since(\"v5.0.15\")",
                        "description": "Deprecated. Enable automatic reconnect to the database.",
                        "label": "Deprecated. Auto Reconnect Database",
                        "type": "boolean"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "bridge_mqtt.get": {
                "required": [
                    "server"
                ],
                "properties": {
                    "status": {
                        "description": "The status of the bridge",
                        "label": "Bridge Status",
                        "symbols": [
                            "connected",
                            "disconnected",
                            "connecting"
                        ],
                        "type": "enum"
                    },
                    "node_status": {
                        "description": "Node status.",
                        "items": {
                            "$ref": "#/components/schemas/bridge.node_status"
                        },
                        "label": "Node Status",
                        "type": "array"
                    },
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this bridge",
                        "label": "Enable Or Disable Bridge",
                        "type": "boolean"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/bridge_mqtt.creation_opts"
                    },
                    "mode": {
                        "default": "cluster_shareload",
                        "description": "The mode of the MQTT Bridge.<br/><br/>- cluster_shareload: create an MQTT connection on each node in the emqx cluster.<br/><br/>In 'cluster_shareload' mode, the incoming load from the remote broker is shared by<br/>using shared subscription.<br/><br/>Note that the 'clientid' is suffixed by the node name, this is to avoid<br/>clientid conflicts between different nodes. And we can only use shared subscription<br/>topic filters for <code>remote.topic</code> of ingress connections.",
                        "label": "MQTT Bridge Mode",
                        "symbols": [
                            "cluster_shareload"
                        ],
                        "type": "enum"
                    },
                    "server": {
                        "description": "The host and port of the remote MQTT broker",
                        "label": "Broker IP And Port",
                        "type": "string"
                    },
                    "clientid_prefix": {
                        "description": "Optional prefix to prepend to the clientid used by egress bridges.",
                        "label": "Clientid Prefix",
                        "type": "string"
                    },
                    "proto_ver": {
                        "default": "v4",
                        "description": "The MQTT protocol version",
                        "label": "Protocol Version",
                        "symbols": [
                            "v3",
                            "v4",
                            "v5"
                        ],
                        "type": "enum"
                    },
                    "bridge_mode": {
                        "default": false,
                        "description": "If enable bridge mode.<br/>NOTE: This setting is only for MQTT protocol version older than 5.0, and the remote MQTT<br/>broker MUST support this feature.",
                        "label": "Bridge Mode",
                        "type": "boolean"
                    },
                    "username": {
                        "description": "The username of the MQTT protocol",
                        "label": "Username",
                        "type": "string"
                    },
                    "password": {
                        "description": "The password of the MQTT protocol",
                        "format": "password",
                        "label": "Password",
                        "type": "string"
                    },
                    "clean_start": {
                        "default": true,
                        "deprecated": "since(\"v5.0.16\")",
                        "description": "The clean-start or the clean-session of the MQTT protocol",
                        "label": "Clean Session",
                        "type": "boolean"
                    },
                    "keepalive": {
                        "default": "300s",
                        "description": "MQTT Keepalive. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`",
                        "label": "keepalive",
                        "type": "string"
                    },
                    "retry_interval": {
                        "default": "15s",
                        "description": "Message retry interval. Delay for the MQTT bridge to retry sending the QoS1/QoS2 messages in case of ACK not received. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`",
                        "label": "retry_interval",
                        "type": "string"
                    },
                    "max_inflight": {
                        "default": 32,
                        "description": "Max inflight (sent, but un-acked) messages of the MQTT protocol",
                        "label": "Max Inflight Message",
                        "minimum": 1,
                        "type": "number"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    },
                    "ingress": {
                        "description": "The ingress config defines how this bridge receive messages from the remote MQTT broker, and then<br/>        send them to the local broker.<br/><br/>        Template with variables is allowed in 'remote.qos', 'local.topic', 'local.qos', 'local.retain', 'local.payload'.<br/><br/>        NOTE: if this bridge is used as the input of a rule, and also 'local.topic' is<br/>        configured, then messages got from the remote broker will be sent to both the 'local.topic' and<br/>        the rule.",
                        "label": "Ingress Configs",
                        "$ref": "#/components/schemas/connector-mqtt.ingress"
                    },
                    "egress": {
                        "description": "The egress config defines how this bridge forwards messages from the local broker to the remote broker.<br/><br/>Template with variables is allowed in 'remote.topic', 'local.qos', 'local.retain', 'local.payload'.<br/><br/>NOTE: if this bridge is used as the action of a rule, and also 'local.topic'<br/>is configured, then both the data got from the rule and the MQTT messages that matches<br/>'local.topic' will be forwarded.",
                        "label": "Egress Configs",
                        "$ref": "#/components/schemas/connector-mqtt.egress"
                    }
                },
                "type": "object"
            },
            "bridge_mysql.creation_opts": {
                "properties": {
                    "worker_pool_size": {
                        "default": 16,
                        "description": "The number of buffer workers. Only applicable for egress type bridges.<br/>For bridges only have ingress direction data flow, it can be set to 0 otherwise must be greater than 0.",
                        "label": "Buffer Pool Size",
                        "minimum": 1,
                        "type": "number"
                    },
                    "health_check_interval": {
                        "default": "15s",
                        "description": "Health check interval.",
                        "label": "Health Check Interval",
                        "type": "duration"
                    },
                    "start_after_created": {
                        "default": "true",
                        "description": "Whether start the resource right after created.",
                        "label": "Start After Created",
                        "type": "boolean"
                    },
                    "start_timeout": {
                        "default": "5s",
                        "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
                        "label": "Start Timeout",
                        "type": "duration"
                    },
                    "auto_restart_interval": {
                        "default": "60s",
                        "description": "The auto restart interval after the resource is disconnected.",
                        "label": "Auto Restart Interval",
                        "oneOf": [
                            {
                                "type": "duration"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "query_mode": {
                        "default": "sync",
                        "description": "Query mode. Only support 'sync'.",
                        "label": "Query mode",
                        "symbols": [
                            "sync"
                        ],
                        "type": "enum"
                    },
                    "request_timeout": {
                        "default": "15s",
                        "description": "Timeout for requests.  If <code>query_mode</code> is <code>sync</code>, calls to the resource will be blocked for this amount of time before timing out.",
                        "label": "Request timeout",
                        "oneOf": [
                            {
                                "type": "duration"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "enable_batch": {
                        "default": true,
                        "deprecated": "since(\"v5.0.14\")",
                        "description": "Batch mode enabled.",
                        "label": "Enable batch",
                        "type": "boolean"
                    },
                    "batch_size": {
                        "default": 1,
                        "description": "Maximum batch count. If equal to 1, there's effectively no batching.",
                        "label": "Batch size",
                        "type": "string"
                    },
                    "batch_time": {
                        "default": "20ms",
                        "description": "Maximum batch waiting interval.",
                        "label": "Batch time",
                        "type": "duration"
                    },
                    "enable_queue": {
                        "default": false,
                        "deprecated": "since(\"v5.0.14\")",
                        "description": "Enable disk buffer queue (only applicable for egress bridges).<br/>When Enabled, messages will be buffered on disk when the bridge connection is down.<br/>When disabled the messages are buffered in RAM only.",
                        "label": "Enable disk buffer queue",
                        "type": "boolean"
                    },
                    "max_queue_bytes": {
                        "default": "100MB",
                        "description": "Maximum number of bytes to buffer for each buffer worker.",
                        "label": "Max buffer queue size",
                        "type": "byteSize"
                    }
                },
                "type": "object"
            },
            "bridge_redis.put_sentinel": {
                "required": [
                    "database",
                    "sentinel",
                    "servers",
                    "command_template"
                ],
                "properties": {
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this bridge",
                        "label": "Enable Or Disable Bridge",
                        "type": "boolean"
                    },
                    "local_topic": {
                        "description": "The MQTT topic filter to be forwarded to Redis. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.</br><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded.",
                        "label": "Local Topic",
                        "type": "string"
                    },
                    "command_template": {
                        "description": "Redis command template used to export messages. Each list element stands for a command name or its argument.<br/>For example, to push payloads in a Redis list by key `msgs`, the elements should be the following:<br/>`rpush`, `msgs`, `${payload}`.",
                        "items": {
                            "type": "string"
                        },
                        "label": "Redis Command Template",
                        "type": "array"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/bridge_redis.creation_opts_redis_sentinel"
                    },
                    "servers": {
                        "description": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`<br/>For each Node should be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The Redis default port 6379 is used if `[:Port]` is not specified.",
                        "label": "Servers",
                        "type": "string"
                    },
                    "redis_type": {
                        "default": "sentinel",
                        "description": "Sentinel mode. Must be set to 'sentinel' when Redis server is running in sentinel mode.",
                        "label": "Sentinel Mode",
                        "symbols": [
                            "sentinel"
                        ],
                        "type": "enum"
                    },
                    "sentinel": {
                        "description": "The cluster name in Redis sentinel mode.",
                        "label": "Cluster Name",
                        "type": "string"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "Size of the connection pool towards the bridge target service.",
                        "label": "Connection Pool Size",
                        "type": "string"
                    },
                    "password": {
                        "description": "EMQX's password in the external database.",
                        "format": "password",
                        "label": "Password",
                        "type": "string"
                    },
                    "database": {
                        "default": 0,
                        "description": "Redis database ID.",
                        "label": "Database ID",
                        "type": "number"
                    },
                    "auto_reconnect": {
                        "default": true,
                        "deprecated": "since(\"v5.0.15\")",
                        "description": "Deprecated. Enable automatic reconnect to the database.",
                        "label": "Deprecated. Auto Reconnect Database",
                        "type": "boolean"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "bridge_kafka.producer_kafka_opts": {
                "required": [
                    "topic"
                ],
                "properties": {
                    "topic": {
                        "description": "Kafka topic name",
                        "label": "Kafka Topic Name",
                        "type": "string"
                    },
                    "message": {
                        "description": "Template to render a Kafka message.",
                        "label": "Kafka Message Template",
                        "$ref": "#/components/schemas/bridge_kafka.kafka_message"
                    },
                    "max_batch_bytes": {
                        "default": "896KB",
                        "description": "Maximum bytes to collect in a Kafka message batch. Most of the Kafka brokers default to a limit of 1 MB batch size. EMQX's default value is less than 1 MB in order to compensate Kafka message encoding overheads (especially when each individual message is very small). When a single message is over the limit, it is still sent (as a single element batch).",
                        "label": "Max Batch Bytes",
                        "type": "byteSize"
                    },
                    "compression": {
                        "default": "no_compression",
                        "description": "Compression method.",
                        "label": "Compression",
                        "symbols": [
                            "no_compression",
                            "snappy",
                            "gzip"
                        ],
                        "type": "enum"
                    },
                    "partition_strategy": {
                        "default": "random",
                        "description": "Partition strategy is to tell the producer how to dispatch messages to Kafka partitions.<br/><br/><code>random</code>: Randomly pick a partition for each message<br/><code>key_dispatch</code>: Hash Kafka message key to a partition number",
                        "label": "Partition Strategy",
                        "symbols": [
                            "random",
                            "key_dispatch"
                        ],
                        "type": "enum"
                    },
                    "required_acks": {
                        "default": "all_isr",
                        "description": "Required acknowledgements for Kafka partition leader to wait for its followers before it sends back the acknowledgement to EMQX Kafka producer<br/><br/><code>all_isr</code>: Require all in-sync replicas to acknowledge.<br/><code>leader_only</code>: Require only the partition-leader's acknowledgement.<br/><code>none</code>: No need for Kafka to acknowledge at all.",
                        "label": "Required Acks",
                        "symbols": [
                            "all_isr",
                            "leader_only",
                            "none"
                        ],
                        "type": "enum"
                    },
                    "partition_count_refresh_interval": {
                        "default": "60s",
                        "description": "The time interval for Kafka producer to discover increased number of partitions.<br/>After the number of partitions is increased in Kafka, EMQX will start taking the <br/>discovered partitions into account when dispatching messages per <code>partition_strategy</code>.",
                        "label": "Partition Count Refresh Interval",
                        "type": "duration"
                    },
                    "max_inflight": {
                        "default": 10,
                        "description": "Maximum number of batches allowed for Kafka producer (per-partition) to send before receiving acknowledgement from Kafka. Greater value typically means better throughput. However, there can be a risk of message reordering when this value is greater than 1.",
                        "label": "Max Inflight",
                        "type": "string"
                    },
                    "buffer": {
                        "description": "Configure producer message buffer.<br/><br/>Tell Kafka producer how to buffer messages when EMQX has more messages to send than Kafka can keep up, or when Kafka is down.",
                        "label": "Message Buffer",
                        "$ref": "#/components/schemas/bridge_kafka.producer_buffer"
                    }
                },
                "type": "object"
            },
            "bridge_mqtt.post": {
                "required": [
                    "server",
                    "name",
                    "type"
                ],
                "properties": {
                    "type": {
                        "description": "The bridge type.",
                        "label": "Bridge Type",
                        "symbols": [
                            "mqtt"
                        ],
                        "type": "enum"
                    },
                    "name": {
                        "description": "Bridge name, used as a human-readable description of the bridge.",
                        "label": "Bridge Name",
                        "type": "string"
                    },
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this bridge",
                        "label": "Enable Or Disable Bridge",
                        "type": "boolean"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/bridge_mqtt.creation_opts"
                    },
                    "mode": {
                        "default": "cluster_shareload",
                        "description": "The mode of the MQTT Bridge.<br/><br/>- cluster_shareload: create an MQTT connection on each node in the emqx cluster.<br/><br/>In 'cluster_shareload' mode, the incoming load from the remote broker is shared by<br/>using shared subscription.<br/><br/>Note that the 'clientid' is suffixed by the node name, this is to avoid<br/>clientid conflicts between different nodes. And we can only use shared subscription<br/>topic filters for <code>remote.topic</code> of ingress connections.",
                        "label": "MQTT Bridge Mode",
                        "symbols": [
                            "cluster_shareload"
                        ],
                        "type": "enum"
                    },
                    "server": {
                        "description": "The host and port of the remote MQTT broker",
                        "label": "Broker IP And Port",
                        "type": "string"
                    },
                    "clientid_prefix": {
                        "description": "Optional prefix to prepend to the clientid used by egress bridges.",
                        "label": "Clientid Prefix",
                        "type": "string"
                    },
                    "proto_ver": {
                        "default": "v4",
                        "description": "The MQTT protocol version",
                        "label": "Protocol Version",
                        "symbols": [
                            "v3",
                            "v4",
                            "v5"
                        ],
                        "type": "enum"
                    },
                    "bridge_mode": {
                        "default": false,
                        "description": "If enable bridge mode.<br/>NOTE: This setting is only for MQTT protocol version older than 5.0, and the remote MQTT<br/>broker MUST support this feature.",
                        "label": "Bridge Mode",
                        "type": "boolean"
                    },
                    "username": {
                        "description": "The username of the MQTT protocol",
                        "label": "Username",
                        "type": "string"
                    },
                    "password": {
                        "description": "The password of the MQTT protocol",
                        "format": "password",
                        "label": "Password",
                        "type": "string"
                    },
                    "clean_start": {
                        "default": true,
                        "deprecated": "since(\"v5.0.16\")",
                        "description": "The clean-start or the clean-session of the MQTT protocol",
                        "label": "Clean Session",
                        "type": "boolean"
                    },
                    "keepalive": {
                        "default": "300s",
                        "description": "MQTT Keepalive. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`",
                        "label": "keepalive",
                        "type": "string"
                    },
                    "retry_interval": {
                        "default": "15s",
                        "description": "Message retry interval. Delay for the MQTT bridge to retry sending the QoS1/QoS2 messages in case of ACK not received. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`",
                        "label": "retry_interval",
                        "type": "string"
                    },
                    "max_inflight": {
                        "default": 32,
                        "description": "Max inflight (sent, but un-acked) messages of the MQTT protocol",
                        "label": "Max Inflight Message",
                        "minimum": 1,
                        "type": "number"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    },
                    "ingress": {
                        "description": "The ingress config defines how this bridge receive messages from the remote MQTT broker, and then<br/>        send them to the local broker.<br/><br/>        Template with variables is allowed in 'remote.qos', 'local.topic', 'local.qos', 'local.retain', 'local.payload'.<br/><br/>        NOTE: if this bridge is used as the input of a rule, and also 'local.topic' is<br/>        configured, then messages got from the remote broker will be sent to both the 'local.topic' and<br/>        the rule.",
                        "label": "Ingress Configs",
                        "$ref": "#/components/schemas/connector-mqtt.ingress"
                    },
                    "egress": {
                        "description": "The egress config defines how this bridge forwards messages from the local broker to the remote broker.<br/><br/>Template with variables is allowed in 'remote.topic', 'local.qos', 'local.retain', 'local.payload'.<br/><br/>NOTE: if this bridge is used as the action of a rule, and also 'local.topic'<br/>is configured, then both the data got from the rule and the MQTT messages that matches<br/>'local.topic' will be forwarded.",
                        "label": "Egress Configs",
                        "$ref": "#/components/schemas/connector-mqtt.egress"
                    }
                },
                "type": "object"
            },
            "bridge_kafka.kafka_message": {
                "properties": {
                    "key": {
                        "default": "${.clientid}",
                        "description": "Template to render Kafka message key. If the template is rendered into a NULL value (i.e. there is no such data field in Rule Engine context) then Kafka's <code>NULL</code> (but not empty string) is used.",
                        "label": "Message Key",
                        "type": "string"
                    },
                    "value": {
                        "default": "${.}",
                        "description": "Template to render Kafka message value. If the template is rendered into a NULL value (i.e. there is no such data field in Rule Engine context) then Kafka's <code>NULL</code> (but not empty string) is used.",
                        "label": "Message Value",
                        "type": "string"
                    },
                    "timestamp": {
                        "default": "${.timestamp}",
                        "description": "Which timestamp to use. The timestamp is expected to be a millisecond precision Unix epoch which can be in string format, e.g. <code>1661326462115</code> or <code>'1661326462115'</code>. When the desired data field for this template is not found, or if the found data is not a valid integer, the current system timestamp will be used.",
                        "label": "Message Timestamp",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "bridge_timescale.put": {
                "required": [
                    "database",
                    "server"
                ],
                "properties": {
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this bridge",
                        "label": "Enable Or Disable Bridge",
                        "type": "boolean"
                    },
                    "sql": {
                        "default": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                        "description": "SQL Template",
                        "format": "sql",
                        "label": "SQL Template",
                        "type": "string"
                    },
                    "local_topic": {
                        "description": "The MQTT topic filter to be forwarded to PostgreSQL. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.</br><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded.",
                        "label": "Local Topic",
                        "type": "string"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/bridge_pgsql.creation_opts"
                    },
                    "server": {
                        "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The PostgreSQL default port 5432 is used if `[:Port]` is not specified.",
                        "label": "Server Host",
                        "type": "string"
                    },
                    "database": {
                        "description": "Database name.",
                        "label": "Database Name",
                        "type": "string"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "Size of the connection pool towards the bridge target service.",
                        "label": "Connection Pool Size",
                        "type": "string"
                    },
                    "username": {
                        "description": "EMQX's username in the external database.",
                        "label": "Username",
                        "type": "string"
                    },
                    "password": {
                        "description": "EMQX's password in the external database.",
                        "format": "password",
                        "label": "Password",
                        "type": "string"
                    },
                    "auto_reconnect": {
                        "default": true,
                        "deprecated": "since(\"v5.0.15\")",
                        "description": "Deprecated. Enable automatic reconnect to the database.",
                        "label": "Deprecated. Auto Reconnect Database",
                        "type": "boolean"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "bridge_mongodb.get_single": {
                "required": [
                    "name",
                    "type",
                    "database",
                    "server"
                ],
                "properties": {
                    "status": {
                        "description": "The status of the bridge",
                        "label": "Bridge Status",
                        "symbols": [
                            "connected",
                            "disconnected",
                            "connecting"
                        ],
                        "type": "enum"
                    },
                    "node_status": {
                        "description": "Node status.",
                        "items": {
                            "$ref": "#/components/schemas/bridge.node_status"
                        },
                        "label": "Node Status",
                        "type": "array"
                    },
                    "mongo_type": {
                        "default": "single",
                        "description": "Standalone instance. Must be set to 'single' when MongoDB server is running in standalone mode.",
                        "label": "Standalone instance",
                        "symbols": [
                            "single"
                        ],
                        "type": "enum"
                    },
                    "server": {
                        "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The MongoDB default port 27017 is used if `[:Port]` is not specified.",
                        "label": "Server Host",
                        "type": "string"
                    },
                    "w_mode": {
                        "default": "unsafe",
                        "description": "Write mode.",
                        "label": "Write Mode",
                        "symbols": [
                            "unsafe",
                            "safe"
                        ],
                        "type": "enum"
                    },
                    "srv_record": {
                        "default": false,
                        "description": "Use DNS SRV record.",
                        "label": "Srv Record",
                        "type": "boolean"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "Size of the connection pool towards the bridge target service.",
                        "label": "Connection Pool Size",
                        "type": "string"
                    },
                    "username": {
                        "description": "EMQX's username in the external database.",
                        "label": "Username",
                        "type": "string"
                    },
                    "password": {
                        "description": "EMQX's password in the external database.",
                        "format": "password",
                        "label": "Password",
                        "type": "string"
                    },
                    "auth_source": {
                        "description": "Database name associated with the user's credentials.",
                        "label": "Auth Source",
                        "type": "string"
                    },
                    "database": {
                        "description": "Database name.",
                        "label": "Database Name",
                        "type": "string"
                    },
                    "topology": {
                        "description": "topology Description",
                        "label": "topology",
                        "$ref": "#/components/schemas/emqx_connector_mongo.topology"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    },
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this MongoDB Bridge",
                        "label": "Enable or disable",
                        "type": "boolean"
                    },
                    "collection": {
                        "default": "mqtt",
                        "description": "The collection where data will be stored into",
                        "label": "Collection to be used",
                        "type": "string"
                    },
                    "payload_template": {
                        "description": "The template for formatting the outgoing messages.  If undefined, rule engine will use JSON format to serialize all visible inputs, such as clientid, topic, payload etc.",
                        "label": "Payload template",
                        "type": "string"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/resource_schema.creation_opts_sync_only"
                    },
                    "type": {
                        "description": "The Bridge Type.",
                        "label": "Bridge Type",
                        "symbols": [
                            "mongodb_single"
                        ],
                        "type": "enum"
                    },
                    "name": {
                        "description": "Bridge name.",
                        "label": "Bridge Name",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "bridge_kafka.producer_mqtt_opts": {
                "properties": {
                    "topic": {
                        "description": "MQTT topic or topic as data source (bridge input).",
                        "label": "Source MQTT Topic",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "bridge_kafka.socket_opts": {
                "properties": {
                    "sndbuf": {
                        "default": "1024KB",
                        "description": "Fine tune the socket send buffer. The default value is tuned for high throughput.",
                        "label": "Socket Send Buffer Size",
                        "type": "byteSize"
                    },
                    "recbuf": {
                        "default": "1024KB",
                        "description": "Fine tune the socket receive buffer. The default value is tuned for high throughput.",
                        "label": "Socket Receive Buffer Size",
                        "type": "byteSize"
                    },
                    "nodelay": {
                        "default": true,
                        "description": "When set to 'true', TCP buffer sent as soon as possible. Otherwise, the OS kernel may buffer small TCP packets for a while (40 ms by default).",
                        "label": "No Delay",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "bridge_redis.post_single": {
                "required": [
                    "name",
                    "type",
                    "database",
                    "server",
                    "command_template"
                ],
                "properties": {
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this bridge",
                        "label": "Enable Or Disable Bridge",
                        "type": "boolean"
                    },
                    "local_topic": {
                        "description": "The MQTT topic filter to be forwarded to Redis. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.</br><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded.",
                        "label": "Local Topic",
                        "type": "string"
                    },
                    "command_template": {
                        "description": "Redis command template used to export messages. Each list element stands for a command name or its argument.<br/>For example, to push payloads in a Redis list by key `msgs`, the elements should be the following:<br/>`rpush`, `msgs`, `${payload}`.",
                        "items": {
                            "type": "string"
                        },
                        "label": "Redis Command Template",
                        "type": "array"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/bridge_redis.creation_opts_redis_single"
                    },
                    "server": {
                        "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The Redis default port 6379 is used if `[:Port]` is not specified.",
                        "label": "Server Host",
                        "type": "string"
                    },
                    "redis_type": {
                        "default": "single",
                        "description": "Single mode. Must be set to 'single' when Redis server is running in single mode.",
                        "label": "Single Mode",
                        "symbols": [
                            "single"
                        ],
                        "type": "enum"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "Size of the connection pool towards the bridge target service.",
                        "label": "Connection Pool Size",
                        "type": "string"
                    },
                    "password": {
                        "description": "EMQX's password in the external database.",
                        "format": "password",
                        "label": "Password",
                        "type": "string"
                    },
                    "database": {
                        "default": 0,
                        "description": "Redis database ID.",
                        "label": "Database ID",
                        "type": "number"
                    },
                    "auto_reconnect": {
                        "default": true,
                        "deprecated": "since(\"v5.0.15\")",
                        "description": "Deprecated. Enable automatic reconnect to the database.",
                        "label": "Deprecated. Auto Reconnect Database",
                        "type": "boolean"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    },
                    "type": {
                        "description": "The Bridge Type",
                        "label": "Bridge Type",
                        "symbols": [
                            "redis_single"
                        ],
                        "type": "enum"
                    },
                    "name": {
                        "description": "Bridge name, used as a human-readable description of the bridge.",
                        "label": "Bridge Name",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "connector-mqtt.ingress_local": {
                "properties": {
                    "topic": {
                        "description": "Send messages to which topic of the local broker.<br/><br/>Template with variables is allowed.",
                        "label": "Local Topic",
                        "type": "string"
                    },
                    "qos": {
                        "default": "${qos}",
                        "description": "The QoS of the MQTT message to be sent.<br/><br/>Template with variables is allowed.",
                        "label": "Local QoS",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "symbols": [
                                    0,
                                    1,
                                    2
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "retain": {
                        "default": "${retain}",
                        "description": "The 'retain' flag of the MQTT message to be sent.<br/><br/>Template with variables is allowed.",
                        "label": "Retain Flag",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "boolean"
                            }
                        ]
                    },
                    "payload": {
                        "description": "The payload of the MQTT message to be sent.<br/><br/>Template with variables is allowed.",
                        "label": "Payload",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "bridge_mysql.post": {
                "required": [
                    "database",
                    "server",
                    "name",
                    "type"
                ],
                "properties": {
                    "type": {
                        "description": "The Bridge Type",
                        "label": "Bridge Type",
                        "symbols": [
                            "mysql"
                        ],
                        "type": "enum"
                    },
                    "name": {
                        "description": "Bridge name, used as a human-readable description of the bridge.",
                        "label": "Bridge Name",
                        "type": "string"
                    },
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this bridge",
                        "label": "Enable Or Disable Bridge",
                        "type": "boolean"
                    },
                    "sql": {
                        "default": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, FROM_UNIXTIME(${timestamp}/1000))",
                        "description": "SQL Template",
                        "format": "sql",
                        "label": "SQL Template",
                        "type": "string"
                    },
                    "local_topic": {
                        "description": "The MQTT topic filter to be forwarded to MySQL. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.</br><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded.",
                        "label": "Local Topic",
                        "type": "string"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/bridge_mysql.creation_opts"
                    },
                    "server": {
                        "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The MySQL default port 3306 is used if `[:Port]` is not specified.",
                        "label": "Server Host",
                        "type": "string"
                    },
                    "database": {
                        "description": "Database name.",
                        "label": "Database Name",
                        "type": "string"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "Size of the connection pool towards the bridge target service.",
                        "label": "Connection Pool Size",
                        "type": "string"
                    },
                    "username": {
                        "default": "root",
                        "description": "EMQX's username in the external database.",
                        "label": "Username",
                        "type": "string"
                    },
                    "password": {
                        "description": "EMQX's password in the external database.",
                        "format": "password",
                        "label": "Password",
                        "type": "string"
                    },
                    "auto_reconnect": {
                        "default": true,
                        "deprecated": "since(\"v5.0.15\")",
                        "description": "Deprecated. Enable automatic reconnect to the database.",
                        "label": "Deprecated. Auto Reconnect Database",
                        "type": "boolean"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "bridge_webhook.post": {
                "required": [
                    "url",
                    "name",
                    "type"
                ],
                "properties": {
                    "type": {
                        "description": "The Bridge Type",
                        "label": "Bridge Type",
                        "symbols": [
                            "webhook"
                        ],
                        "type": "enum"
                    },
                    "name": {
                        "description": "Bridge name, used as a human-readable description of the bridge.",
                        "label": "Bridge Name",
                        "type": "string"
                    },
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this bridge",
                        "label": "Enable Or Disable Bridge",
                        "type": "boolean"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/bridge_webhook.creation_opts"
                    },
                    "connect_timeout": {
                        "default": "15s",
                        "description": "The timeout when connecting to the HTTP server.",
                        "label": "Connect Timeout",
                        "type": "duration"
                    },
                    "retry_interval": {
                        "deprecated": "since(\"5.0.4\")",
                        "description": "retry_interval Description",
                        "label": "retry_interval",
                        "type": "duration"
                    },
                    "pool_type": {
                        "default": "random",
                        "description": "The type of the pool. Can be one of `random`, `hash`.",
                        "label": "Pool Type",
                        "symbols": [
                            "random",
                            "hash"
                        ],
                        "type": "enum"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "The pool size.",
                        "label": "Pool Size",
                        "type": "string"
                    },
                    "enable_pipelining": {
                        "default": 100,
                        "description": "A positive integer. Whether to send HTTP requests continuously, when set to 1, it means that after each HTTP request is sent, you need to wait for the server to return and then continue to send the next request.",
                        "label": "HTTP Pipelineing",
                        "type": "string"
                    },
                    "request": {
                        "description": "Configure HTTP request parameters.",
                        "label": "Request",
                        "$ref": "#/components/schemas/connector-http.request"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    },
                    "url": {
                        "description": "The URL of the HTTP Bridge.<br/><br/>Template with variables is allowed in the path, but variables cannot be used in the scheme, host,<br/>or port part.<br/><br/>For example, <code> http://localhost:9901/${topic} </code> is allowed, but<br/><code> http://${host}:9901/message </code> or <code> http://localhost:${port}/message </code><br/>is not allowed.",
                        "label": "HTTP Bridge",
                        "type": "string"
                    },
                    "direction": {
                        "deprecated": "since(\"5.0.12\")",
                        "description": "Deprecated, The direction of this bridge, MUST be 'egress'",
                        "label": "Bridge Direction",
                        "symbols": [
                            "egress"
                        ],
                        "type": "enum"
                    },
                    "local_topic": {
                        "description": "The MQTT topic filter to be forwarded to the HTTP server. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded.",
                        "label": "Local Topic",
                        "type": "string"
                    },
                    "method": {
                        "default": "post",
                        "description": "The method of the HTTP request. All the available methods are: post, put, get, delete.<br/><br/>Template with variables is allowed.",
                        "label": "HTTP Method",
                        "symbols": [
                            "post",
                            "put",
                            "get",
                            "delete"
                        ],
                        "type": "enum"
                    },
                    "headers": {
                        "default": {
                            "accept": "application/json",
                            "cache-control": "no-cache",
                            "connection": "keep-alive",
                            "content-type": "application/json",
                            "keep-alive": "timeout=5"
                        },
                        "description": "The headers of the HTTP request.<br/><br/>Template with variables is allowed.",
                        "label": "HTTP Header",
                        "type": "object"
                    },
                    "body": {
                        "description": "The body of the HTTP request.<br/><br/>If not provided, the body will be a JSON object of all the available fields.<br/><br/>There, 'all the available fields' means the context of a MQTT message when<br/>this webhook is triggered by receiving a MQTT message (the `local_topic` is set),<br/>or the context of the event when this webhook is triggered by a rule (i.e. this<br/>webhook is used as an action of a rule).<br/><br/>Template with variables is allowed.",
                        "label": "HTTP Body",
                        "type": "string"
                    },
                    "max_retries": {
                        "default": 2,
                        "description": "HTTP request max retry times if failed.",
                        "label": "HTTP Request Max Retries",
                        "minimum": 1,
                        "type": "number"
                    },
                    "request_timeout": {
                        "default": "15s",
                        "description": "HTTP request timeout.",
                        "label": "HTTP Request Timeout",
                        "type": "duration"
                    }
                },
                "type": "object"
            },
            "bridge_kafka.auth_gssapi_kerberos": {
                "required": [
                    "kerberos_keytab_file",
                    "kerberos_principal"
                ],
                "properties": {
                    "kerberos_principal": {
                        "description": "SASL GSSAPI authentication Kerberos principal. For example <code>client_name@MY.KERBEROS.REALM.MYDOMAIN.COM</code>, NOTE: The realm in use has to be configured in /etc/krb5.conf in EMQX nodes.",
                        "label": "Kerberos Principal",
                        "type": "string"
                    },
                    "kerberos_keytab_file": {
                        "description": "SASL GSSAPI authentication Kerberos keytab file path. NOTE: This file has to be placed in EMQX nodes, and the EMQX service runner user requires read permission.",
                        "label": "Kerberos keytab file",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "bridge_redis.put_single": {
                "required": [
                    "database",
                    "server",
                    "command_template"
                ],
                "properties": {
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this bridge",
                        "label": "Enable Or Disable Bridge",
                        "type": "boolean"
                    },
                    "local_topic": {
                        "description": "The MQTT topic filter to be forwarded to Redis. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.</br><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded.",
                        "label": "Local Topic",
                        "type": "string"
                    },
                    "command_template": {
                        "description": "Redis command template used to export messages. Each list element stands for a command name or its argument.<br/>For example, to push payloads in a Redis list by key `msgs`, the elements should be the following:<br/>`rpush`, `msgs`, `${payload}`.",
                        "items": {
                            "type": "string"
                        },
                        "label": "Redis Command Template",
                        "type": "array"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/bridge_redis.creation_opts_redis_single"
                    },
                    "server": {
                        "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The Redis default port 6379 is used if `[:Port]` is not specified.",
                        "label": "Server Host",
                        "type": "string"
                    },
                    "redis_type": {
                        "default": "single",
                        "description": "Single mode. Must be set to 'single' when Redis server is running in single mode.",
                        "label": "Single Mode",
                        "symbols": [
                            "single"
                        ],
                        "type": "enum"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "Size of the connection pool towards the bridge target service.",
                        "label": "Connection Pool Size",
                        "type": "string"
                    },
                    "password": {
                        "description": "EMQX's password in the external database.",
                        "format": "password",
                        "label": "Password",
                        "type": "string"
                    },
                    "database": {
                        "default": 0,
                        "description": "Redis database ID.",
                        "label": "Database ID",
                        "type": "number"
                    },
                    "auto_reconnect": {
                        "default": true,
                        "deprecated": "since(\"v5.0.15\")",
                        "description": "Deprecated. Enable automatic reconnect to the database.",
                        "label": "Deprecated. Auto Reconnect Database",
                        "type": "boolean"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "bridge_webhook.put": {
                "required": [
                    "url"
                ],
                "properties": {
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this bridge",
                        "label": "Enable Or Disable Bridge",
                        "type": "boolean"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/bridge_webhook.creation_opts"
                    },
                    "connect_timeout": {
                        "default": "15s",
                        "description": "The timeout when connecting to the HTTP server.",
                        "label": "Connect Timeout",
                        "type": "duration"
                    },
                    "retry_interval": {
                        "deprecated": "since(\"5.0.4\")",
                        "description": "retry_interval Description",
                        "label": "retry_interval",
                        "type": "duration"
                    },
                    "pool_type": {
                        "default": "random",
                        "description": "The type of the pool. Can be one of `random`, `hash`.",
                        "label": "Pool Type",
                        "symbols": [
                            "random",
                            "hash"
                        ],
                        "type": "enum"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "The pool size.",
                        "label": "Pool Size",
                        "type": "string"
                    },
                    "enable_pipelining": {
                        "default": 100,
                        "description": "A positive integer. Whether to send HTTP requests continuously, when set to 1, it means that after each HTTP request is sent, you need to wait for the server to return and then continue to send the next request.",
                        "label": "HTTP Pipelineing",
                        "type": "string"
                    },
                    "request": {
                        "description": "Configure HTTP request parameters.",
                        "label": "Request",
                        "$ref": "#/components/schemas/connector-http.request"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    },
                    "url": {
                        "description": "The URL of the HTTP Bridge.<br/><br/>Template with variables is allowed in the path, but variables cannot be used in the scheme, host,<br/>or port part.<br/><br/>For example, <code> http://localhost:9901/${topic} </code> is allowed, but<br/><code> http://${host}:9901/message </code> or <code> http://localhost:${port}/message </code><br/>is not allowed.",
                        "label": "HTTP Bridge",
                        "type": "string"
                    },
                    "direction": {
                        "deprecated": "since(\"5.0.12\")",
                        "description": "Deprecated, The direction of this bridge, MUST be 'egress'",
                        "label": "Bridge Direction",
                        "symbols": [
                            "egress"
                        ],
                        "type": "enum"
                    },
                    "local_topic": {
                        "description": "The MQTT topic filter to be forwarded to the HTTP server. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded.",
                        "label": "Local Topic",
                        "type": "string"
                    },
                    "method": {
                        "default": "post",
                        "description": "The method of the HTTP request. All the available methods are: post, put, get, delete.<br/><br/>Template with variables is allowed.",
                        "label": "HTTP Method",
                        "symbols": [
                            "post",
                            "put",
                            "get",
                            "delete"
                        ],
                        "type": "enum"
                    },
                    "headers": {
                        "default": {
                            "accept": "application/json",
                            "cache-control": "no-cache",
                            "connection": "keep-alive",
                            "content-type": "application/json",
                            "keep-alive": "timeout=5"
                        },
                        "description": "The headers of the HTTP request.<br/><br/>Template with variables is allowed.",
                        "label": "HTTP Header",
                        "type": "object"
                    },
                    "body": {
                        "description": "The body of the HTTP request.<br/><br/>If not provided, the body will be a JSON object of all the available fields.<br/><br/>There, 'all the available fields' means the context of a MQTT message when<br/>this webhook is triggered by receiving a MQTT message (the `local_topic` is set),<br/>or the context of the event when this webhook is triggered by a rule (i.e. this<br/>webhook is used as an action of a rule).<br/><br/>Template with variables is allowed.",
                        "label": "HTTP Body",
                        "type": "string"
                    },
                    "max_retries": {
                        "default": 2,
                        "description": "HTTP request max retry times if failed.",
                        "label": "HTTP Request Max Retries",
                        "minimum": 1,
                        "type": "number"
                    },
                    "request_timeout": {
                        "default": "15s",
                        "description": "HTTP request timeout.",
                        "label": "HTTP Request Timeout",
                        "type": "duration"
                    }
                },
                "type": "object"
            },
            "connector_hstreamdb.config": {
                "required": [
                    "pool_size",
                    "stream",
                    "url"
                ],
                "properties": {
                    "url": {
                        "description": "HStreamDB Server URL",
                        "label": "HStreamDB Server URL",
                        "type": "string"
                    },
                    "stream": {
                        "description": "HStreamDB Stream Name",
                        "label": "HStreamDB Stream Name",
                        "type": "string"
                    },
                    "ordering_key": {
                        "description": "HStreamDB Ordering Key",
                        "label": "HStreamDB Ordering Key",
                        "type": "string"
                    },
                    "pool_size": {
                        "description": "HStreamDB Pool Size",
                        "label": "HStreamDB Pool Size",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "resource_schema.creation_opts": {
                "properties": {
                    "worker_pool_size": {
                        "default": 16,
                        "description": "The number of buffer workers. Only applicable for egress type bridges.<br/>For bridges only have ingress direction data flow, it can be set to 0 otherwise must be greater than 0.",
                        "label": "Buffer Pool Size",
                        "minimum": 1,
                        "type": "number"
                    },
                    "health_check_interval": {
                        "default": "15s",
                        "description": "Health check interval.",
                        "label": "Health Check Interval",
                        "type": "duration"
                    },
                    "start_after_created": {
                        "default": "true",
                        "description": "Whether start the resource right after created.",
                        "label": "Start After Created",
                        "type": "boolean"
                    },
                    "start_timeout": {
                        "default": "5s",
                        "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
                        "label": "Start Timeout",
                        "type": "duration"
                    },
                    "auto_restart_interval": {
                        "default": "60s",
                        "description": "The auto restart interval after the resource is disconnected.",
                        "label": "Auto Restart Interval",
                        "oneOf": [
                            {
                                "type": "duration"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "query_mode": {
                        "default": "async",
                        "description": "Query mode. Optional 'sync/async', default 'async'.",
                        "label": "Query mode",
                        "symbols": [
                            "sync",
                            "async"
                        ],
                        "type": "enum"
                    },
                    "request_timeout": {
                        "default": "15s",
                        "description": "Timeout for requests.  If <code>query_mode</code> is <code>sync</code>, calls to the resource will be blocked for this amount of time before timing out.",
                        "label": "Request timeout",
                        "oneOf": [
                            {
                                "type": "duration"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "async_inflight_window": {
                        "default": 100,
                        "description": "Async query inflight window.",
                        "label": "Async inflight window",
                        "type": "string"
                    },
                    "enable_batch": {
                        "default": true,
                        "deprecated": "since(\"v5.0.14\")",
                        "description": "Batch mode enabled.",
                        "label": "Enable batch",
                        "type": "boolean"
                    },
                    "batch_size": {
                        "default": 1,
                        "description": "Maximum batch count. If equal to 1, there's effectively no batching.",
                        "label": "Batch size",
                        "type": "string"
                    },
                    "batch_time": {
                        "default": "20ms",
                        "description": "Maximum batch waiting interval.",
                        "label": "Batch time",
                        "type": "duration"
                    },
                    "enable_queue": {
                        "default": false,
                        "deprecated": "since(\"v5.0.14\")",
                        "description": "Enable disk buffer queue (only applicable for egress bridges).<br/>When Enabled, messages will be buffered on disk when the bridge connection is down.<br/>When disabled the messages are buffered in RAM only.",
                        "label": "Enable disk buffer queue",
                        "type": "boolean"
                    },
                    "max_queue_bytes": {
                        "default": "100MB",
                        "description": "Maximum number of bytes to buffer for each buffer worker.",
                        "label": "Max buffer queue size",
                        "type": "byteSize"
                    }
                },
                "type": "object"
            },
            "bridge_timescale.post": {
                "required": [
                    "database",
                    "server",
                    "name",
                    "type"
                ],
                "properties": {
                    "type": {
                        "description": "The Bridge Type",
                        "label": "Bridge Type",
                        "symbols": [
                            "timescale"
                        ],
                        "type": "enum"
                    },
                    "name": {
                        "description": "Bridge name.",
                        "label": "Bridge Name",
                        "type": "string"
                    },
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this bridge",
                        "label": "Enable Or Disable Bridge",
                        "type": "boolean"
                    },
                    "sql": {
                        "default": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                        "description": "SQL Template",
                        "format": "sql",
                        "label": "SQL Template",
                        "type": "string"
                    },
                    "local_topic": {
                        "description": "The MQTT topic filter to be forwarded to PostgreSQL. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.</br><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded.",
                        "label": "Local Topic",
                        "type": "string"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/bridge_pgsql.creation_opts"
                    },
                    "server": {
                        "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The PostgreSQL default port 5432 is used if `[:Port]` is not specified.",
                        "label": "Server Host",
                        "type": "string"
                    },
                    "database": {
                        "description": "Database name.",
                        "label": "Database Name",
                        "type": "string"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "Size of the connection pool towards the bridge target service.",
                        "label": "Connection Pool Size",
                        "type": "string"
                    },
                    "username": {
                        "description": "EMQX's username in the external database.",
                        "label": "Username",
                        "type": "string"
                    },
                    "password": {
                        "description": "EMQX's password in the external database.",
                        "format": "password",
                        "label": "Password",
                        "type": "string"
                    },
                    "auto_reconnect": {
                        "default": true,
                        "deprecated": "since(\"v5.0.15\")",
                        "description": "Deprecated. Enable automatic reconnect to the database.",
                        "label": "Deprecated. Auto Reconnect Database",
                        "type": "boolean"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "bridge_gcp_pubsub.post": {
                "required": [
                    "service_account_json",
                    "pubsub_topic",
                    "name",
                    "type"
                ],
                "properties": {
                    "type": {
                        "description": "The Bridge Type",
                        "label": "Bridge Type",
                        "symbols": [
                            "gcp_pubsub"
                        ],
                        "type": "enum"
                    },
                    "name": {
                        "description": "Bridge name, used as a human-readable description of the bridge.",
                        "label": "Bridge Name",
                        "type": "string"
                    },
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this bridge",
                        "label": "Enable Or Disable Bridge",
                        "type": "boolean"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/resource_schema.creation_opts"
                    },
                    "connect_timeout": {
                        "default": "15s",
                        "description": "The timeout when connecting to the HTTP server.",
                        "label": "Connect Timeout",
                        "type": "duration"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "The pool size.",
                        "label": "Pool Size",
                        "type": "string"
                    },
                    "pipelining": {
                        "default": 100,
                        "description": "A positive integer. Whether to send HTTP requests continuously, when set to 1, it means that after each HTTP request is sent, you need to wait for the server to return and then continue to send the next request.",
                        "label": "HTTP Pipelineing",
                        "type": "string"
                    },
                    "max_retries": {
                        "default": 2,
                        "description": "Max retry times if an error occurs when sending a request.",
                        "label": "Max Retries",
                        "minimum": 1,
                        "type": "number"
                    },
                    "request_timeout": {
                        "default": "15s",
                        "description": "HTTP request timeout.",
                        "label": "Request Timeout",
                        "type": "duration"
                    },
                    "payload_template": {
                        "default": "",
                        "description": "The template for formatting the outgoing messages.  If undefined, will send all the available context in JSON format.",
                        "label": "Payload template",
                        "type": "string"
                    },
                    "local_topic": {
                        "description": "The MQTT topic filter to be forwarded to GCP PubSub. All MQTT 'PUBLISH' messages with the topic<br/>matching `local_topic` will be forwarded.</br><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded.",
                        "label": "Local Topic",
                        "type": "string"
                    },
                    "pubsub_topic": {
                        "description": "The GCP PubSub topic to publish messages to.",
                        "label": "GCP PubSub Topic",
                        "type": "string"
                    },
                    "service_account_json": {
                        "description": "JSON containing the GCP Service Account credentials to be used with PubSub.<br/>When a GCP Service Account is created (as described in https://developers.google.com/identity/protocols/oauth2/service-account#creatinganaccount), you have the option of downloading the credentials in JSON form.  That's the file needed.",
                        "label": "GCP Service Account Credentials",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "bridge_pgsql.creation_opts": {
                "properties": {
                    "worker_pool_size": {
                        "default": 16,
                        "description": "The number of buffer workers. Only applicable for egress type bridges.<br/>For bridges only have ingress direction data flow, it can be set to 0 otherwise must be greater than 0.",
                        "label": "Buffer Pool Size",
                        "minimum": 1,
                        "type": "number"
                    },
                    "health_check_interval": {
                        "default": "15s",
                        "description": "Health check interval.",
                        "label": "Health Check Interval",
                        "type": "duration"
                    },
                    "start_after_created": {
                        "default": "true",
                        "description": "Whether start the resource right after created.",
                        "label": "Start After Created",
                        "type": "boolean"
                    },
                    "start_timeout": {
                        "default": "5s",
                        "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
                        "label": "Start Timeout",
                        "type": "duration"
                    },
                    "auto_restart_interval": {
                        "default": "60s",
                        "description": "The auto restart interval after the resource is disconnected.",
                        "label": "Auto Restart Interval",
                        "oneOf": [
                            {
                                "type": "duration"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "query_mode": {
                        "default": "sync",
                        "description": "Query mode. Only support 'sync'.",
                        "label": "Query mode",
                        "symbols": [
                            "sync"
                        ],
                        "type": "enum"
                    },
                    "request_timeout": {
                        "default": "15s",
                        "description": "Timeout for requests.  If <code>query_mode</code> is <code>sync</code>, calls to the resource will be blocked for this amount of time before timing out.",
                        "label": "Request timeout",
                        "oneOf": [
                            {
                                "type": "duration"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "enable_batch": {
                        "default": true,
                        "deprecated": "since(\"v5.0.14\")",
                        "description": "Batch mode enabled.",
                        "label": "Enable batch",
                        "type": "boolean"
                    },
                    "batch_size": {
                        "default": 1,
                        "description": "Maximum batch count. If equal to 1, there's effectively no batching.",
                        "label": "Batch size",
                        "type": "string"
                    },
                    "batch_time": {
                        "default": "20ms",
                        "description": "Maximum batch waiting interval.",
                        "label": "Batch time",
                        "type": "duration"
                    },
                    "enable_queue": {
                        "default": false,
                        "deprecated": "since(\"v5.0.14\")",
                        "description": "Enable disk buffer queue (only applicable for egress bridges).<br/>When Enabled, messages will be buffered on disk when the bridge connection is down.<br/>When disabled the messages are buffered in RAM only.",
                        "label": "Enable disk buffer queue",
                        "type": "boolean"
                    },
                    "max_queue_bytes": {
                        "default": "100MB",
                        "description": "Maximum number of bytes to buffer for each buffer worker.",
                        "label": "Max buffer queue size",
                        "type": "byteSize"
                    }
                },
                "type": "object"
            },
            "bridge_mongodb.put_sharded": {
                "required": [
                    "database",
                    "servers"
                ],
                "properties": {
                    "mongo_type": {
                        "default": "sharded",
                        "description": "Sharded cluster. Must be set to 'sharded' when MongoDB server is running in 'sharded' mode.",
                        "label": "Sharded cluster",
                        "symbols": [
                            "sharded"
                        ],
                        "type": "enum"
                    },
                    "servers": {
                        "description": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`<br/>For each Node should be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The MongoDB default port 27017 is used if `[:Port]` is not specified.",
                        "label": "Servers",
                        "type": "string"
                    },
                    "w_mode": {
                        "default": "unsafe",
                        "description": "Write mode.",
                        "label": "Write Mode",
                        "symbols": [
                            "unsafe",
                            "safe"
                        ],
                        "type": "enum"
                    },
                    "srv_record": {
                        "default": false,
                        "description": "Use DNS SRV record.",
                        "label": "Srv Record",
                        "type": "boolean"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "Size of the connection pool towards the bridge target service.",
                        "label": "Connection Pool Size",
                        "type": "string"
                    },
                    "username": {
                        "description": "EMQX's username in the external database.",
                        "label": "Username",
                        "type": "string"
                    },
                    "password": {
                        "description": "EMQX's password in the external database.",
                        "format": "password",
                        "label": "Password",
                        "type": "string"
                    },
                    "auth_source": {
                        "description": "Database name associated with the user's credentials.",
                        "label": "Auth Source",
                        "type": "string"
                    },
                    "database": {
                        "description": "Database name.",
                        "label": "Database Name",
                        "type": "string"
                    },
                    "topology": {
                        "description": "topology Description",
                        "label": "topology",
                        "$ref": "#/components/schemas/emqx_connector_mongo.topology"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/broker.ssl_client_opts"
                    },
                    "enable": {
                        "default": true,
                        "description": "Enable or disable this MongoDB Bridge",
                        "label": "Enable or disable",
                        "type": "boolean"
                    },
                    "collection": {
                        "default": "mqtt",
                        "description": "The collection where data will be stored into",
                        "label": "Collection to be used",
                        "type": "string"
                    },
                    "payload_template": {
                        "description": "The template for formatting the outgoing messages.  If undefined, rule engine will use JSON format to serialize all visible inputs, such as clientid, topic, payload etc.",
                        "label": "Payload template",
                        "type": "string"
                    },
                    "resource_opts": {
                        "default": {},
                        "description": "Resource options.",
                        "label": "Resource Options",
                        "$ref": "#/components/schemas/resource_schema.creation_opts_sync_only"
                    }
                },
                "type": "object"
            }
        }
    },
    "info": {
        "title": "EMQX Data Bridge API Schema",
        "version": "0.1.0"
    },
    "paths": {
        "/bridges": {
            "get": {
                "items": {
                    "oneOf": [
                        {
                            "$ref": "#/components/schemas/bridge_matrix.get"
                        },
                        {
                            "$ref": "#/components/schemas/bridge_timescale.get"
                        },
                        {
                            "$ref": "#/components/schemas/bridge_redis.get_cluster"
                        },
                        {
                            "$ref": "#/components/schemas/bridge_redis.get_sentinel"
                        },
                        {
                            "$ref": "#/components/schemas/bridge_redis.get_single"
                        },
                        {
                            "$ref": "#/components/schemas/bridge_influxdb.get_api_v2"
                        },
                        {
                            "$ref": "#/components/schemas/bridge_influxdb.get_api_v1"
                        },
                        {
                            "$ref": "#/components/schemas/bridge_hstreamdb.get"
                        },
                        {
                            "$ref": "#/components/schemas/bridge_mongodb.get_single"
                        },
                        {
                            "$ref": "#/components/schemas/bridge_mongodb.get_sharded"
                        },
                        {
                            "$ref": "#/components/schemas/bridge_mongodb.get_rs"
                        },
                        {
                            "$ref": "#/components/schemas/bridge_pgsql.get"
                        },
                        {
                            "$ref": "#/components/schemas/bridge_mysql.get"
                        },
                        {
                            "$ref": "#/components/schemas/bridge_kafka.get"
                        },
                        {
                            "$ref": "#/components/schemas/bridge_gcp_pubsub.get"
                        },
                        {
                            "$ref": "#/components/schemas/bridge_mqtt.get"
                        },
                        {
                            "$ref": "#/components/schemas/bridge_webhook.get"
                        }
                    ]
                },
                "type": "array"
            }
        },
        "/bridges/:id": {
            "get": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/bridge_matrix.get"
                    },
                    {
                        "$ref": "#/components/schemas/bridge_timescale.get"
                    },
                    {
                        "$ref": "#/components/schemas/bridge_redis.get_cluster"
                    },
                    {
                        "$ref": "#/components/schemas/bridge_redis.get_sentinel"
                    },
                    {
                        "$ref": "#/components/schemas/bridge_redis.get_single"
                    },
                    {
                        "$ref": "#/components/schemas/bridge_influxdb.get_api_v2"
                    },
                    {
                        "$ref": "#/components/schemas/bridge_influxdb.get_api_v1"
                    },
                    {
                        "$ref": "#/components/schemas/bridge_hstreamdb.get"
                    },
                    {
                        "$ref": "#/components/schemas/bridge_mongodb.get_single"
                    },
                    {
                        "$ref": "#/components/schemas/bridge_mongodb.get_sharded"
                    },
                    {
                        "$ref": "#/components/schemas/bridge_mongodb.get_rs"
                    },
                    {
                        "$ref": "#/components/schemas/bridge_pgsql.get"
                    },
                    {
                        "$ref": "#/components/schemas/bridge_mysql.get"
                    },
                    {
                        "$ref": "#/components/schemas/bridge_kafka.get"
                    },
                    {
                        "$ref": "#/components/schemas/bridge_gcp_pubsub.get"
                    },
                    {
                        "$ref": "#/components/schemas/bridge_mqtt.get"
                    },
                    {
                        "$ref": "#/components/schemas/bridge_webhook.get"
                    }
                ]
            },
            "put": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/bridge_matrix.get"
                    },
                    {
                        "$ref": "#/components/schemas/bridge_timescale.get"
                    },
                    {
                        "$ref": "#/components/schemas/bridge_redis.get_cluster"
                    },
                    {
                        "$ref": "#/components/schemas/bridge_redis.get_sentinel"
                    },
                    {
                        "$ref": "#/components/schemas/bridge_redis.get_single"
                    },
                    {
                        "$ref": "#/components/schemas/bridge_influxdb.get_api_v2"
                    },
                    {
                        "$ref": "#/components/schemas/bridge_influxdb.get_api_v1"
                    },
                    {
                        "$ref": "#/components/schemas/bridge_hstreamdb.get"
                    },
                    {
                        "$ref": "#/components/schemas/bridge_mongodb.get_single"
                    },
                    {
                        "$ref": "#/components/schemas/bridge_mongodb.get_sharded"
                    },
                    {
                        "$ref": "#/components/schemas/bridge_mongodb.get_rs"
                    },
                    {
                        "$ref": "#/components/schemas/bridge_pgsql.get"
                    },
                    {
                        "$ref": "#/components/schemas/bridge_mysql.get"
                    },
                    {
                        "$ref": "#/components/schemas/bridge_kafka.get"
                    },
                    {
                        "$ref": "#/components/schemas/bridge_gcp_pubsub.get"
                    },
                    {
                        "$ref": "#/components/schemas/bridge_mqtt.get"
                    },
                    {
                        "$ref": "#/components/schemas/bridge_webhook.get"
                    }
                ]
            }
        },
        "/bridges/:id/:operation": {},
        "/bridges/:id/enable/:enable": {},
        "/bridges/:id/metrics": {
            "get": {
                "properties": {
                    "metrics": {
                        "description": "Bridge metrics.",
                        "label": "Bridge Metrics",
                        "$ref": "#/components/schemas/bridge.metrics"
                    },
                    "node_metrics": {
                        "description": "Node metrics.",
                        "items": {
                            "$ref": "#/components/schemas/bridge.node_metrics"
                        },
                        "label": "Node Metrics",
                        "type": "array"
                    }
                },
                "type": "object"
            }
        },
        "/bridges/:id/metrics/reset": {},
        "/bridges_probe": {},
        "/nodes/:node/bridges/:id/:operation": {}
    }
}