{
  "paths": {
    "/configs_reset/:rootname": {},
    "/configs/zones": {
      "put": {
        "type": "object",
        "properties": {
          "$name": {
            "$ref": "#/components/schemas/broker.zone"
          }
        }
      },
      "get": {
        "type": "object",
        "properties": {
          "$name": {
            "$ref": "#/components/schemas/broker.zone"
          }
        }
      }
    },
    "/configs/trace": {
      "put": {
        "$ref": "#/components/schemas/broker.trace"
      },
      "get": {
        "$ref": "#/components/schemas/broker.trace"
      }
    },
    "/configs/sysmon": {
      "put": {
        "$ref": "#/components/schemas/broker.sysmon"
      },
      "get": {
        "$ref": "#/components/schemas/broker.sysmon"
      }
    },
    "/configs/sys_topics": {
      "put": {
        "$ref": "#/components/schemas/broker.sys_topics"
      },
      "get": {
        "$ref": "#/components/schemas/broker.sys_topics"
      }
    },
    "/configs/persistent_session_store": {
      "put": {
        "$ref": "#/components/schemas/broker.persistent_session_store"
      },
      "get": {
        "$ref": "#/components/schemas/broker.persistent_session_store"
      }
    },
    "/configs/log": {
      "put": {
        "$ref": "#/components/schemas/emqx_conf_schema.log"
      },
      "get": {
        "$ref": "#/components/schemas/emqx_conf_schema.log"
      }
    },
    "/configs/limiter": {
      "put": {
        "$ref": "#/components/schemas/limiter.limiter"
      },
      "get": {
        "$ref": "#/components/schemas/limiter.limiter"
      }
    },
    "/configs/global_zone": {
      "put": {
        "type": "object",
        "properties": {
          "mqtt": {
            "$ref": "#/components/schemas/zone.mqtt"
          },
          "force_shutdown": {
            "$ref": "#/components/schemas/zone.force_shutdown"
          },
          "force_gc": {
            "$ref": "#/components/schemas/zone.force_gc"
          }
        }
      },
      "get": {
        "type": "object",
        "properties": {
          "mqtt": {
            "$ref": "#/components/schemas/zone.mqtt"
          },
          "force_shutdown": {
            "$ref": "#/components/schemas/zone.force_shutdown"
          },
          "force_gc": {
            "$ref": "#/components/schemas/zone.force_gc"
          }
        }
      }
    },
    "/configs/dashboard": {
      "put": {
        "$ref": "#/components/schemas/dashboard.dashboard"
      },
      "get": {
        "$ref": "#/components/schemas/dashboard.dashboard"
      }
    },
    "/configs/alarm": {
      "put": {
        "$ref": "#/components/schemas/broker.alarm"
      },
      "get": {
        "$ref": "#/components/schemas/broker.alarm"
      }
    },
    "/configs": {
      "get": {
        "type": "object",
        "properties": {
          "zones": {
            "type": "object",
            "properties": {
              "$name": {
                "$ref": "#/components/schemas/broker.zone"
              }
            }
          },
          "log": {
            "$ref": "#/components/schemas/emqx_conf_schema.log"
          },
          "limiter": {
            "$ref": "#/components/schemas/limiter.limiter"
          },
          "sysmon": {
            "$ref": "#/components/schemas/broker.sysmon"
          },
          "sys_topics": {
            "$ref": "#/components/schemas/broker.sys_topics"
          },
          "alarm": {
            "$ref": "#/components/schemas/broker.alarm"
          },
          "dashboard": {
            "$ref": "#/components/schemas/dashboard.dashboard",
            "summary": "Dashboard"
          }
        }
      }
    }
  },
  "info": {
    "version": "0.1.0",
    "title": "EMQX Hot Conf API Schema"
  },
  "components": {
    "schemas": {
      "zone.mqtt": {
        "type": "object",
        "properties": {
          "idle_timeout": {
            "oneOf": [
              {
                "type": "duration"
              },
              {
                "type": "enum",
                "symbols": [
                  "infinity"
                ]
              }
            ],
            "summary": "Idle Timeout"
          },
          "max_packet_size": {
            "type": "byteSize",
            "summary": "Max Packet Size"
          },
          "max_clientid_len": {
            "type": "number",
            "summary": "Max Client ID Length",
            "minimum": 23,
            "maximum": 65535
          },
          "max_topic_levels": {
            "type": "number",
            "summary": "Max Topic Levels",
            "minimum": 1,
            "maximum": 65535
          },
          "max_qos_allowed": {
            "type": "enum",
            "symbols": [
              0,
              1,
              2
            ],
            "summary": "Max QoS"
          },
          "max_topic_alias": {
            "type": "number",
            "summary": "Max Topic Alias",
            "minimum": 0,
            "maximum": 65535
          },
          "retain_available": {
            "type": "boolean",
            "summary": "Retain Available"
          },
          "wildcard_subscription": {
            "type": "boolean",
            "summary": "Wildcard Subscription Available"
          },
          "shared_subscription": {
            "type": "boolean",
            "summary": "Shared Subscription Available"
          },
          "exclusive_subscription": {
            "type": "boolean",
            "summary": "Exclusive Subscription"
          },
          "ignore_loop_deliver": {
            "type": "boolean",
            "summary": "Ignore Loop Deliver"
          },
          "strict_mode": {
            "type": "boolean",
            "summary": "Strict Mode"
          },
          "response_information": {
            "type": "string",
            "summary": "Response Information"
          },
          "server_keepalive": {
            "oneOf": [
              {
                "type": "enum",
                "symbols": [
                  "disabled"
                ]
              },
              {
                "type": "number"
              }
            ],
            "summary": "Server Keep Alive"
          },
          "keepalive_backoff": {
            "type": "number",
            "summary": "Keep Alive Backoff"
          },
          "max_subscriptions": {
            "oneOf": [
              {
                "type": "enum",
                "symbols": [
                  "infinity"
                ]
              },
              {
                "type": "number",
                "minimum": 1
              }
            ],
            "summary": "Max Subscriptions"
          },
          "upgrade_qos": {
            "type": "boolean",
            "summary": "Upgrade QoS"
          },
          "max_inflight": {
            "type": "number",
            "summary": "Max Inflight",
            "minimum": 1,
            "maximum": 65535
          },
          "retry_interval": {
            "type": "duration",
            "summary": "Retry Interval"
          },
          "max_awaiting_rel": {
            "oneOf": [
              {
                "type": "enum",
                "symbols": [
                  "infinity"
                ]
              },
              {
                "type": "number"
              }
            ],
            "summary": "Max Awaiting PUBREL"
          },
          "await_rel_timeout": {
            "type": "duration",
            "summary": "Max Awaiting PUBREL TIMEOUT"
          },
          "session_expiry_interval": {
            "type": "duration",
            "summary": "Session Expiry Interval"
          },
          "max_mqueue_len": {
            "oneOf": [
              {
                "type": "enum",
                "symbols": [
                  "infinity"
                ]
              },
              {
                "type": "number",
                "minimum": 1
              }
            ],
            "summary": "Max Message Queue Length"
          },
          "mqueue_priorities": {
            "oneOf": [
              {
                "type": "enum",
                "symbols": [
                  "disabled"
                ]
              },
              {
                "type": "object"
              }
            ],
            "summary": "Topic Priorities"
          },
          "mqueue_default_priority": {
            "type": "enum",
            "symbols": [
              "highest",
              "lowest"
            ],
            "summary": "Default Topic Priorities"
          },
          "mqueue_store_qos0": {
            "type": "boolean",
            "summary": "Store QoS 0 Message"
          },
          "use_username_as_clientid": {
            "type": "boolean",
            "summary": "Use Username as Client ID"
          },
          "peer_cert_as_username": {
            "type": "enum",
            "symbols": [
              "disabled",
              "cn",
              "dn",
              "crt",
              "pem",
              "md5"
            ],
            "summary": "Use Peer Certificate as Username"
          },
          "peer_cert_as_clientid": {
            "type": "enum",
            "symbols": [
              "disabled",
              "cn",
              "dn",
              "crt",
              "pem",
              "md5"
            ],
            "summary": "Use Peer Certificate as Client ID"
          }
        }
      },
      "zone.force_shutdown": {
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean",
            "summary": "Enable `force_shutdown` feature"
          },
          "max_message_queue_len": {
            "type": "number",
            "summary": "Maximum mailbox queue length of process.",
            "minimum": 0
          },
          "max_heap_size": {
            "type": "byteSize",
            "summary": "Total heap size"
          }
        }
      },
      "zone.force_gc": {
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean",
            "summary": "Enable forced garbage collection"
          },
          "count": {
            "type": "number",
            "summary": "Process GC messages num",
            "minimum": 0
          },
          "bytes": {
            "type": "byteSize",
            "summary": "Process GC bytes"
          }
        }
      },
      "limiter.node_opts": {
        "type": "object",
        "properties": {
          "rate": {
            "type": "string",
            "summary": "Rate",
            "default": "infinity"
          },
          "burst": {
            "type": "string",
            "summary": "Burst",
            "default": "0"
          }
        }
      },
      "limiter.limiter": {
        "type": "object",
        "properties": {
          "bytes_in": {
            "$ref": "#/components/schemas/limiter.node_opts",
            "summary": "Bytes In",
            "default": {}
          },
          "message_in": {
            "$ref": "#/components/schemas/limiter.node_opts",
            "summary": "Message In",
            "default": {}
          },
          "connection": {
            "$ref": "#/components/schemas/limiter.node_opts",
            "summary": "Connection",
            "default": {}
          },
          "message_routing": {
            "$ref": "#/components/schemas/limiter.node_opts",
            "summary": "Message Routing",
            "default": {}
          },
          "internal": {
            "$ref": "#/components/schemas/limiter.node_opts",
            "default": {}
          },
          "client": {
            "$ref": "#/components/schemas/limiter.client_fields",
            "summary": "Per Client",
            "default": {
              "message_routing": {},
              "message_in": {},
              "internal": {},
              "connection": {},
              "bytes_in": {}
            }
          }
        }
      },
      "limiter.client_opts": {
        "type": "object",
        "properties": {
          "rate": {
            "type": "string",
            "summary": "Rate",
            "default": "infinity"
          },
          "initial": {
            "type": "string",
            "summary": "Initial",
            "default": "0"
          },
          "low_watermark": {
            "type": "string",
            "summary": "Low Watermark",
            "default": "0"
          },
          "capacity": {
            "type": "string",
            "summary": "Capacity",
            "default": "infinity"
          },
          "divisible": {
            "type": "boolean",
            "summary": "Divisible",
            "default": false
          },
          "max_retry_time": {
            "type": "duration",
            "summary": "Max Retry Time",
            "default": "10s"
          },
          "failure_strategy": {
            "type": "enum",
            "symbols": [
              "force",
              "drop",
              "throw"
            ],
            "summary": "Failure Strategy",
            "default": "force"
          }
        }
      },
      "limiter.client_fields": {
        "type": "object",
        "properties": {
          "bytes_in": {
            "$ref": "#/components/schemas/limiter.client_opts",
            "summary": "Bytes In",
            "default": {}
          },
          "message_in": {
            "$ref": "#/components/schemas/limiter.client_opts",
            "summary": "Message In",
            "default": {}
          },
          "connection": {
            "$ref": "#/components/schemas/limiter.client_opts",
            "summary": "Connection",
            "default": {}
          },
          "message_routing": {
            "$ref": "#/components/schemas/limiter.client_opts",
            "summary": "Message Routing",
            "default": {}
          },
          "internal": {
            "$ref": "#/components/schemas/limiter.client_opts",
            "default": {}
          }
        }
      },
      "emqx_conf_schema.log_rotation": {
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean",
            "summary": "Rotation Enable",
            "default": true
          },
          "count": {
            "type": "number",
            "summary": "Max Log Files Number",
            "minimum": 1,
            "maximum": 2048,
            "default": 10
          }
        }
      },
      "emqx_conf_schema.log_overload_kill": {
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean",
            "summary": "Log Handler Overload Kill",
            "default": true
          },
          "mem_size": {
            "type": "byteSize",
            "summary": "Log Handler Max Memory Size",
            "default": "30MB"
          },
          "qlen": {
            "type": "string",
            "summary": "Max Queue Length",
            "default": 20000
          },
          "restart_after": {
            "oneOf": [
              {
                "type": "enum",
                "symbols": [
                  "infinity"
                ]
              },
              {
                "type": "duration"
              }
            ],
            "summary": "Handler Restart Timer",
            "default": "5s"
          }
        }
      },
      "emqx_conf_schema.log_file_handler": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "summary": "Log File Name"
          },
          "rotation": {
            "$ref": "#/components/schemas/emqx_conf_schema.log_rotation"
          },
          "max_size": {
            "oneOf": [
              {
                "type": "byteSize"
              },
              {
                "type": "enum",
                "symbols": [
                  "infinity"
                ]
              }
            ],
            "summary": "Rotation Size",
            "default": "50MB"
          },
          "enable": {
            "type": "boolean",
            "summary": "Enable Log Handler",
            "default": true
          },
          "level": {
            "type": "enum",
            "symbols": [
              "debug",
              "info",
              "notice",
              "warning",
              "error",
              "critical",
              "alert",
              "emergency",
              "all"
            ],
            "summary": "Log Level",
            "default": "warning"
          },
          "time_offset": {
            "type": "string",
            "summary": "Time Offset",
            "default": "system"
          },
          "chars_limit": {
            "oneOf": [
              {
                "type": "number",
                "minimum": 100
              },
              {
                "type": "enum",
                "symbols": [
                  "unlimited"
                ]
              }
            ],
            "summary": "Single Log Max Length",
            "default": "unlimited"
          },
          "formatter": {
            "type": "enum",
            "symbols": [
              "text",
              "json"
            ],
            "summary": "Log Formatter",
            "default": "text"
          },
          "single_line": {
            "type": "boolean",
            "summary": "Single Line Mode",
            "default": true
          },
          "sync_mode_qlen": {
            "type": "number",
            "summary": "Queue Length before Entering Sync Mode",
            "minimum": 1,
            "default": 100
          },
          "drop_mode_qlen": {
            "type": "string",
            "summary": "Queue Length before Entering Drop Mode",
            "default": 3000
          },
          "flush_qlen": {
            "type": "string",
            "summary": "Flush Threshold",
            "default": 8000
          },
          "overload_kill": {
            "$ref": "#/components/schemas/emqx_conf_schema.log_overload_kill"
          },
          "burst_limit": {
            "$ref": "#/components/schemas/emqx_conf_schema.log_burst_limit"
          },
          "supervisor_reports": {
            "type": "enum",
            "symbols": [
              "error",
              "progress"
            ],
            "summary": "Report Type",
            "default": "error"
          },
          "max_depth": {
            "oneOf": [
              {
                "type": "number",
                "minimum": 1
              },
              {
                "type": "enum",
                "symbols": [
                  "unlimited"
                ]
              }
            ],
            "summary": "Max Depth",
            "default": 100
          }
        }
      },
      "emqx_conf_schema.log_burst_limit": {
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean",
            "summary": "Enable Burst",
            "default": true
          },
          "max_count": {
            "type": "string",
            "summary": "Events Number",
            "default": 10000
          },
          "window_time": {
            "type": "duration",
            "summary": "Window Time",
            "default": "1s"
          }
        }
      },
      "emqx_conf_schema.log": {
        "type": "object",
        "properties": {
          "console_handler": {
            "$ref": "#/components/schemas/emqx_conf_schema.console_handler",
            "summary": "Console Handler"
          },
          "file_handlers": {
            "type": "object",
            "properties": {
              "$name": {
                "$ref": "#/components/schemas/emqx_conf_schema.log_file_handler"
              }
            },
            "summary": "File Handler"
          }
        }
      },
      "emqx_conf_schema.console_handler": {
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean",
            "summary": "Enable Log Handler",
            "default": false
          },
          "level": {
            "type": "enum",
            "symbols": [
              "debug",
              "info",
              "notice",
              "warning",
              "error",
              "critical",
              "alert",
              "emergency",
              "all"
            ],
            "summary": "Log Level",
            "default": "warning"
          },
          "time_offset": {
            "type": "string",
            "summary": "Time Offset",
            "default": "system"
          },
          "chars_limit": {
            "oneOf": [
              {
                "type": "number",
                "minimum": 100
              },
              {
                "type": "enum",
                "symbols": [
                  "unlimited"
                ]
              }
            ],
            "summary": "Single Log Max Length",
            "default": "unlimited"
          },
          "formatter": {
            "type": "enum",
            "symbols": [
              "text",
              "json"
            ],
            "summary": "Log Formatter",
            "default": "text"
          },
          "single_line": {
            "type": "boolean",
            "summary": "Single Line Mode",
            "default": true
          },
          "sync_mode_qlen": {
            "type": "number",
            "summary": "Queue Length before Entering Sync Mode",
            "minimum": 1,
            "default": 100
          },
          "drop_mode_qlen": {
            "type": "string",
            "summary": "Queue Length before Entering Drop Mode",
            "default": 3000
          },
          "flush_qlen": {
            "type": "string",
            "summary": "Flush Threshold",
            "default": 8000
          },
          "overload_kill": {
            "$ref": "#/components/schemas/emqx_conf_schema.log_overload_kill"
          },
          "burst_limit": {
            "$ref": "#/components/schemas/emqx_conf_schema.log_burst_limit"
          },
          "supervisor_reports": {
            "type": "enum",
            "symbols": [
              "error",
              "progress"
            ],
            "summary": "Report Type",
            "default": "error"
          },
          "max_depth": {
            "oneOf": [
              {
                "type": "number",
                "minimum": 1
              },
              {
                "type": "enum",
                "symbols": [
                  "unlimited"
                ]
              }
            ],
            "summary": "Max Depth",
            "default": 100
          }
        }
      },
      "dashboard.listeners": {
        "type": "object",
        "properties": {
          "http": {
            "$ref": "#/components/schemas/dashboard.http"
          },
          "https": {
            "$ref": "#/components/schemas/dashboard.https"
          }
        }
      },
      "dashboard.https": {
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean",
            "summary": "Enable",
            "default": false
          },
          "bind": {
            "oneOf": [
              {
                "type": "ip_port"
              },
              {
                "type": "number",
                "minimum": 1
              }
            ],
            "summary": "Bind",
            "example": "0.0.0.0:18084",
            "default": 18084
          },
          "num_acceptors": {
            "type": "number",
            "summary": "Number of acceptors",
            "default": 12
          },
          "max_connections": {
            "type": "number",
            "summary": "Maximum connections",
            "default": 512
          },
          "backlog": {
            "type": "number",
            "summary": "Backlog",
            "default": 1024
          },
          "send_timeout": {
            "type": "duration",
            "summary": "Send timeout",
            "default": "10s"
          },
          "inet6": {
            "type": "boolean",
            "summary": "IPv6",
            "default": false
          },
          "ipv6_v6only": {
            "type": "boolean",
            "summary": "IPv6 only",
            "default": false
          },
          "proxy_header": {
            "type": "boolean",
            "summary": "Enable support for HAProxy header",
            "default": false
          },
          "cacertfile": {
            "type": "string",
            "summary": "CACertfile"
          },
          "certfile": {
            "type": "string",
            "summary": "Certfile"
          },
          "keyfile": {
            "type": "string",
            "summary": "Keyfile"
          },
          "verify": {
            "type": "enum",
            "symbols": [
              "verify_peer",
              "verify_none"
            ],
            "summary": "Verify peer",
            "default": "verify_none"
          },
          "reuse_sessions": {
            "type": "boolean",
            "summary": "TLS session reuse",
            "default": true
          },
          "depth": {
            "type": "number",
            "summary": "CACert Depth",
            "default": 10
          },
          "versions": {
            "type": "array",
            "summary": "SSL versions",
            "items": {
              "type": "string"
            },
            "default": [
              "tlsv1.3",
              "tlsv1.2",
              "tlsv1.1",
              "tlsv1"
            ]
          },
          "ciphers": {
            "type": "array",
            "summary": "",
            "items": {
              "type": "string"
            },
            "default": ""
          },
          "user_lookup_fun": {
            "type": "string",
            "summary": "SSL PSK user lookup fun",
            "default": "emqx_tls_psk:lookup"
          },
          "secure_renegotiate": {
            "type": "boolean",
            "summary": "SSL renegotiate",
            "default": true
          },
          "hibernate_after": {
            "type": "duration",
            "summary": "hibernate after",
            "default": "5s"
          },
          "dhfile": {
            "type": "string",
            "summary": "SSL dhfile"
          },
          "honor_cipher_order": {
            "type": "boolean",
            "summary": "SSL honor cipher order",
            "default": true
          },
          "client_renegotiation": {
            "type": "boolean",
            "summary": "SSL client renegotiation",
            "default": true
          },
          "handshake_timeout": {
            "type": "duration",
            "summary": "Handshake timeout",
            "default": "15s"
          }
        },
        "required": [
          "bind",
          "enable"
        ]
      },
      "dashboard.http": {
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean",
            "summary": "Enable",
            "default": true
          },
          "bind": {
            "oneOf": [
              {
                "type": "ip_port"
              },
              {
                "type": "number",
                "minimum": 1
              }
            ],
            "summary": "Bind",
            "example": "0.0.0.0:18083",
            "default": 18083
          },
          "num_acceptors": {
            "type": "number",
            "summary": "Number of acceptors",
            "default": 12
          },
          "max_connections": {
            "type": "number",
            "summary": "Maximum connections",
            "default": 512
          },
          "backlog": {
            "type": "number",
            "summary": "Backlog",
            "default": 1024
          },
          "send_timeout": {
            "type": "duration",
            "summary": "Send timeout",
            "default": "10s"
          },
          "inet6": {
            "type": "boolean",
            "summary": "IPv6",
            "default": false
          },
          "ipv6_v6only": {
            "type": "boolean",
            "summary": "IPv6 only",
            "default": false
          },
          "proxy_header": {
            "type": "boolean",
            "summary": "Enable support for HAProxy header",
            "default": false
          }
        },
        "required": [
          "bind",
          "enable"
        ]
      },
      "dashboard.dashboard": {
        "type": "object",
        "properties": {
          "listeners": {
            "$ref": "#/components/schemas/dashboard.listeners",
            "summary": "Listeners"
          },
          "token_expired_time": {
            "type": "duration",
            "summary": "Token expired time",
            "default": "60m"
          },
          "cors": {
            "type": "boolean",
            "summary": "CORS",
            "default": false
          }
        }
      },
      "broker.zone": {
        "type": "object",
        "properties": {
          "mqtt": {
            "$ref": "#/components/schemas/zone.mqtt"
          },
          "force_shutdown": {
            "$ref": "#/components/schemas/zone.force_shutdown"
          },
          "force_gc": {
            "$ref": "#/components/schemas/zone.force_gc"
          }
        }
      },
      "broker.trace": {
        "type": "object",
        "properties": []
      },
      "broker.sysmon_vm": {
        "type": "object",
        "properties": {
          "process_check_interval": {
            "type": "duration",
            "summary": "Process limit check interval",
            "default": "30s"
          },
          "process_high_watermark": {
            "type": "percent",
            "summary": "Process high watermark",
            "default": "80%"
          },
          "process_low_watermark": {
            "type": "percent",
            "summary": "Process low watermark",
            "default": "60%"
          },
          "long_gc": {
            "oneOf": [
              {
                "type": "duration"
              },
              {
                "type": "enum",
                "symbols": [
                  "disabled"
                ]
              }
            ],
            "summary": "Enable Long GC monitoring.",
            "default": "disabled"
          },
          "long_schedule": {
            "oneOf": [
              {
                "type": "duration"
              },
              {
                "type": "enum",
                "symbols": [
                  "disabled"
                ]
              }
            ],
            "summary": "Enable Long Schedule monitoring.",
            "default": "240ms"
          },
          "large_heap": {
            "oneOf": [
              {
                "type": "byteSize"
              },
              {
                "type": "enum",
                "symbols": [
                  "disabled"
                ]
              }
            ],
            "summary": "Enable Large Heap monitoring.",
            "default": "32MB"
          },
          "busy_dist_port": {
            "type": "boolean",
            "summary": "Enable Busy Distribution Port monitoring.",
            "default": true
          },
          "busy_port": {
            "type": "boolean",
            "summary": "Enable Busy Port monitoring.",
            "default": true
          }
        }
      },
      "broker.sysmon_top": {
        "type": "object",
        "properties": {
          "num_items": {
            "type": "number",
            "summary": "Top num items",
            "minimum": 1,
            "default": 10
          },
          "sample_interval": {
            "type": "duration",
            "summary": "Top sample interval",
            "default": "2s"
          },
          "max_procs": {
            "type": "number",
            "summary": "Max procs",
            "minimum": 1,
            "default": 1000000
          },
          "db_hostname": {
            "type": "string",
            "summary": "DB Hostname",
            "default": ""
          },
          "db_port": {
            "type": "number",
            "summary": "DB Port",
            "default": 5432
          },
          "db_username": {
            "type": "string",
            "summary": "DB Username",
            "default": "system_monitor"
          },
          "db_password": {
            "type": "string",
            "summary": "DB Password",
            "default": "system_monitor_password"
          },
          "db_name": {
            "type": "string",
            "summary": "DB Name",
            "default": "postgres"
          }
        }
      },
      "broker.sysmon_os": {
        "type": "object",
        "properties": {
          "cpu_check_interval": {
            "type": "duration",
            "summary": "The time interval for the periodic CPU check.",
            "default": "60s"
          },
          "cpu_high_watermark": {
            "type": "percent",
            "summary": "CPU high watermark",
            "default": "80%"
          },
          "cpu_low_watermark": {
            "type": "percent",
            "summary": "CPU low watermark",
            "default": "60%"
          },
          "mem_check_interval": {
            "oneOf": [
              {
                "type": "duration"
              },
              {
                "type": "enum",
                "symbols": [
                  "disabled"
                ]
              }
            ],
            "summary": "Mem check interval",
            "default": "60s"
          },
          "sysmem_high_watermark": {
            "type": "percent",
            "summary": "SysMem high wartermark",
            "default": "70%"
          },
          "procmem_high_watermark": {
            "type": "percent",
            "summary": "ProcMem high wartermark",
            "default": "5%"
          }
        }
      },
      "broker.sysmon": {
        "type": "object",
        "properties": {
          "vm": {
            "$ref": "#/components/schemas/broker.sysmon_vm"
          },
          "os": {
            "$ref": "#/components/schemas/broker.sysmon_os"
          },
          "top": {
            "$ref": "#/components/schemas/broker.sysmon_top"
          }
        }
      },
      "broker.sys_topics": {
        "type": "object",
        "properties": {
          "sys_msg_interval": {
            "oneOf": [
              {
                "type": "duration"
              },
              {
                "type": "enum",
                "symbols": [
                  "disabled"
                ]
              }
            ],
            "default": "1m"
          },
          "sys_heartbeat_interval": {
            "oneOf": [
              {
                "type": "duration"
              },
              {
                "type": "enum",
                "symbols": [
                  "disabled"
                ]
              }
            ],
            "default": "30s"
          },
          "sys_event_messages": {
            "$ref": "#/components/schemas/broker.event_names"
          }
        }
      },
      "broker.persistent_table_mria_opts": {
        "type": "object",
        "properties": {
          "ram_cache": {
            "type": "boolean",
            "summary": "RAM cache",
            "default": true
          }
        }
      },
      "broker.persistent_session_store": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "summary": "Enable persistent session store",
            "default": false
          },
          "on_disc": {
            "type": "boolean",
            "summary": "Persist on disc",
            "default": true
          },
          "ram_cache": {
            "type": "boolean",
            "summary": "RAM cache",
            "default": false
          },
          "backend": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/broker.persistent_session_builtin"
              }
            ],
            "summary": "Backend",
            "default": {
              "type": "builtin",
              "session_messages": {
                "ram_cache": "true"
              },
              "session": {
                "ram_cache": "true"
              },
              "messages": {
                "ram_cache": "false"
              }
            }
          },
          "max_retain_undelivered": {
            "type": "duration",
            "summary": "Max retain undelivered",
            "default": "1h"
          },
          "message_gc_interval": {
            "type": "duration",
            "summary": "Message GC interval",
            "default": "1h"
          },
          "session_message_gc_interval": {
            "type": "duration",
            "summary": "Session message GC interval",
            "default": "1m"
          }
        }
      },
      "broker.persistent_session_builtin": {
        "type": "object",
        "properties": {
          "type": {
            "type": "enum",
            "symbols": [
              "builtin"
            ],
            "default": "builtin"
          },
          "session": {
            "$ref": "#/components/schemas/broker.persistent_table_mria_opts",
            "summary": "Persistent session"
          },
          "session_messages": {
            "$ref": "#/components/schemas/broker.persistent_table_mria_opts",
            "summary": "Persistent session messages"
          },
          "messages": {
            "$ref": "#/components/schemas/broker.persistent_table_mria_opts",
            "summary": "Persistent messages"
          }
        }
      },
      "broker.event_names": {
        "type": "object",
        "properties": {
          "client_connected": {
            "type": "boolean",
            "default": true
          },
          "client_disconnected": {
            "type": "boolean",
            "default": true
          },
          "client_subscribed": {
            "type": "boolean",
            "default": false
          },
          "client_unsubscribed": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "broker.alarm": {
        "type": "object",
        "properties": {
          "actions": {
            "type": "array",
            "summary": "Alarm Actions",
            "items": {
              "type": "string"
            },
            "example": [
              "log",
              "publish"
            ],
            "default": [
              "log",
              "publish"
            ]
          },
          "size_limit": {
            "type": "number",
            "summary": "Alarm size limit",
            "minimum": 1,
            "maximum": 3000,
            "example": 1000,
            "default": 1000
          },
          "validity_period": {
            "type": "duration",
            "summary": "Alarm validity period",
            "example": "24h",
            "default": "24h"
          }
        }
      }
    }
  }
}